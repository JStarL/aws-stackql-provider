openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: api_gateway
  x-aws-serviceName: apigateway
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2015-07-09'
  title: Amazon API Gateway
  description: |-
    Amazon API Gateway

    Amazon API Gateway helps developers deliver robust, secure, and scalable mobile and web application back ends. API Gateway allows developers to securely connect mobile and web applications to APIs that run on Lambda, Amazon EC2, or other publicly addressable web services that are hosted outside of AWS.
servers:
- description: The Amazon API Gateway regional endpoint
  url: https://apigateway.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /apikeys:
    post:
      operationId: CreateApiKey
      description: |-
        Create an ApiKey resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                enabled:
                  $ref: '#/components/schemas/Boolean'
                generateDistinctId:
                  $ref: '#/components/schemas/Boolean'
                value:
                  $ref: '#/components/schemas/String'
                stageKeys:
                  $ref: '#/components/schemas/ListOfStageKeys'
                customerId:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetApiKeys
      description: |-
        Gets information about the current ApiKeys resource.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: customerId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: includeValues
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableBoolean'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/authorizers:
    post:
      operationId: CreateAuthorizer
      description: |-
        Adds a new Authorizer resource to an existing RestApi resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                type:
                  $ref: '#/components/schemas/AuthorizerType'
                providerARNs:
                  $ref: '#/components/schemas/ListOfARNs'
                authType:
                  $ref: '#/components/schemas/String'
                authorizerUri:
                  $ref: '#/components/schemas/String'
                authorizerCredentials:
                  $ref: '#/components/schemas/String'
                identitySource:
                  $ref: '#/components/schemas/String'
                identityValidationExpression:
                  $ref: '#/components/schemas/String'
                authorizerResultTtlInSeconds:
                  $ref: '#/components/schemas/NullableInteger'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetAuthorizers
      description: |-
        Describe an existing Authorizers resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnames/{domainName}/basepathmappings:
    post:
      operationId: CreateBasePathMapping
      description: |-
        Creates a new BasePathMapping resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                basePath:
                  $ref: '#/components/schemas/String'
                restApiId:
                  $ref: '#/components/schemas/String'
                stage:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetBasePathMappings
      description: |-
        Represents a collection of BasePathMapping resources.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/deployments:
    post:
      operationId: CreateDeployment
      description: |-
        Creates a Deployment resource, which makes a specified RestApi callable over the internet.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageName:
                  $ref: '#/components/schemas/String'
                stageDescription:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                cacheClusterEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
                cacheClusterSize:
                  $ref: '#/components/schemas/CacheClusterSize'
                variables:
                  $ref: '#/components/schemas/MapOfStringToString'
                canarySettings:
                  $ref: '#/components/schemas/DeploymentCanarySettings'
                tracingEnabled:
                  $ref: '#/components/schemas/NullableBoolean'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The requested service is not available. For details see the accompanying error message. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDeployments
      description: |-
        Gets information about a Deployments collection.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The requested service is not available. For details see the accompanying error message. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/documentation/parts:
    post:
      operationId: CreateDocumentationPart
      description: |-
        Creates a documentation part.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  $ref: '#/components/schemas/DocumentationPartLocation'
                properties:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDocumentationParts
      description: |-
        Gets documentation parts.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DocumentationPartType'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: path
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: locationStatus
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocationStatusType'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: ImportDocumentationParts
      description: |-
        Imports documentation parts
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: mode
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PutMode'
      - name: failonwarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/Blob'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/documentation/versions:
    post:
      operationId: CreateDocumentationVersion
      description: |-
        Creates a documentation version
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentationVersion:
                  $ref: '#/components/schemas/String'
                stageName:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDocumentationVersions
      description: |-
        Gets documentation versions.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnames:
    post:
      operationId: CreateDomainName
      description: |-
        Creates a new domain name.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domainName:
                  $ref: '#/components/schemas/String'
                certificateName:
                  $ref: '#/components/schemas/String'
                certificateBody:
                  $ref: '#/components/schemas/String'
                certificatePrivateKey:
                  $ref: '#/components/schemas/String'
                certificateChain:
                  $ref: '#/components/schemas/String'
                certificateArn:
                  $ref: '#/components/schemas/String'
                regionalCertificateName:
                  $ref: '#/components/schemas/String'
                regionalCertificateArn:
                  $ref: '#/components/schemas/String'
                endpointConfiguration:
                  $ref: '#/components/schemas/EndpointConfiguration'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
                securityPolicy:
                  $ref: '#/components/schemas/SecurityPolicy'
                mutualTlsAuthentication:
                  $ref: '#/components/schemas/MutualTlsAuthenticationInput'
                ownershipVerificationCertificateArn:
                  $ref: '#/components/schemas/String'
                policy:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDomainNames
      description: |-
        Represents a collection of DomainName resources.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: resourceOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceOwner'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnameaccessassociations:
    post:
      operationId: CreateDomainNameAccessAssociation
      description: |-
        Creates a domain name access association resource between an access association source and a private custom domain name.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domainNameArn:
                  $ref: '#/components/schemas/String'
                accessAssociationSourceType:
                  $ref: '#/components/schemas/AccessAssociationSourceType'
                accessAssociationSource:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDomainNameAccessAssociations
      description: |-
        Represents a collection on DomainNameAccessAssociations resources.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: resourceOwner
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResourceOwner'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/models:
    post:
      operationId: CreateModel
      description: |-
        Adds a new Model resource to an existing RestApi resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                schema:
                  $ref: '#/components/schemas/String'
                contentType:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetModels
      description: |-
        Describes existing Models defined for a RestApi resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/requestvalidators:
    post:
      operationId: CreateRequestValidator
      description: |-
        Creates a RequestValidator of a given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                validateRequestBody:
                  $ref: '#/components/schemas/Boolean'
                validateRequestParameters:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetRequestValidators
      description: |-
        Gets the RequestValidators collection of a given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{parentId}:
    post:
      operationId: CreateResource
      description: |-
        Creates a Resource resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: parentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathPart:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis:
    post:
      operationId: CreateRestApi
      description: |-
        Creates a new RestApi resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                version:
                  $ref: '#/components/schemas/String'
                cloneFrom:
                  $ref: '#/components/schemas/String'
                binaryMediaTypes:
                  $ref: '#/components/schemas/ListOfString'
                minimumCompressionSize:
                  $ref: '#/components/schemas/NullableInteger'
                apiKeySource:
                  $ref: '#/components/schemas/ApiKeySourceType'
                endpointConfiguration:
                  $ref: '#/components/schemas/EndpointConfiguration'
                policy:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
                disableExecuteApiEndpoint:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetRestApis
      description: |-
        Lists the RestApis resources for your collection.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages:
    post:
      operationId: CreateStage
      description: |-
        Creates a new Stage resource that references a pre-existing Deployment for the API.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stageName:
                  $ref: '#/components/schemas/String'
                deploymentId:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                cacheClusterEnabled:
                  $ref: '#/components/schemas/Boolean'
                cacheClusterSize:
                  $ref: '#/components/schemas/CacheClusterSize'
                variables:
                  $ref: '#/components/schemas/MapOfStringToString'
                documentationVersion:
                  $ref: '#/components/schemas/String'
                canarySettings:
                  $ref: '#/components/schemas/CanarySettings'
                tracingEnabled:
                  $ref: '#/components/schemas/Boolean'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetStages
      description: |-
        Gets information about one or more Stage resources.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: deploymentId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans:
    post:
      operationId: CreateUsagePlan
      description: |-
        Creates a usage plan with the throttle and quota limits, as well as the associated API stages, specified in the payload.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                apiStages:
                  $ref: '#/components/schemas/ListOfApiStage'
                throttle:
                  $ref: '#/components/schemas/ThrottleSettings'
                quota:
                  $ref: '#/components/schemas/QuotaSettings'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetUsagePlans
      description: |-
        Gets all the usage plans of the caller's account.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: keyId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans/{usagePlanId}/keys:
    post:
      operationId: CreateUsagePlanKey
      description: |-
        Creates a usage plan key for adding an existing API key to a usage plan.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keyId:
                  $ref: '#/components/schemas/String'
                keyType:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetUsagePlanKeys
      description: |-
        Gets all the usage plan keys representing the API keys added to a specified usage plan.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /vpclinks:
    post:
      operationId: CreateVpcLink
      description: |-
        Creates a VPC link, under the caller's account in a selected region, in an asynchronous operation that typically takes 2-4 minutes to complete and become operational. The caller must have permissions to create and update VPC Endpoint services.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/String'
                description:
                  $ref: '#/components/schemas/String'
                targetArns:
                  $ref: '#/components/schemas/ListOfString'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetVpcLinks
      description: |-
        Gets the VpcLinks collection under the caller's account in a selected region.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /apikeys/{apiKey}:
    delete:
      operationId: DeleteApiKey
      description: |-
        Deletes the ApiKey resource.
      parameters:
      - name: apiKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetApiKey
      description: |-
        Gets information about the current ApiKey resource.
      parameters:
      - name: apiKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: includeValue
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableBoolean'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateApiKey
      description: |-
        Changes information about an ApiKey resource.
      parameters:
      - name: apiKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/authorizers/{authorizerId}:
    delete:
      operationId: DeleteAuthorizer
      description: |-
        Deletes an existing Authorizer resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: authorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetAuthorizer
      description: |-
        Describe an existing Authorizer resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: authorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: TestInvokeAuthorizer
      description: |-
        Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: authorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                headers:
                  $ref: '#/components/schemas/MapOfStringToString'
                multiValueHeaders:
                  $ref: '#/components/schemas/MapOfStringToList'
                pathWithQueryString:
                  $ref: '#/components/schemas/String'
                body:
                  $ref: '#/components/schemas/String'
                stageVariables:
                  $ref: '#/components/schemas/MapOfStringToString'
                additionalContext:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateAuthorizer
      description: |-
        Updates an existing Authorizer resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: authorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnames/{domainName}/basepathmappings/{basePath}:
    delete:
      operationId: DeleteBasePathMapping
      description: |-
        Deletes the BasePathMapping resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: basePath
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetBasePathMapping
      description: |-
        Describe a BasePathMapping resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: basePath
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateBasePathMapping
      description: |-
        Changes information about the BasePathMapping resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: basePath
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /clientcertificates/{clientCertificateId}:
    delete:
      operationId: DeleteClientCertificate
      description: |-
        Deletes the ClientCertificate resource.
      parameters:
      - name: clientCertificateId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetClientCertificate
      description: |-
        Gets information about the current ClientCertificate resource.
      parameters:
      - name: clientCertificateId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateClientCertificate
      description: |-
        Changes information about an ClientCertificate resource.
      parameters:
      - name: clientCertificateId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/deployments/{deploymentId}:
    delete:
      operationId: DeleteDeployment
      description: |-
        Deletes a Deployment resource. Deleting a deployment will only succeed if there are no Stage resources associated with it.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: deploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDeployment
      description: |-
        Gets information about a Deployment resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: deploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: embed
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListOfString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The requested service is not available. For details see the accompanying error message. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateDeployment
      description: |-
        Changes information about a Deployment resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: deploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '503':
          description: |-
            The requested service is not available. For details see the accompanying error message. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/documentation/parts/{documentationPartId}:
    delete:
      operationId: DeleteDocumentationPart
      description: |-
        Deletes a documentation part
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationPartId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDocumentationPart
      description: |-
        Gets a documentation part.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationPartId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateDocumentationPart
      description: |-
        Updates a documentation part.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationPartId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/documentation/versions/{documentationVersion}:
    delete:
      operationId: DeleteDocumentationVersion
      description: |-
        Deletes a documentation version.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDocumentationVersion
      description: |-
        Gets a documentation version.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateDocumentationVersion
      description: |-
        Updates a documentation version.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: documentationVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnames/{domainName}:
    delete:
      operationId: DeleteDomainName
      description: |-
        Deletes the DomainName resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetDomainName
      description: |-
        Represents a domain name that is contained in a simpler, more intuitive URL that can be called.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateDomainName
      description: |-
        Changes information about the DomainName resource.
      parameters:
      - name: domainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /domainnameaccessassociations/{domainNameAccessAssociationArn}:
    delete:
      operationId: DeleteDomainNameAccessAssociation
      description: |-
        Deletes the DomainNameAccessAssociation resource.

        Only the AWS account that created the DomainNameAccessAssociation resource can delete it. To stop an access association source in another AWS account from accessing your private custom domain name, use the RejectDomainNameAccessAssociation operation.
      parameters:
      - name: domainNameAccessAssociationArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/gatewayresponses/{responseType}:
    delete:
      operationId: DeleteGatewayResponse
      description: |-
        Clears any customization of a GatewayResponse of a specified response type on the given RestApi and resets it with the default settings.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: responseType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayResponseType'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetGatewayResponse
      description: |-
        Gets a GatewayResponse of a specified response type on the given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: responseType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayResponseType'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutGatewayResponse
      description: |-
        Creates a customization of a GatewayResponse of a specified response type and status code on the given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: responseType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayResponseType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                statusCode:
                  $ref: '#/components/schemas/StatusCode'
                responseParameters:
                  $ref: '#/components/schemas/MapOfStringToString'
                responseTemplates:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateGatewayResponse
      description: |-
        Updates a GatewayResponse of a specified response type on the given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: responseType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/GatewayResponseType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration:
    delete:
      operationId: DeleteIntegration
      description: |-
        Represents a delete integration.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '204': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetIntegration
      description: |-
        Get the integration settings.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutIntegration
      description: |-
        Sets up a method's integration.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/IntegrationType'
                integrationHttpMethod:
                  $ref: '#/components/schemas/String'
                uri:
                  $ref: '#/components/schemas/String'
                connectionType:
                  $ref: '#/components/schemas/ConnectionType'
                connectionId:
                  $ref: '#/components/schemas/String'
                credentials:
                  $ref: '#/components/schemas/String'
                requestParameters:
                  $ref: '#/components/schemas/MapOfStringToString'
                requestTemplates:
                  $ref: '#/components/schemas/MapOfStringToString'
                passthroughBehavior:
                  $ref: '#/components/schemas/String'
                cacheNamespace:
                  $ref: '#/components/schemas/String'
                cacheKeyParameters:
                  $ref: '#/components/schemas/ListOfString'
                contentHandling:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
                timeoutInMillis:
                  $ref: '#/components/schemas/NullableInteger'
                tlsConfig:
                  $ref: '#/components/schemas/TlsConfig'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateIntegration
      description: |-
        Represents an update integration.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}:
    delete:
      operationId: DeleteIntegrationResponse
      description: |-
        Represents a delete integration response.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      responses:
        '204': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetIntegrationResponse
      description: |-
        Represents a get integration response.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutIntegrationResponse
      description: |-
        Represents a put integration.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                selectionPattern:
                  $ref: '#/components/schemas/String'
                responseParameters:
                  $ref: '#/components/schemas/MapOfStringToString'
                responseTemplates:
                  $ref: '#/components/schemas/MapOfStringToString'
                contentHandling:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateIntegrationResponse
      description: |-
        Represents an update integration response.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}:
    delete:
      operationId: DeleteMethod
      description: |-
        Deletes an existing Method resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '204': {}
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetMethod
      description: |-
        Describe an existing Method resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutMethod
      description: |-
        Add a method to an existing Resource resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizationType:
                  $ref: '#/components/schemas/String'
                authorizerId:
                  $ref: '#/components/schemas/String'
                apiKeyRequired:
                  $ref: '#/components/schemas/Boolean'
                operationName:
                  $ref: '#/components/schemas/String'
                requestParameters:
                  $ref: '#/components/schemas/MapOfStringToBoolean'
                requestModels:
                  $ref: '#/components/schemas/MapOfStringToString'
                requestValidatorId:
                  $ref: '#/components/schemas/String'
                authorizationScopes:
                  $ref: '#/components/schemas/ListOfString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    post:
      operationId: TestInvokeMethod
      description: |-
        Simulate the invocation of a Method in your RestApi with headers, parameters, and an incoming request body.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathWithQueryString:
                  $ref: '#/components/schemas/String'
                body:
                  $ref: '#/components/schemas/String'
                headers:
                  $ref: '#/components/schemas/MapOfStringToString'
                multiValueHeaders:
                  $ref: '#/components/schemas/MapOfStringToList'
                clientCertificateId:
                  $ref: '#/components/schemas/String'
                stageVariables:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateMethod
      description: |-
        Updates an existing Method resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}:
    delete:
      operationId: DeleteMethodResponse
      description: |-
        Deletes an existing MethodResponse resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      responses:
        '204': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetMethodResponse
      description: |-
        Describes a MethodResponse resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      responses:
        '200': {}
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutMethodResponse
      description: |-
        Adds a MethodResponse to an existing Method resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                responseParameters:
                  $ref: '#/components/schemas/MapOfStringToBoolean'
                responseModels:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateMethodResponse
      description: |-
        Updates an existing MethodResponse resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: httpMethod
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: statusCode
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StatusCode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/models/{modelName}:
    delete:
      operationId: DeleteModel
      description: |-
        Deletes a model.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: modelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetModel
      description: |-
        Describes an existing model defined for a RestApi resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: modelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: flatten
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateModel
      description: |-
        Changes information about a model. The maximum size of the model is 400 KB.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: modelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/requestvalidators/{requestValidatorId}:
    delete:
      operationId: DeleteRequestValidator
      description: |-
        Deletes a RequestValidator of a given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: requestValidatorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetRequestValidator
      description: |-
        Gets a RequestValidator of a given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: requestValidatorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateRequestValidator
      description: |-
        Updates a RequestValidator of a given RestApi.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: requestValidatorId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources/{resourceId}:
    delete:
      operationId: DeleteResource
      description: |-
        Deletes a Resource resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetResource
      description: |-
        Lists information about a resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: embed
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListOfString'
      responses:
        '200': {}
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateResource
      description: |-
        Changes information about a Resource resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: resourceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}:
    delete:
      operationId: DeleteRestApi
      description: |-
        Deletes the specified API.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetRestApi
      description: |-
        Lists the RestApi resource in the collection.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: PutRestApi
      description: |-
        A feature of the API Gateway control service for updating an existing API with an input of external API definitions. The update can take the form of merging the supplied definition into the existing API or overwriting the existing API.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: mode
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PutMode'
      - name: failonwarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/MapOfStringToString'
                body:
                  $ref: '#/components/schemas/Blob'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateRestApi
      description: |-
        Changes information about the specified API.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages/{stageName}:
    delete:
      operationId: DeleteStage
      description: |-
        Deletes a Stage resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetStage
      description: |-
        Gets information about a Stage resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateStage
      description: |-
        Changes information about a Stage resource.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans/{usagePlanId}:
    delete:
      operationId: DeleteUsagePlan
      description: |-
        Deletes a usage plan of a given plan Id.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetUsagePlan
      description: |-
        Gets a usage plan of a given plan identifier.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateUsagePlan
      description: |-
        Updates a usage plan of a given plan Id.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans/{usagePlanId}/keys/{keyId}:
    delete:
      operationId: DeleteUsagePlanKey
      description: |-
        Deletes a usage plan key and remove the underlying API key from the associated usage plan.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: keyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetUsagePlanKey
      description: |-
        Gets a usage plan key of a given key identifier.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: keyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /vpclinks/{vpcLinkId}:
    delete:
      operationId: DeleteVpcLink
      description: |-
        Deletes an existing VpcLink of a specified identifier.
      parameters:
      - name: vpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetVpcLink
      description: |-
        Gets a specified VPC link under the caller's account in a region.
      parameters:
      - name: vpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateVpcLink
      description: |-
        Updates an existing VpcLink of a specified identifier.
      parameters:
      - name: vpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages/{stageName}/cache/authorizers:
    delete:
      operationId: FlushStageAuthorizersCache
      description: |-
        Flushes all authorizer cache entries on a stage.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages/{stageName}/cache/data:
    delete:
      operationId: FlushStageCache
      description: |-
        Flushes a stage's cache.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /clientcertificates:
    post:
      operationId: GenerateClientCertificate
      description: |-
        Generates a ClientCertificate resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    get:
      operationId: GetClientCertificates
      description: |-
        Gets a collection of ClientCertificate resources.
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /account:
    get:
      operationId: GetAccount
      description: |-
        Gets information about the current Account resource.
      parameters: []
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    patch:
      operationId: UpdateAccount
      description: |-
        Changes information about the current Account resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages/{stageName}/exports/{exportType}:
    get:
      operationId: GetExport
      description: |-
        Exports a deployed version of a RestApi in a specified format.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: exportType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: Accept
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/gatewayresponses:
    get:
      operationId: GetGatewayResponses
      description: |-
        Gets the GatewayResponses collection on the given RestApi. If an API developer has not added any definitions for gateway responses, the result will be the API Gateway-generated default GatewayResponses collection for the supported response types.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/models/{modelName}/default_template:
    get:
      operationId: GetModelTemplate
      description: |-
        Generates a sample mapping template that can be used to transform a payload into the structure of a model.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: modelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/resources:
    get:
      operationId: GetResources
      description: |-
        Lists information about a collection of Resource resources.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      - name: embed
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListOfString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis/{restApiId}/stages/{stageName}/sdks/{sdkType}:
    get:
      operationId: GetSdk
      description: |-
        Generates a client SDK for a RestApi and Stage.
      parameters:
      - name: restApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: stageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: sdkType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /sdktypes/{id}:
    get:
      operationId: GetSdkType
      description: |-
        Gets an SDK type.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /sdktypes:
    get:
      operationId: GetSdkTypes
      description: |-
        Gets SDK types
      parameters:
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /tags/{resourceArn}:
    get:
      operationId: GetTags
      description: |-
        Gets the Tags collection for a given resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    put:
      operationId: TagResource
      description: |-
        Adds or updates a tag on a given resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/MapOfStringToString'
      responses:
        '204': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
    delete:
      operationId: UntagResource
      description: |-
        Removes a tag from a given resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ListOfString'
      responses:
        '204': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans/{usagePlanId}/usage:
    get:
      operationId: GetUsage
      description: |-
        Gets the usage data of a usage plan in a specified time interval.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: keyId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: startDate
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: endDate
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: position
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: limit
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NullableInteger'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /apikeys?mode=import:
    post:
      operationId: ImportApiKeys
      description: |-
        Import API keys from an external source, such as a CSV-formatted file.
      parameters:
      - name: format
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ApiKeysFormat'
      - name: failonwarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/Blob'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /restapis?mode=import:
    post:
      operationId: ImportRestApi
      description: |-
        A feature of the API Gateway control service for creating a new API from an external API definition file.
      parameters:
      - name: failonwarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  $ref: '#/components/schemas/MapOfStringToString'
                body:
                  $ref: '#/components/schemas/Blob'
      responses:
        '201': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /rejectdomainnameaccessassociations:
    post:
      operationId: RejectDomainNameAccessAssociation
      description: |-
        Rejects a domain name access association with a private custom domain name.

        To reject a domain name access association with an access association source in another AWS account, use this operation. To remove a domain name access association with an access association source in your own account, use the DeleteDomainNameAccessAssociation operation.
      parameters:
      - name: domainNameAccessAssociationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: domainNameArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '202': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
  /usageplans/{usagePlanId}/keys/{keyId}/usage:
    patch:
      operationId: UpdateUsage
      description: |-
        Grants a temporary extension to the remaining quota of a usage plan associated with a specified API key.
      parameters:
      - name: usagePlanId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: keyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patchOperations:
                  $ref: '#/components/schemas/ListOfPatchOperation'
      responses:
        '200': {}
        '400':
          description: |-
            The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The request configuration has conflicts. For details, see the accompanying error message.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '429':
          description: |-
            The request has reached its throttling limit. Retry after the specified time period.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '404':
          description: |-
            The requested resource is not found. Make sure that the request URI is correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '401':
          description: |-
            The request is denied because the caller has insufficient permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
components:
  schemas:
    AccessAssociationSourceType:
      type: string
      enum:
      - VPCE
    AccessLogSettings:
      type: object
      properties:
        format:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A single line format of the access logs of data, as specified
            by selected $context variables. The format must include at least `$context.requestId`.
        destinationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group
            or Kinesis Data Firehose delivery stream to receive access logs. If you
            specify a Kinesis Data Firehose delivery stream, the stream name must
            begin with `amazon-apigateway-`.
      description: Access log settings, including the access log format and access
        log destination ARN.
    Account:
      type: object
      properties:
        cloudwatchRoleArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of an Amazon CloudWatch role for the current Account.
        throttleSettings:
          allOf:
          - $ref: '#/components/schemas/ThrottleSettings'
          description: Specifies the API request limits configured for the current
            Account.
        features:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of features supported for the account. When usage plans
            are enabled, the features list will include an entry of `"UsagePlans"`.
        apiKeyVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the API keys used for the account.
      description: Represents an AWS account that is associated with API Gateway.
    ApiKey:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the API Key.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of the API Key.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the API Key.
        customerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Amazon Web Services Marketplace customer identifier, when
            integrating with the Amazon Web Services SaaS Marketplace.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the API Key.
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the API Key can be used by callers.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API Key was created.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API Key was last updated.
        stageKeys:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of Stage resources that are associated with the ApiKey
            resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: A resource that can be distributed to callers for executing Method
        resources that require an API key. API keys can be mapped to any Stage on
        any RestApi, which indicates that the callers with the API key can make requests
        to that stage.
    ApiKeyIds:
      type: object
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of all the ApiKey identifiers.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages.
      description: The identifier of an ApiKey used in a UsagePlan.
    ApiKeySourceType:
      type: string
      enum:
      - HEADER
      - AUTHORIZER
    ApiKeys:
      type: object
      properties:
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages logged during the import of API
            keys when the `failOnWarnings` option is set to true.
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfApiKey'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of API keys as represented by an ApiKeys
        resource.
    ApiKeysFormat:
      type: string
      enum:
      - csv
    ApiStage:
      type: object
      properties:
        apiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: API Id of the associated API stage in a usage plan.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: API stage name of the associated API stage in a usage plan.
        throttle:
          allOf:
          - $ref: '#/components/schemas/MapOfApiStageThrottleSettings'
          description: Map containing method level throttling information for API
            stage in a usage plan.
      description: API stage name of the associated API stage in a usage plan.
    Authorizer:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the authorizer resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the authorizer.
        type:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Valid values are `TOKEN` for a Lambda
            function using a single authorization token submitted in a custom header,
            `REQUEST` for a Lambda function using incoming request parameters, and
            `COGNITO_USER_POOLS` for using an Amazon Cognito user pool.
        providerARNs:
          allOf:
          - $ref: '#/components/schemas/ListOfARNs'
          description: 'A list of the Amazon Cognito user pool ARNs for the `COGNITO_USER_POOLS`
            authorizer. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.
            For a `TOKEN` or `REQUEST` authorizer, this is not defined.'
        authType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Optional customer-defined field, used in OpenAPI imports and
            exports without functional impact.
        authorizerUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the authorizer's Uniform Resource Identifier (URI).
            For `TOKEN` or `REQUEST` authorizers, this must be a well-formed Lambda
            function URI, for example, `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations`.
            In general, the URI has this form `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
            where `{region}` is the same as the region hosting the Lambda function,
            `path` indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial `/`. For Lambda functions,
            this is usually of the form `/2015-03-31/functions/[FunctionARN]/invocations`.
        authorizerCredentials:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, specify null.
        identitySource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identity source for which authorization is requested. For
            a `TOKEN` or `COGNITO_USER_POOLS` authorizer, this is required and specifies
            the request header mapping expression for the custom header holding the
            authorization token submitted by the client. For example, if the token
            header name is `Auth`, the header mapping expression is `method.request.header.Auth`.
            For the `REQUEST` authorizer, this is required when authorization caching
            is enabled. The value is a comma-separated string of one or more mapping
            expressions of the specified request parameters. For example, if an `Auth`
            header, a `Name` query string parameter are defined as identity sources,
            this value is `method.request.header.Auth`, `method.request.querystring.Name`.
            These parameters will be used to derive the authorization caching key
            and to perform runtime validation of the `REQUEST` authorizer by verifying
            all of the identity-related request parameters are present, not null and
            non-empty. Only when this is true does the authorizer invoke the authorizer
            Lambda function, otherwise, it returns a 401 Unauthorized response without
            calling the Lambda function. The valid value is a string of comma-separated
            mapping expressions of the specified request parameters. When the authorization
            caching is not enabled, this property is optional.
        identityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A validation expression for the incoming identity token. For
            `TOKEN` authorizers, this value is a regular expression. For `COGNITO_USER_POOLS`
            authorizers, API Gateway will match the `aud` field of the incoming token
            from the client against the specified regular expression. It will invoke
            the authorizer's Lambda function when there is a match. Otherwise, it
            will return a 401 Unauthorized response without calling the Lambda function.
            The validation expression does not apply to the `REQUEST` authorizer.
        authorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The TTL in seconds of cached authorizer results. If it equals
            0, authorization caching is disabled. If it is greater than 0, API Gateway
            will cache authorizer responses. If this field is not set, the default
            value is 300. The maximum value is 3600, or 1 hour.
      description: Represents an authorization layer for methods. If enabled on a
        method, API Gateway will activate the authorizer when a client calls the method.
    AuthorizerType:
      type: string
      enum:
      - TOKEN
      - REQUEST
      - COGNITO_USER_POOLS
      description: <p>The authorizer type. Valid values are <code>TOKEN</code> for
        a Lambda function using a single authorization token submitted in a custom
        header, <code>REQUEST</code> for a Lambda function using incoming request
        parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito
        user pool.</p>
    Authorizers:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfAuthorizer'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of Authorizer resources.
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The submitted request is not valid, for example, the input is incomplete
        or incorrect. See the accompanying error message for details.
    BasePathMapping:
      type: object
      properties:
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The base path name that callers of the API must provide as
            part of the URL after the domain name.
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the associated stage.
      description: Represents the base path that callers of the API must provide as
        part of the URL after the domain name.
    BasePathMappings:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfBasePathMapping'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of BasePathMapping resources.
    Blob:
      type: string
      format: byte
    Boolean:
      type: boolean
      default: false
    CacheClusterSize:
      type: string
      enum:
      - '0.5'
      - '1.6'
      - '6.1'
      - '13.5'
      - '28.4'
      - '58.2'
      - '118'
      - '237'
      description: <p>Returns the size of the CacheCluster.</p>
    CacheClusterStatus:
      type: string
      enum:
      - CREATE_IN_PROGRESS
      - AVAILABLE
      - DELETE_IN_PROGRESS
      - NOT_AVAILABLE
      - FLUSH_IN_PROGRESS
      description: <p>Returns the status of the CacheCluster.</p>
    CanarySettings:
      type: object
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The percent (0-100) of traffic diverted to a canary deployment.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the canary deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Stage variables overridden for a canary release deployment,
            including new stage variables introduced in the canary. These stage variables
            are represented as a string-to-string map between stage variable names
            and their values.
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether the canary deployment uses
            the stage cache or not.
      description: Configuration settings of a canary deployment.
    ClientCertificate:
      type: object
      properties:
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the client certificate.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the client certificate.
        pemEncodedCertificate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The PEM-encoded public key of the client certificate, which
            can be used to configure certificate authentication in the integration
            endpoint .
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the client certificate was created.
        expirationDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the client certificate will expire.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: Represents a client certificate used to configure client-side SSL
        authentication while sending requests to the integration endpoint.
    ClientCertificates:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfClientCertificate'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of ClientCertificate resources.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request configuration has conflicts. For details, see the accompanying
        error message.
    ConnectionType:
      type: string
      enum:
      - INTERNET
      - VPC_LINK
    ContentHandlingStrategy:
      type: string
      enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
    CreateApiKeyRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the ApiKey.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the ApiKey.
        enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the ApiKey can be used by callers.
        generateDistinctId:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether (`true`) or not (`false`) the key identifier
            is distinct from the created API key value. This parameter is deprecated
            and should not be used.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a value of the API key.
        stageKeys:
          allOf:
          - $ref: '#/components/schemas/ListOfStageKeys'
          description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with
            the API key.
        customerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Amazon Web Services Marketplace customer identifier, when
            integrating with the Amazon Web Services SaaS Marketplace.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      description: Request to create an ApiKey resource.
    CreateAuthorizerRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the authorizer.
        type:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Valid values are `TOKEN` for a Lambda
            function using a single authorization token submitted in a custom header,
            `REQUEST` for a Lambda function using incoming request parameters, and
            `COGNITO_USER_POOLS` for using an Amazon Cognito user pool.
        providerARNs:
          allOf:
          - $ref: '#/components/schemas/ListOfARNs'
          description: 'A list of the Amazon Cognito user pool ARNs for the `COGNITO_USER_POOLS`
            authorizer. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.
            For a `TOKEN` or `REQUEST` authorizer, this is not defined.'
        authType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Optional customer-defined field, used in OpenAPI imports and
            exports without functional impact.
        authorizerUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the authorizer's Uniform Resource Identifier (URI).
            For `TOKEN` or `REQUEST` authorizers, this must be a well-formed Lambda
            function URI, for example, `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations`.
            In general, the URI has this form `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
            where `{region}` is the same as the region hosting the Lambda function,
            `path` indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial `/`. For Lambda functions,
            this is usually of the form `/2015-03-31/functions/[FunctionARN]/invocations`.
        authorizerCredentials:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, specify null.
        identitySource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identity source for which authorization is requested. For
            a `TOKEN` or `COGNITO_USER_POOLS` authorizer, this is required and specifies
            the request header mapping expression for the custom header holding the
            authorization token submitted by the client. For example, if the token
            header name is `Auth`, the header mapping expression is `method.request.header.Auth`.
            For the `REQUEST` authorizer, this is required when authorization caching
            is enabled. The value is a comma-separated string of one or more mapping
            expressions of the specified request parameters. For example, if an `Auth`
            header, a `Name` query string parameter are defined as identity sources,
            this value is `method.request.header.Auth, method.request.querystring.Name`.
            These parameters will be used to derive the authorization caching key
            and to perform runtime validation of the `REQUEST` authorizer by verifying
            all of the identity-related request parameters are present, not null and
            non-empty. Only when this is true does the authorizer invoke the authorizer
            Lambda function, otherwise, it returns a 401 Unauthorized response without
            calling the Lambda function. The valid value is a string of comma-separated
            mapping expressions of the specified request parameters. When the authorization
            caching is not enabled, this property is optional.
        identityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A validation expression for the incoming identity token. For
            `TOKEN` authorizers, this value is a regular expression. For `COGNITO_USER_POOLS`
            authorizers, API Gateway will match the `aud` field of the incoming token
            from the client against the specified regular expression. It will invoke
            the authorizer's Lambda function when there is a match. Otherwise, it
            will return a 401 Unauthorized response without calling the Lambda function.
            The validation expression does not apply to the `REQUEST` authorizer.
        authorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The TTL in seconds of cached authorizer results. If it equals
            0, authorization caching is disabled. If it is greater than 0, API Gateway
            will cache authorizer responses. If this field is not set, the default
            value is 300. The maximum value is 3600, or 1 hour.
      required:
      - restApiId
      - name
      - type
      description: Request to add a new Authorizer to an existing RestApi resource.
    CreateBasePathMappingRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the BasePathMapping resource to create.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Required for private
            custom domain names.
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The base path name that callers of the API must provide as
            part of the URL after the domain name. This value must be unique for all
            of the mappings across a single API. Specify '(none)' if you do not want
            callers to specify a base path name after the domain name.
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the API's stage that you want to use for this mapping.
            Specify '(none)' if you want callers to explicitly specify the stage name
            after any base path name.
      required:
      - domainName
      - restApiId
      description: Requests API Gateway to create a new BasePathMapping resource.
    CreateDeploymentRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage resource for the Deployment resource
            to create.
        stageDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Stage resource for the Deployment resource
            to create.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description for the Deployment resource to create.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Enables a cache cluster for the Stage resource specified in
            the input.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          description: The stage's cache capacity in GB. For more information about
            choosing a cache size, see [Enabling API caching to enhance responsiveness](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html).
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A map that defines the stage variables for the Stage resource
            that is associated with the new deployment. Variable names can have alphanumeric
            and underscore characters, and the values must match `[A-Za-z0-9-._~:/?#&=,]+`.
        canarySettings:
          allOf:
          - $ref: '#/components/schemas/DeploymentCanarySettings'
          description: The input configuration for the canary deployment when the
            deployment is a canary release deployment.
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: Specifies whether active tracing with X-ray is enabled for
            the Stage.
      required:
      - restApiId
      description: Requests API Gateway to create a Deployment resource.
    CreateDocumentationPartRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        location:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartLocation'
          description: The location of the targeted API entity of the to-be-created
            documentation part.
        properties:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new documentation content map of the targeted API entity.
            Enclosed key-value pairs are API-specific, but only OpenAPI-compliant
            key-value pairs can be exported and, hence, published.
      required:
      - restApiId
      - location
      - properties
      description: Creates a new documentation part of a given API.
    CreateDocumentationVersionRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version identifier of the new snapshot.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stage name to be associated with the new documentation
            snapshot.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description about the new documentation snapshot.
      required:
      - restApiId
      - documentationVersion
      description: Creates a new documentation version of a given API.
    CreateDomainNameAccessAssociationRequest:
      type: object
      properties:
        domainNameArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name.
        accessAssociationSourceType:
          allOf:
          - $ref: '#/components/schemas/AccessAssociationSourceType'
          description: The type of the domain name access association source.
        accessAssociationSource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the domain name access association source.
            For a VPCE, the value is the VPC endpoint ID.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      required:
      - domainNameArn
      - accessAssociationSourceType
      - accessAssociationSource
    CreateDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the DomainName resource.
        certificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user-friendly name of the certificate that will be used
            by edge-optimized endpoint or private endpoint for this domain name.
        certificateBody:
          allOf:
          - $ref: '#/components/schemas/String'
          description: '[Deprecated] The body of the server certificate that will
            be used by edge-optimized endpoint or private endpoint for this domain
            name provided by your certificate authority.'
        certificatePrivateKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: '[Deprecated] Your edge-optimized endpoint''s domain name certificate''s
            private key.'
        certificateChain:
          allOf:
          - $ref: '#/components/schemas/String'
          description: '[Deprecated] The intermediate certificates and optionally
            the root certificate, one after the other without any blank lines, used
            by an edge-optimized endpoint for this domain name. If you include the
            root certificate, your certificate chain must start with intermediate
            certificates and end with the root certificate. Use the intermediate certificates
            that were provided by your certificate authority. Do not include any intermediaries
            that are not in the chain of trust path.'
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reference to an Amazon Web Services-managed certificate
            that will be used by edge-optimized endpoint or private endpoint for this
            domain name. Certificate Manager is the only supported source.
        regionalCertificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user-friendly name of the certificate that will be used
            by regional endpoint for this domain name.
        regionalCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reference to an Amazon Web Services-managed certificate
            that will be used by regional endpoint for this domain name. Certificate
            Manager is the only supported source.
        endpointConfiguration:
          allOf:
          - $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this DomainName showing the endpoint
            types and IP address types of the domain name.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
        securityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version + cipher suite for
            this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`.
        mutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthenticationInput'
        ownershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the public certificate issued by ACM to validate
            ownership of your custom domain. Only required when configuring mutual
            TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to the `execute-api`
            service for this DomainName regardless of the caller and Method configuration.
            Supported only for private custom domain names.
      required:
      - domainName
      description: A request to create a new domain name.
    CreateModelRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The RestApi identifier under which the Model will be created.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model. Must be alphanumeric.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the model.
        schema:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The schema for the model. For `application/json` models, this
            should be JSON schema draft 4 model. The maximum size of the model is
            400 KB.
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-type for the model.
      required:
      - restApiId
      - name
      - contentType
      description: Request to add a new Model to an existing RestApi resource.
    CreateRequestValidatorRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the to-be-created RequestValidator.
        validateRequestBody:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate request body
            according to the configured model schema for the method (`true`) or not
            (`false`).
        validateRequestParameters:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate request parameters,
            `true`, or not `false`.
      required:
      - restApiId
      description: Creates a RequestValidator of a given RestApi.
    CreateResourceRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        parentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The parent resource's identifier.
        pathPart:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last path segment for this resource.
      required:
      - restApiId
      - parentId
      - pathPart
      description: Requests API Gateway to create a Resource resource.
    CreateRestApiRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the RestApi.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the RestApi.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A version identifier for the API.
        cloneFrom:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the RestApi that you want to clone from.
        binaryMediaTypes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The list of binary media types supported by the RestApi. By
            default, the RestApi supports only UTF-8-encoded text payloads.
        minimumCompressionSize:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: A nullable integer that is used to enable compression (with
            non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable
            compression (with a null value) on an API. When compression is enabled,
            compression or decompression is not applied on the payload if the payload
            size is smaller than this value. Setting it to zero allows compression
            for any payload size.
        apiKeySource:
          allOf:
          - $ref: '#/components/schemas/ApiKeySourceType'
          description: 'The source of the API key for metering requests according
            to a usage plan. Valid values are: `HEADER` to read the API key from the
            `X-API-Key` header of a request. `AUTHORIZER` to read the API key from
            the `UsageIdentifierKey` from a custom authorizer.'
        endpointConfiguration:
          allOf:
          - $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this RestApi showing the endpoint
            types and IP address types of the API.
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to this RestApi
            regardless of the caller and Method configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
        disableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether clients can invoke your API by using the
            default `execute-api` endpoint. By default, clients can invoke your API
            with the default `https://{api_id}.execute-api.{region}.amazonaws.com`
            endpoint. To require that clients use a custom domain name to invoke your
            API, disable the default endpoint
      required:
      - name
      description: The POST Request to add a new RestApi resource to your collection.
    CreateStageRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name for the Stage resource. Stage names can only contain
            alphanumeric characters, hyphens, and underscores. Maximum length is 128
            characters.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Deployment resource for the Stage resource.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the Stage resource.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether cache clustering is enabled for the stage.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          description: The stage's cache capacity in GB. For more information about
            choosing a cache size, see [Enabling API caching to enhance responsiveness](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html).
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A map that defines the stage variables for the new Stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match `[A-Za-z0-9-._~:/?#&=,]+`.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the associated API documentation.
        canarySettings:
          allOf:
          - $ref: '#/components/schemas/CanarySettings'
          description: The canary deployment settings of this stage.
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether active tracing with X-ray is enabled for
            the Stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      required:
      - restApiId
      - stageName
      - deploymentId
      description: Requests API Gateway to create a Stage resource.
    CreateUsagePlanKeyRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the UsagePlan resource representing the usage plan
            containing the to-be-created UsagePlanKey resource representing a plan
            customer.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a UsagePlanKey resource for a plan customer.
        keyType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of a UsagePlanKey resource for a plan customer.
      required:
      - usagePlanId
      - keyId
      - keyType
      description: The POST request to create a usage plan key for adding an existing
        API key to a usage plan.
    CreateUsagePlanRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the usage plan.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the usage plan.
        apiStages:
          allOf:
          - $ref: '#/components/schemas/ListOfApiStage'
          description: The associated API stages of the usage plan.
        throttle:
          allOf:
          - $ref: '#/components/schemas/ThrottleSettings'
          description: The throttling limits of the usage plan.
        quota:
          allOf:
          - $ref: '#/components/schemas/QuotaSettings'
          description: The quota of the usage plan.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      required:
      - name
      description: The POST request to create a usage plan with the name, description,
        throttle limits and quota limits, as well as the associated API stages, specified
        in the payload.
    CreateVpcLinkRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name used to label and identify the VPC link.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the VPC link.
        targetArns:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The ARN of the network load balancer of the VPC targeted by
            the VPC link. The network load balancer must be owned by the same Amazon
            Web Services account of the API owner.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      required:
      - name
      - targetArns
      description: Creates a VPC link, under the caller's account in a selected region,
        in an asynchronous operation that typically takes 2-4 minutes to complete
        and become operational. The caller must have permissions to create and update
        VPC Endpoint services.
    DeleteApiKeyRequest:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ApiKey resource to be deleted.
      required:
      - apiKey
      description: A request to delete the ApiKey resource.
    DeleteAuthorizerRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Authorizer resource.
      required:
      - restApiId
      - authorizerId
      description: Request to delete an existing Authorizer resource.
    DeleteBasePathMappingRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the BasePathMapping resource to delete.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The base path name of the BasePathMapping resource to delete.


            To specify an empty base path, set this parameter to `''(none)''`.'
      required:
      - domainName
      - basePath
      description: A request to delete the BasePathMapping resource.
    DeleteClientCertificateRequest:
      type: object
      properties:
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ClientCertificate resource to be deleted.
      required:
      - clientCertificateId
      description: A request to delete the ClientCertificate resource.
    DeleteDeploymentRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Deployment resource to delete.
      required:
      - restApiId
      - deploymentId
      description: Requests API Gateway to delete a Deployment resource.
    DeleteDocumentationPartRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationPartId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the to-be-deleted documentation part.
      required:
      - restApiId
      - documentationPartId
      description: Deletes an existing documentation part of an API.
    DeleteDocumentationVersionRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version identifier of a to-be-deleted documentation snapshot.
      required:
      - restApiId
      - documentationVersion
      description: Deletes an existing documentation version of an API.
    DeleteDomainNameAccessAssociationRequest:
      type: object
      properties:
        domainNameAccessAssociationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name access association resource.
      required:
      - domainNameAccessAssociationArn
    DeleteDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the DomainName resource to be deleted.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
      required:
      - domainName
      description: A request to delete the DomainName resource.
    DeleteGatewayResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          description: The response type of the associated GatewayResponse.
      required:
      - restApiId
      - responseType
      description: Clears any customization of a GatewayResponse of a specified response
        type on the given RestApi and resets it with the default settings.
    DeleteIntegrationRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a delete integration request's resource identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a delete integration request's HTTP method.
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Represents a delete integration request.
    DeleteIntegrationResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a delete integration response request's resource
            identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a delete integration response request's HTTP method.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: Specifies a delete integration response request's status code.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Represents a delete integration response request.
    DeleteMethodRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the Method resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Request to delete an existing Method resource.
    DeleteMethodResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the MethodResponse resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code identifier for the MethodResponse resource.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: A request to delete an existing MethodResponse resource.
    DeleteModelRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        modelName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model to delete.
      required:
      - restApiId
      - modelName
      description: Request to delete an existing model in an existing RestApi resource.
    DeleteRequestValidatorRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the RequestValidator to be deleted.
      required:
      - restApiId
      - requestValidatorId
      description: Deletes a specified RequestValidator of a given RestApi.
    DeleteResourceRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Resource resource.
      required:
      - restApiId
      - resourceId
      description: Request to delete a Resource.
    DeleteRestApiRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
      required:
      - restApiId
      description: Request to delete the specified API from your collection.
    DeleteStageRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage resource to delete.
      required:
      - restApiId
      - stageName
      description: Requests API Gateway to delete a Stage resource.
    DeleteUsagePlanKeyRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the UsagePlan resource representing the usage plan
            containing the to-be-deleted UsagePlanKey resource representing a plan
            customer.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the UsagePlanKey resource to be deleted.
      required:
      - usagePlanId
      - keyId
      description: The DELETE request to delete a usage plan key and remove the underlying
        API key from the associated usage plan.
    DeleteUsagePlanRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the to-be-deleted usage plan.
      required:
      - usagePlanId
      description: The DELETE request to delete a usage plan of a given plan Id.
    DeleteVpcLinkRequest:
      type: object
      properties:
        vpcLinkId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the VpcLink. It is used in an Integration
            to reference this VpcLink.
      required:
      - vpcLinkId
      description: Deletes an existing VpcLink of a specified identifier.
    Deployment:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the deployment resource.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description for the deployment resource.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the deployment resource was created.
        apiSummary:
          allOf:
          - $ref: '#/components/schemas/PathToMapOfMethodSnapshot'
          description: A summary of the RestApi at the date and time that the deployment
            resource was created.
      description: An immutable representation of a RestApi resource that can be called
        by users using Stages. A deployment must be associated with a Stage for it
        to be callable over the Internet.
    DeploymentCanarySettings:
      type: object
      properties:
        percentTraffic:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The percentage (0.0-100.0) of traffic routed to the canary
            deployment.
        stageVariableOverrides:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A stage variable overrides used for the canary release deployment.
            They can override existing stage variables or add new stage variables
            for the canary release deployment. These stage variables are represented
            as a string-to-string map between stage variable names and their values.
        useStageCache:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether the canary release deployment
            uses the stage cache or not.
      description: The input configuration for a canary deployment.
    Deployments:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDeployment'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection resource that contains zero or more references
        to your existing deployments, and links that guide you on how to interact
        with your collection. The collection offers a paginated view of the contained
        deployments.
    DocumentationPart:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The DocumentationPart identifier, generated by API Gateway
            when the `DocumentationPart` is created.
        location:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartLocation'
          description: The location of the API entity to which the documentation applies.
            Valid fields depend on the targeted API entity type. All the valid location
            fields are not required. If not explicitly specified, a valid location
            field is treated as a wildcard and associated documentation content may
            be inherited by matching entities, unless overridden.
        properties:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A content map of API-specific key-value pairs describing the
            targeted API entity. The map must be encoded as a JSON string, e.g., `"{
            \"description\": \"The API does ...\" }"`. Only OpenAPI-compliant documentation-related
            fields from the properties map are exported and, hence, published as part
            of the API entity definitions, while the original documentation parts
            are exported in a OpenAPI extension of `x-amazon-apigateway-documentation`.'
      description: A documentation part for a targeted API entity.
    DocumentationPartIds:
      type: object
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of the returned documentation part identifiers.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of warning messages reported during import of documentation
            parts.
      description: A collection of the imported DocumentationPart identifiers.
    DocumentationPartLocation:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartType'
          description: The type of API entity to which the documentation content applies.
            Valid values are `API`, `AUTHORIZER`, `MODEL`, `RESOURCE`, `METHOD`, `PATH_PARAMETER`,
            `QUERY_PARAMETER`, `REQUEST_HEADER`, `REQUEST_BODY`, `RESPONSE`, `RESPONSE_HEADER`,
            and `RESPONSE_BODY`. Content inheritance does not apply to any entity
            of the `API`, `AUTHORIZER`, `METHOD`, `MODEL`, `REQUEST_BODY`, or `RESOURCE`
            type.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URL path of the target. It is a valid field for the API
            entity types of `RESOURCE`, `METHOD`, `PATH_PARAMETER`, `QUERY_PARAMETER`,
            `REQUEST_HEADER`, `REQUEST_BODY`, `RESPONSE`, `RESPONSE_HEADER`, and `RESPONSE_BODY`.
            The default value is `/` for the root resource. When an applicable child
            entity inherits the content of another entity of the same type with more
            general specifications of the other `location` attributes, the child entity's
            `path` attribute must match that of the parent entity as a prefix.
        method:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of a method. It is a valid field for the API
            entity types of `METHOD`, `PATH_PARAMETER`, `QUERY_PARAMETER`, `REQUEST_HEADER`,
            `REQUEST_BODY`, `RESPONSE`, `RESPONSE_HEADER`, and `RESPONSE_BODY`. The
            default value is `*` for any method. When an applicable child entity inherits
            the content of an entity of the same type with more general specifications
            of the other `location` attributes, the child entity's `method` attribute
            must match that of the parent entity exactly.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartLocationStatusCode'
          description: The HTTP status code of a response. It is a valid field for
            the API entity types of `RESPONSE`, `RESPONSE_HEADER`, and `RESPONSE_BODY`.
            The default value is `*` for any status code. When an applicable child
            entity inherits the content of an entity of the same type with more general
            specifications of the other `location` attributes, the child entity's
            `statusCode` attribute must match that of the parent entity exactly.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the targeted API entity. It is a valid and required
            field for the API entity types of `AUTHORIZER`, `MODEL`, `PATH_PARAMETER`,
            `QUERY_PARAMETER`, `REQUEST_HEADER`, `REQUEST_BODY` and `RESPONSE_HEADER`.
            It is an invalid field for any other entity type.
      required:
      - type
      description: Specifies the target API entity to which the documentation applies.
    DocumentationPartLocationStatusCode:
      type: string
      pattern: ^([1-5]\d\d|\*|\s*)$
    DocumentationPartType:
      type: string
      enum:
      - API
      - AUTHORIZER
      - MODEL
      - RESOURCE
      - METHOD
      - PATH_PARAMETER
      - QUERY_PARAMETER
      - REQUEST_HEADER
      - REQUEST_BODY
      - RESPONSE
      - RESPONSE_HEADER
      - RESPONSE_BODY
    DocumentationParts:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDocumentationPart'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: The collection of documentation parts of an API.
    DocumentationVersion:
      type: object
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version identifier of the API documentation snapshot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date when the API documentation snapshot is created.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the API documentation snapshot.
      description: A snapshot of the documentation of an API.
    DocumentationVersions:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDocumentationVersion'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: The collection of documentation snapshots of an API.
    DomainName:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The custom domain name as an API host name, for example, `my-api.example.com`.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        domainNameArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name. Supported only for private custom
            domain names.
        certificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the certificate that will be used by edge-optimized
            endpoint or private endpoint for this domain name.
        certificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reference to an Amazon Web Services-managed certificate
            that will be used by edge-optimized endpoint or private endpoint for this
            domain name. Certificate Manager is the only supported source.
        certificateUploadDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the certificate that was used by edge-optimized
            endpoint or private endpoint for this domain name was uploaded.
        regionalDomainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name associated with the regional endpoint for this
            custom domain name. You set up this association by adding a DNS record
            that points the custom domain name to this regional domain name. The regional
            domain name is returned by API Gateway when you create a regional endpoint.
        regionalHostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The region-specific Amazon Route 53 Hosted Zone ID of the regional
            endpoint. For more information, see Set up a Regional Custom Domain Name
            and AWS Regions and Endpoints for API Gateway.
        regionalCertificateName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the certificate that will be used for validating
            the regional domain name.
        regionalCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reference to an Amazon Web Services-managed certificate
            that will be used for validating the regional domain name. Certificate
            Manager is the only supported source.
        distributionDomainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the Amazon CloudFront distribution associated
            with this custom domain name for an edge-optimized endpoint. You set up
            this association when adding a DNS record pointing the custom domain name
            to this distribution name. For more information about CloudFront distributions,
            see the Amazon CloudFront documentation.
        distributionHostedZoneId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized
            endpoint. The valid value is `Z2FDTNDATAQYW2` for all the regions. For
            more information, see Set up a Regional Custom Domain Name and AWS Regions
            and Endpoints for API Gateway.
        endpointConfiguration:
          allOf:
          - $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this DomainName showing the endpoint
            types and IP address types of the domain name.
        domainNameStatus:
          allOf:
          - $ref: '#/components/schemas/DomainNameStatus'
          description: The status of the DomainName migration. The valid values are
            `AVAILABLE` and `UPDATING`. If the status is `UPDATING`, the domain cannot
            be modified further until the existing operation is complete. If it is
            `AVAILABLE`, the domain can be updated.
        domainNameStatusMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An optional text message containing detailed information about
            status of the DomainName migration.
        securityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version + cipher suite for
            this DomainName. The valid values are `TLS_1_0` and `TLS_1_2`.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
        mutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthentication'
          description: The mutual TLS authentication configuration for a custom domain
            name. If specified, API Gateway performs two-way authentication between
            the client and the server. Clients must present a trusted certificate
            to access your API.
        ownershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the public certificate issued by ACM to validate
            ownership of your custom domain. Only required when configuring mutual
            TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.
        managementPolicy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to the API
            Gateway Management service for this DomainName. This policy document controls
            access for access association sources to create domain name access associations
            with this DomainName. Supported only for private custom domain names.
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to the `execute-api`
            service for this DomainName regardless of the caller and Method configuration.
            Supported only for private custom domain names.
      description: Represents a custom domain name as a user-friendly host name of
        an API (RestApi).
    DomainNameAccessAssociation:
      type: object
      properties:
        domainNameAccessAssociationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name access association resource.
        domainNameArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name.
        accessAssociationSourceType:
          allOf:
          - $ref: '#/components/schemas/AccessAssociationSourceType'
          description: The type of the domain name access association source.
        accessAssociationSource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name access association source. For a
            VPCE, the ARN must be a VPC endpoint.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: Represents a domain name access association between an access association
        source and a private custom domain name. With a domain name access association,
        an access association source can invoke a private custom domain name while
        isolated from the public internet.
    DomainNameAccessAssociations:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDomainNameAccessAssociation'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
    DomainNameStatus:
      type: string
      enum:
      - AVAILABLE
      - UPDATING
      - PENDING
      - PENDING_CERTIFICATE_REIMPORT
      - PENDING_OWNERSHIP_VERIFICATION
    DomainNames:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfDomainName'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of DomainName resources.
    Double:
      type: number
      format: double
      default: 0
    EndpointConfiguration:
      type: object
      properties:
        types:
          allOf:
          - $ref: '#/components/schemas/ListOfEndpointType'
          description: A list of endpoint types of an API (RestApi) or its custom
            domain name (DomainName). For an edge-optimized API and its custom domain
            name, the endpoint type is `"EDGE"`. For a regional API and its custom
            domain name, the endpoint type is `REGIONAL`. For a private API, the endpoint
            type is `PRIVATE`.
        ipAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke an API (RestApi) or a
            DomainName. Use `ipv4` to allow only IPv4 addresses to invoke an API or
            DomainName, or use `dualstack` to allow both IPv4 and IPv6 addresses to
            invoke an API or a DomainName. For the `PRIVATE` endpoint type, only `dualstack`
            is supported.
        vpcEndpointIds:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of VpcEndpointIds of an API (RestApi) against which
            to create Route53 ALIASes. It is only supported for `PRIVATE` endpoint
            type.
      description: The endpoint configuration to indicate the types of endpoints an
        API (RestApi) or its custom domain name (DomainName) has and the IP address
        types that can invoke it.
    EndpointType:
      type: string
      enum:
      - REGIONAL
      - EDGE
      - PRIVATE
      description: <p>The endpoint type. The valid values are <code>EDGE</code> for
        edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code>
        for regional API endpoint setup, most suitable for calling from AWS Region;
        and <code>PRIVATE</code> for private APIs.</p>
    ExportResponse:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-type header value in the HTTP response. This will
            correspond to a valid 'accept' type in the request.
        contentDisposition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-disposition header value in the HTTP response.
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The binary blob response to GetExport, which contains the export.
      description: The binary blob response to GetExport, which contains the generated
        SDK.
    FlushStageAuthorizersCacheRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the stage to flush.
      required:
      - restApiId
      - stageName
      description: Request to flush authorizer cache entries on a specified stage.
    FlushStageCacheRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the stage to flush its cache.
      required:
      - restApiId
      - stageName
      description: Requests API Gateway to flush a stage's cache.
    GatewayResponse:
      type: object
      properties:
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          description: The response type of the associated GatewayResponse.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The HTTP status code for this GatewayResponse.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Response parameters (paths, query strings and headers) of the
            GatewayResponse as a string-to-string map of key-value pairs.
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Response templates of the GatewayResponse as a string-to-string
            map of key-value pairs.
        defaultResponse:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether this GatewayResponse is
            the default gateway response (`true`) or not (`false`). A default gateway
            response is one generated by API Gateway without any customization by
            an API developer.
      description: A gateway response of a given response type and status code, with
        optional response parameters and mapping templates.
    GatewayResponseType:
      type: string
      enum:
      - DEFAULT_4XX
      - DEFAULT_5XX
      - RESOURCE_NOT_FOUND
      - UNAUTHORIZED
      - INVALID_API_KEY
      - ACCESS_DENIED
      - AUTHORIZER_FAILURE
      - AUTHORIZER_CONFIGURATION_ERROR
      - INVALID_SIGNATURE
      - EXPIRED_TOKEN
      - MISSING_AUTHENTICATION_TOKEN
      - INTEGRATION_FAILURE
      - INTEGRATION_TIMEOUT
      - API_CONFIGURATION_ERROR
      - UNSUPPORTED_MEDIA_TYPE
      - BAD_REQUEST_PARAMETERS
      - BAD_REQUEST_BODY
      - REQUEST_TOO_LARGE
      - THROTTLED
      - QUOTA_EXCEEDED
      - WAF_FILTERED
    GatewayResponses:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfGatewayResponse'
          description: Returns the entire collection, because of no pagination support.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set. The
            GatewayResponse collection does not support pagination and the position
            does not apply here.
      description: The collection of the GatewayResponse instances of a RestApi as
        a `responseType`-to-GatewayResponse object map of key-value pairs. As such,
        pagination is not supported for querying this collection.
    GenerateClientCertificateRequest:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the ClientCertificate.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      description: A request to generate a ClientCertificate resource.
    GetAccountRequest:
      type: object
      properties: {}
      description: Requests API Gateway to get information about the current Account
        resource.
    GetApiKeyRequest:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ApiKey resource.
        includeValue:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: A boolean flag to specify whether (`true`) or not (`false`)
            the result contains the key value.
      required:
      - apiKey
      description: A request to get information about the current ApiKey resource.
    GetApiKeysRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        nameQuery:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of queried API keys.
        customerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a customer in Amazon Web Services Marketplace
            or an external system, such as a developer portal.
        includeValues:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: A boolean flag to specify whether (`true`) or not (`false`)
            the result contains key values.
      description: A request to get information about the current ApiKeys resource.
    GetAuthorizerRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Authorizer resource.
      required:
      - restApiId
      - authorizerId
      description: Request to describe an existing Authorizer resource.
    GetAuthorizersRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - restApiId
      description: Request to describe an existing Authorizers resource.
    GetBasePathMappingRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the BasePathMapping resource to be described.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The base path name that callers of the API must provide as
            part of the URL after the domain name. This value must be unique for all
            of the mappings across a single API. Specify '(none)' if you do not want
            callers to specify any base path name after the domain name.
      required:
      - domainName
      - basePath
      description: Request to describe a BasePathMapping resource.
    GetBasePathMappingsRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of a BasePathMapping resource.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - domainName
      description: A request to get information about a collection of BasePathMapping
        resources.
    GetClientCertificateRequest:
      type: object
      properties:
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ClientCertificate resource to be described.
      required:
      - clientCertificateId
      description: A request to get information about the current ClientCertificate
        resource.
    GetClientCertificatesRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      description: A request to get information about a collection of ClientCertificate
        resources.
    GetDeploymentRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Deployment resource to get information
            about.
        embed:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A query parameter to retrieve the specified embedded resources
            of the returned Deployment resource in the response. In a REST API call,
            this `embed` parameter value is a list of comma-separated strings, as
            in `GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=var1,var2`.
            The SDK and other platform-dependent libraries might use a different format
            for the list. Currently, this request supports only retrieval of the embedded
            API summary this way. Hence, the parameter value must be a single-valued
            list containing only the `"apisummary"` string. For example, `GET /restapis/{restapi_id}/deployments/{deployment_id}?embed=apisummary`.
      required:
      - restApiId
      - deploymentId
      description: Requests API Gateway to get information about a Deployment resource.
    GetDeploymentsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - restApiId
      description: Requests API Gateway to get information about a Deployments collection.
    GetDocumentationPartRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationPartId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
      required:
      - restApiId
      - documentationPartId
      description: Gets a specified documentation part of a given API.
    GetDocumentationPartsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        type:
          allOf:
          - $ref: '#/components/schemas/DocumentationPartType'
          description: The type of API entities of the to-be-retrieved documentation
            parts.
        nameQuery:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of API entities of the to-be-retrieved documentation
            parts.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The path of API entities of the to-be-retrieved documentation
            parts.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        locationStatus:
          allOf:
          - $ref: '#/components/schemas/LocationStatusType'
          description: The status of the API documentation parts to retrieve. Valid
            values are `DOCUMENTED` for retrieving DocumentationPart resources with
            content and `UNDOCUMENTED` for DocumentationPart resources without content.
      required:
      - restApiId
      description: Gets the documentation parts of an API. The result may be filtered
        by the type, name, or path of API entities (targets).
    GetDocumentationVersionRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version identifier of the to-be-retrieved documentation
            snapshot.
      required:
      - restApiId
      - documentationVersion
      description: Gets a documentation snapshot of an API.
    GetDocumentationVersionsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - restApiId
      description: Gets the documentation versions of an API.
    GetDomainNameAccessAssociationsRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/ResourceOwner'
          description: The owner of the domain name access association. Use `SELF`
            to only list the domain name access associations owned by your own account.
            Use `OTHER_ACCOUNTS` to list the domain name access associations with
            your private custom domain names that are owned by other AWS accounts.
    GetDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the DomainName resource.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Required for private
            custom domain names.
      required:
      - domainName
      description: Request to get the name of a DomainName resource.
    GetDomainNamesRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/ResourceOwner'
          description: The owner of the domain name access association.
      description: Request to describe a collection of DomainName resources.
    GetExportRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage that will be exported.
        exportType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of export. Acceptable values are 'oas30' for OpenAPI
            3.0.x and 'swagger' for Swagger/OpenAPI 2.0.
        parameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map of query string parameters that specify properties
            of the export, depending on the requested `exportType`. For `exportType`
            `oas30` and `swagger`, any combination of the following parameters are
            supported: `extensions=''integrations''` or `extensions=''apigateway''`
            will export the API with x-amazon-apigateway-integration extensions. `extensions=''authorizers''`
            will export the API with x-amazon-apigateway-authorizer extensions. `postman`
            will export the API with Postman extensions, allowing for import to the
            Postman tool'
        accepts:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-type of the export, for example `application/json`.
            Currently `application/json` and `application/yaml` are supported for
            `exportType` of`oas30` and `swagger`. This should be specified in the
            `Accept` header for direct API requests.
      required:
      - restApiId
      - stageName
      - exportType
      description: Request a new export of a RestApi for a particular Stage.
    GetGatewayResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          description: The response type of the associated GatewayResponse.
      required:
      - restApiId
      - responseType
      description: Gets a GatewayResponse of a specified response type on the given
        RestApi.
    GetGatewayResponsesRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set. The
            GatewayResponse collection does not support pagination and the position
            does not apply here.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500. The GatewayResponses collection
            does not support pagination and the limit does not apply here.
      required:
      - restApiId
      description: Gets the GatewayResponses collection on the given RestApi. If an
        API developer has not added any definitions for gateway responses, the result
        will be the API Gateway-generated default GatewayResponses collection for
        the supported response types.
    GetIntegrationRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a get integration request's resource identifier
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a get integration request's HTTP method.
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Represents a request to get the integration configuration.
    GetIntegrationResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a get integration response request's resource identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a get integration response request's HTTP method.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: Specifies a get integration response request's status code.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Represents a get integration response request.
    GetMethodRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the Method resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the method request's HTTP method type.
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Request to describe an existing Method resource.
    GetMethodResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the MethodResponse resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code for the MethodResponse resource.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Request to describe a MethodResponse resource.
    GetModelRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The RestApi identifier under which the Model exists.
        modelName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model as an identifier.
        flatten:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A query parameter of a Boolean value to resolve (`true`) all
            external model references and returns a flattened model schema or not
            (`false`) The default is `false`.
      required:
      - restApiId
      - modelName
      description: Request to list information about a model in an existing RestApi
        resource.
    GetModelTemplateRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        modelName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model for which to generate a template.
      required:
      - restApiId
      - modelName
      description: Request to generate a sample mapping template used to transform
        the payload.
    GetModelsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - restApiId
      description: Request to list existing Models defined for a RestApi resource.
    GetRequestValidatorRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the RequestValidator to be retrieved.
      required:
      - restApiId
      - requestValidatorId
      description: Gets a RequestValidator of a given RestApi.
    GetRequestValidatorsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - restApiId
      description: Gets the RequestValidators collection of a given RestApi.
    GetResourceRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the Resource resource.
        embed:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A query parameter to retrieve the specified resources embedded
            in the returned Resource representation in the response. This `embed`
            parameter value is a list of comma-separated strings. Currently, the request
            supports only retrieval of the embedded Method resources this way. The
            query parameter value must be a single-valued list and contain the `"methods"`
            string. For example, `GET /restapis/{restapi_id}/resources/{resource_id}?embed=methods`.
      required:
      - restApiId
      - resourceId
      description: Request to list information about a resource.
    GetResourcesRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        embed:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A query parameter used to retrieve the specified resources
            embedded in the returned Resources resource in the response. This `embed`
            parameter value is a list of comma-separated strings. Currently, the request
            supports only retrieval of the embedded Method resources this way. The
            query parameter value must be a single-valued list and contain the `"methods"`
            string. For example, `GET /restapis/{restapi_id}/resources?embed=methods`.
      required:
      - restApiId
      description: Request to list information about a collection of resources.
    GetRestApiRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
      required:
      - restApiId
      description: The GET request to list an existing RestApi defined for your collection.
    GetRestApisRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      description: The GET request to list existing RestApis defined for your collection.
    GetSdkRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage that the SDK will use.
        sdkType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The language for the generated SDK. Currently `java`, `javascript`,
            `android`, `objectivec` (for iOS), `swift` (for iOS), and `ruby` are supported.
        parameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A string-to-string key-value map of query parameters `sdkType`-dependent
            properties of the SDK. For `sdkType` of `objectivec` or `swift`, a parameter
            named `classPrefix` is required. For `sdkType` of `android`, parameters
            named `groupId`, `artifactId`, `artifactVersion`, and `invokerPackage`
            are required. For `sdkType` of `java`, parameters named `serviceName`
            and `javaPackageName` are required.
      required:
      - restApiId
      - stageName
      - sdkType
      description: Request a new generated client SDK for a RestApi and Stage.
    GetSdkTypeRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the queried SdkType instance.
      required:
      - id
      description: Get an SdkType instance.
    GetSdkTypesRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      description: Get the SdkTypes collection.
    GetStageRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage resource to get information about.
      required:
      - restApiId
      - stageName
      description: Requests API Gateway to get information about a Stage resource.
    GetStagesRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stages' deployment identifiers.
      required:
      - restApiId
      description: Requests API Gateway to get information about one or more Stage
        resources.
    GetTagsRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of a resource that can be tagged.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: (Not currently supported) The current pagination position in
            the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: (Not currently supported) The maximum number of returned results
            per page. The default value is 25 and the maximum value is 500.
      required:
      - resourceArn
      description: Gets the Tags collection for a given resource.
    GetUsagePlanKeyRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the UsagePlan resource representing the usage plan
            containing the to-be-retrieved UsagePlanKey resource representing a plan
            customer.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key Id of the to-be-retrieved UsagePlanKey resource representing
            a plan customer.
      required:
      - usagePlanId
      - keyId
      description: The GET request to get a usage plan key of a given key identifier.
    GetUsagePlanKeysRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the UsagePlan resource representing the usage plan
            containing the to-be-retrieved UsagePlanKey resource representing a plan
            customer.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
        nameQuery:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A query parameter specifying the name of the to-be-returned
            usage plan keys.
      required:
      - usagePlanId
      description: The GET request to get all the usage plan keys representing the
        API keys added to a specified usage plan.
    GetUsagePlanRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the UsagePlan resource to be retrieved.
      required:
      - usagePlanId
      description: The GET request to get a usage plan of a given plan identifier.
    GetUsagePlansRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the API key associated with the usage plans.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      description: The GET request to get all the usage plans of the caller's account.
    GetUsageRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the usage plan associated with the usage data.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the API key associated with the resultant usage data.
        startDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The starting date (e.g., 2016-01-01) of the usage data.
        endDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ending date (e.g., 2016-12-31) of the usage data.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      required:
      - usagePlanId
      - startDate
      - endDate
      description: The GET request to get the usage data of a usage plan in a specified
        time interval.
    GetVpcLinkRequest:
      type: object
      properties:
        vpcLinkId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the VpcLink. It is used in an Integration
            to reference this VpcLink.
      required:
      - vpcLinkId
      description: Gets a specified VPC link under the caller's account in a region.
    GetVpcLinksRequest:
      type: object
      properties:
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
        limit:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: The maximum number of returned results per page. The default
            value is 25 and the maximum value is 500.
      description: Gets the VpcLinks collection under the caller's account in a selected
        region.
    ImportApiKeysRequest:
      type: object
      properties:
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The payload of the POST request to import API keys. For the
            payload format, see API Key File Format.
        format:
          allOf:
          - $ref: '#/components/schemas/ApiKeysFormat'
          description: A query parameter to specify the input format to imported API
            keys. Currently, only the `csv` format is supported.
        failOnWarnings:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A query parameter to indicate whether to rollback ApiKey importation
            (`true`) or not (`false`) when error is encountered.
      required:
      - body
      - format
      description: The POST request to import API keys from an external source, such
        as a CSV-formatted file.
    ImportDocumentationPartsRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        mode:
          allOf:
          - $ref: '#/components/schemas/PutMode'
          description: A query parameter to indicate whether to overwrite (`overwrite`)
            any existing DocumentationParts definition or to merge (`merge`) the new
            definition into the existing one. The default value is `merge`.
        failOnWarnings:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A query parameter to specify whether to rollback the documentation
            importation (`true`) or not (`false`) when a warning is encountered. The
            default value is `false`.
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Raw byte array representing the to-be-imported documentation
            parts. To import from an OpenAPI file, this is a JSON object.
      required:
      - restApiId
      - body
      description: Import documentation parts from an external (e.g., OpenAPI) definition
        file.
    ImportRestApiRequest:
      type: object
      properties:
        failOnWarnings:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A query parameter to indicate whether to rollback the API creation
            (`true`) or not (`false`) when a warning is encountered. The default value
            is `false`.
        parameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: 'A key-value map of context-specific query string parameters
            specifying the behavior of different API importing operations. The following
            shows operation-specific parameters and their supported values.


            To exclude DocumentationParts from the import, set `parameters` as `ignore=documentation`.


            To configure the endpoint type, set `parameters` as `endpointConfigurationTypes=EDGE`,
            `endpointConfigurationTypes=REGIONAL`, or `endpointConfigurationTypes=PRIVATE`.
            The default endpoint type is `EDGE`.


            To handle imported `basepath`, set `parameters` as `basepath=ignore`,
            `basepath=prepend` or `basepath=split`.'
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The POST request body containing external API definitions.
            Currently, only OpenAPI definition JSON/YAML files are supported. The
            maximum size of the API definition file is 6MB.
      required:
      - body
      description: A POST request to import an API to API Gateway using an input of
        an API definition file.
    Integer:
      type: integer
      default: 0
    Integration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'Specifies an API method integration type. The valid value
            is one of the following:


            For the HTTP and HTTP proxy integrations, each integration can specify
            a protocol (`http/https`), port and path. Standard 80 and 443 ports are
            supported as well as custom ports above 1024. An HTTP or HTTP proxy integration
            with a `connectionType` of `VPC_LINK` is referred to as a private integration
            and uses a VpcLink to connect API Gateway to a network load balancer of
            a VPC.'
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the integration's HTTP method type. For the Type
            property, if you specify `MOCK`, this property is optional. For Lambda
            integrations, you must set the integration method to `POST`. For all other
            types, you must specify this property.
        uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Specifies Uniform Resource Identifier (URI) of the integration
            endpoint.


            For `HTTP` or `HTTP_PROXY` integrations, the URI must be a fully formed,
            encoded HTTP(S) URL according to the RFC-3986 specification for standard
            integrations. If `connectionType` is `VPC_LINK` specify the Network Load
            Balancer DNS name. For `AWS` or `AWS_PROXY` integrations, the URI is of
            the form `arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}`.
            Here, {Region} is the API Gateway region (e.g., us-east-1); {service}
            is the name of the integrated Amazon Web Services service (e.g., s3);
            and {subdomain} is a designated subdomain supported by certain Amazon
            Web Services service for fast host-name lookup. action can be used for
            an Amazon Web Services service action-based API, using an Action={name}&{p1}={v1}&p2;={v2}...
            query string. The ensuing {service_api} refers to a supported action {name}
            plus any required input parameters. Alternatively, path can be used for
            an Amazon Web Services service path-based API. The ensuing service_api
            refers to the path to an Amazon Web Services service resource, including
            the region of the integrated Amazon Web Services service, if applicable.
            For example, for integration with the S3 API of GetObject, the uri can
            be either `arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket;={bucket}&Key;={key}`
            or `arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}`'
        connectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            The valid value is `INTERNET` for connections through the public routable
            internet or `VPC_LINK` for private connections between API Gateway and
            a network load balancer in a VPC. The default value is `INTERNET`.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the VpcLink used for the integration when `connectionType=VPC_LINK`
            and undefined, otherwise.
        credentials:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string `arn:aws:iam::\*:user/\*`. To use resource-based
            permissions on supported Amazon Web Services services, specify null.
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map specifying request parameters that are passed
            from the method request to the back end. The key is an integration request
            parameter name and the associated value is a method request parameter
            value or static value that must be enclosed within single quotes and pre-encoded
            as required by the back end. The method request parameter value must match
            the pattern of `method.request.{location}.{name}`, where `location` is
            `querystring`, `path`, or `header` and `name` must be a valid and unique
            method request parameter name.
        requestTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value.
        passthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Specifies how the method request body of an unmapped content
            type will be passed through the integration request to the back end without
            transformation. A content type is unmapped if no mapping template is defined
            in the integration or the content type does not match any of the mapped
            content types, as specified in `requestTemplates`. The valid value is
            one of the following: `WHEN_NO_MATCH`: passes the method request body
            through the integration request to the back end without transformation
            when the method request content type does not match any content type associated
            with the mapping templates defined in the integration request. `WHEN_NO_TEMPLATES`:
            passes the method request body through the integration request to the
            back end without transformation when no mapping template is defined in
            the integration request. If a template is defined when this option is
            selected, the method request of an unmapped content-type will be rejected
            with an HTTP 415 Unsupported Media Type response. `NEVER`: rejects the
            method request with an HTTP 415 Unsupported Media Type response when either
            the method request content type does not match any content type associated
            with the mapping templates defined in the integration request or no mapping
            template is defined in the integration request.'
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Specifies how to handle request payload content type conversions.
            Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the
            following behaviors:


            If this property is not defined, the request payload will be passed through
            from the method request to integration request without modification, provided
            that the `passthroughBehavior` is configured to support payload pass-through.'
        timeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Custom timeout between 50 and 29,000 milliseconds. The default
            value is 29,000 milliseconds or 29 seconds.
        cacheNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a group of related cached parameters. By default,
            API Gateway uses the resource ID as the `cacheNamespace`. You can specify
            the same `cacheNamespace` across resources to return the same cached data
            for requests to different resources.
        cacheKeyParameters:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of request parameters whose values API Gateway caches.
            To be valid values for `cacheKeyParameters`, these parameters must also
            be specified for Method `requestParameters`.
        integrationResponses:
          allOf:
          - $ref: '#/components/schemas/MapOfIntegrationResponse'
          description: Specifies the integration's responses.
        tlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfig'
          description: Specifies the TLS configuration for an integration.
      description: Represents an `HTTP`, `HTTP_PROXY`, `AWS`, `AWS_PROXY`, or Mock
        integration.
    IntegrationResponse:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: Specifies the status code that is used to map the integration
            response to an existing MethodResponse.
        selectionPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the regular expression (regex) pattern used to choose
            an integration response based on the response from the back end. For example,
            if the success response returns nothing and the error response returns
            some string, you could use the `.+` regex to match error response. However,
            make sure that the error response does not contain any newline (`\n`)
            character in such cases. If the back end is an Lambda function, the Lambda
            function error header is matched. For all other HTTP and Amazon Web Services
            back ends, the HTTP status code is matched.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map specifying response parameters that are passed
            to the method response from the back end. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of `method.response.header.{name}`, where `name`
            is a valid and unique header name. The mapped non-static value must match
            the pattern of `integration.response.header.{name}` or `integration.response.body.{JSON-expression}`,
            where `name` is a valid and unique response header name and `JSON-expression`
            is a valid JSON expression without the `$` prefix.
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies the templates used to transform the integration response
            body. Response templates are represented as a key/value map, with a content-type
            as the key and a template as the value.
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Specifies how to handle response payload content type conversions.
            Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the
            following behaviors:


            If this property is not defined, the response payload will be passed through
            from the integration response to the method response without modification.'
      description: Represents an integration response. The status code must map to
        an existing MethodResponse, and parameters and templates can be used to transform
        the back-end response.
    IntegrationType:
      type: string
      enum:
      - HTTP
      - AWS
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
      description: <p>The integration type. The valid value is <code>HTTP</code> for
        integrating an API method with an HTTP backend; <code>AWS</code> with any
        Amazon Web Services service endpoints; <code>MOCK</code> for testing without
        actually invoking the backend; <code>HTTP_PROXY</code> for integrating with
        the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the
        Lambda proxy integration. </p>
    IpAddressType:
      type: string
      enum:
      - ipv4
      - dualstack
    LimitExceededException:
      type: object
      properties:
        retryAfterSeconds:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The request exceeded the rate limit. Retry after the specified
        time period.
    ListOfARNs:
      type: array
      items:
        $ref: '#/components/schemas/ProviderARN'
    ListOfApiKey:
      type: array
      items:
        $ref: '#/components/schemas/ApiKey'
    ListOfApiStage:
      type: array
      items:
        $ref: '#/components/schemas/ApiStage'
    ListOfAuthorizer:
      type: array
      items:
        $ref: '#/components/schemas/Authorizer'
    ListOfBasePathMapping:
      type: array
      items:
        $ref: '#/components/schemas/BasePathMapping'
    ListOfClientCertificate:
      type: array
      items:
        $ref: '#/components/schemas/ClientCertificate'
    ListOfDeployment:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    ListOfDocumentationPart:
      type: array
      items:
        $ref: '#/components/schemas/DocumentationPart'
    ListOfDocumentationVersion:
      type: array
      items:
        $ref: '#/components/schemas/DocumentationVersion'
    ListOfDomainName:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
    ListOfDomainNameAccessAssociation:
      type: array
      items:
        $ref: '#/components/schemas/DomainNameAccessAssociation'
    ListOfEndpointType:
      type: array
      items:
        $ref: '#/components/schemas/EndpointType'
    ListOfGatewayResponse:
      type: array
      items:
        $ref: '#/components/schemas/GatewayResponse'
    ListOfLong:
      type: array
      items:
        $ref: '#/components/schemas/Long'
    ListOfModel:
      type: array
      items:
        $ref: '#/components/schemas/Model'
    ListOfPatchOperation:
      type: array
      items:
        $ref: '#/components/schemas/PatchOperation'
      description: "<p>A list of operations describing the updates to apply to the\
        \ specified resource. The patches are applied\n      in the order specified\
        \ in the list.</p>"
    ListOfRequestValidator:
      type: array
      items:
        $ref: '#/components/schemas/RequestValidator'
    ListOfResource:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    ListOfRestApi:
      type: array
      items:
        $ref: '#/components/schemas/RestApi'
    ListOfSdkConfigurationProperty:
      type: array
      items:
        $ref: '#/components/schemas/SdkConfigurationProperty'
    ListOfSdkType:
      type: array
      items:
        $ref: '#/components/schemas/SdkType'
    ListOfStage:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    ListOfStageKeys:
      type: array
      items:
        $ref: '#/components/schemas/StageKey'
    ListOfString:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ListOfUsage:
      type: array
      items:
        $ref: '#/components/schemas/ListOfLong'
    ListOfUsagePlan:
      type: array
      items:
        $ref: '#/components/schemas/UsagePlan'
    ListOfUsagePlanKey:
      type: array
      items:
        $ref: '#/components/schemas/UsagePlanKey'
    ListOfVpcLink:
      type: array
      items:
        $ref: '#/components/schemas/VpcLink'
    LocationStatusType:
      type: string
      enum:
      - DOCUMENTED
      - UNDOCUMENTED
    Long:
      type: integer
      format: int64
      default: 0
    MapOfApiStageThrottleSettings:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ThrottleSettings'
    MapOfIntegrationResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/IntegrationResponse'
    MapOfKeyUsages:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ListOfUsage'
    MapOfMethod:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Method'
    MapOfMethodResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodResponse'
    MapOfMethodSettings:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodSetting'
    MapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MethodSnapshot'
    MapOfStringToBoolean:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NullableBoolean'
    MapOfStringToList:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ListOfString'
    MapOfStringToString:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    Method:
      type: object
      properties:
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The method's HTTP verb.
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The method's authorization type. Valid values are `NONE` for
            open access, `AWS_IAM` for using AWS IAM permissions, `CUSTOM` for using
            a custom authorizer, or `COGNITO_USER_POOLS` for using a Cognito user
            pool.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of an Authorizer to use on this method. The
            `authorizationType` must be `CUSTOM`.
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/NullableBoolean'
          description: A boolean flag specifying whether a valid ApiKey is required
            to invoke this method.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a RequestValidator for request validation.
        operationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A human-friendly operation identifier for the method. For example,
            you can assign the `operationName` of `ListPets` for the `GET /pets` method
            in the `PetStore` example.
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          description: A key-value map defining required or optional method request
            parameters that can be accepted by API Gateway. A key is a method request
            parameter name matching the pattern of `method.request.{location}.{name}`,
            where `location` is `querystring`, `path`, or `header` and `name` is a
            valid and unique parameter name. The value associated with the key is
            a Boolean flag indicating whether the parameter is required (`true`) or
            optional (`false`). The method request parameter names defined here are
            available in Integration to be mapped to integration request parameters
            or templates.
        requestModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map specifying data schemas, represented by Model
            resources, (as the mapped value) of the request payloads of given content
            types (as the mapping key).
        methodResponses:
          allOf:
          - $ref: '#/components/schemas/MapOfMethodResponse'
          description: Gets a method response associated with a given HTTP status
            code.
        methodIntegration:
          allOf:
          - $ref: '#/components/schemas/Integration'
          description: Gets the method's integration responsible for passing the client-submitted
            request to the back end and performing necessary transformations to make
            the request compliant with the back end.
        authorizationScopes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of authorization scopes configured on the method. The
            scopes are used with a `COGNITO_USER_POOLS` authorizer to authorize the
            method invocation. The authorization works by matching the method scopes
            against the scopes parsed from the access token in the incoming request.
            The method invocation is authorized if any method scopes matches a claimed
            scope in the access token. Otherwise, the invocation is not authorized.
            When the method scope is configured, the client must provide an access
            token instead of an identity token for authorization purposes.
      description: Represents a client-facing interface by which the client calls
        the API to access back-end resources. A Method resource is integrated with
        an Integration resource. Both consist of a request and one or more responses.
        The method request takes the client input that is passed to the back end through
        the integration request. A method response returns the output from the back
        end to the client through an integration response. A method request is embodied
        in a Method resource, whereas an integration request is embodied in an Integration
        resource. On the other hand, a method response is represented by a MethodResponse
        resource, whereas an integration response is represented by an IntegrationResponse
        resource.
    MethodResponse:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The method response's status code.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          description: A key-value map specifying required or optional response parameters
            that API Gateway can send back to the caller. A key defines a method response
            header and the value specifies whether the associated method response
            header is required or not. The expression of the key must match the pattern
            `method.response.header.{name}`, where `name` is a valid and unique header
            name. API Gateway passes certain integration response data to the method
            response headers specified here according to the mapping you prescribe
            in the API's IntegrationResponse. The integration response data that can
            be mapped include an integration response header expressed in `integration.response.header.{name}`,
            a static value enclosed within a pair of single quotes (e.g., `'application/json'`),
            or a JSON expression from the back-end response payload in the form of
            `integration.response.body.{JSON-expression}`, where `JSON-expression`
            is a valid JSON expression without the `$` prefix.)
        responseModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies the Model resources used for the response's content-type.
            Response models are represented as a key/value map, with a content-type
            as the key and a Model name as the value.
      description: Represents a method response of a given HTTP status code returned
        to the client. The method response is passed from the back end through the
        associated integration response that can be transformed using a mapping template.
    MethodSetting:
      type: object
      properties:
        metricsEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether Amazon CloudWatch metrics are enabled for
            this method.
        loggingLevel:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the logging level for this method, which affects
            the log entries pushed to Amazon CloudWatch Logs. Valid values are `OFF`,
            `ERROR`, and `INFO`. Choose `ERROR` to write only error-level entries
            to CloudWatch Logs, or choose `INFO` to include all `ERROR` events as
            well as extra informational events.
        dataTraceEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether data trace logging is enabled for this method,
            which affects the log entries pushed to Amazon CloudWatch Logs. This can
            be useful to troubleshoot APIs, but can result in logging sensitive data.
            We recommend that you don't enable this option for production APIs.
        throttlingBurstLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the throttling burst limit.
        throttlingRateLimit:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: Specifies the throttling rate limit.
        cachingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether responses should be cached and returned for
            requests. A cache cluster must be enabled on the stage for responses to
            be cached.
        cacheTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the time to live (TTL), in seconds, for cached responses.
            The higher the TTL, the longer the response will be cached.
        cacheDataEncrypted:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the cached responses are encrypted.
        requireAuthorizationForCacheControl:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether authorization is required for a cache invalidation
            request.
        unauthorizedCacheControlHeaderStrategy:
          allOf:
          - $ref: '#/components/schemas/UnauthorizedCacheControlHeaderStrategy'
          description: Specifies how to handle unauthorized requests for cache invalidation.
      description: Specifies the method setting properties.
    MethodSnapshot:
      type: object
      properties:
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The method's authorization type. Valid values are `NONE` for
            open access, `AWS_IAM` for using AWS IAM permissions, `CUSTOM` for using
            a custom authorizer, or `COGNITO_USER_POOLS` for using a Cognito user
            pool.
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the method requires a valid ApiKey.
      description: Represents a summary of a Method resource, given a particular date
        and time.
    Model:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the model resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model. Must be an alphanumeric string.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the model.
        schema:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The schema for the model. For `application/json` models, this
            should be JSON schema draft 4 model. Do not include "\\*/" characters
            in the description of any properties because such "\\*/" characters may
            be interpreted as the closing marker for comments in some languages, such
            as Java or JavaScript, causing the installation of your API's SDK generated
            by API Gateway to fail.
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-type for the model.
      description: Represents the data structure of a method's request or response
        payload.
    Models:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfModel'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of Model resources.
    MutualTlsAuthentication:
      type: object
      properties:
        truststoreUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Amazon S3 URL that specifies the truststore for mutual TLS
            authentication, for example `s3://bucket-name/key-name`. The truststore
            can contain certificates from public or private certificate authorities.
            To update the truststore, upload a new version to S3, and then update
            your custom domain name to use the new version. To update the truststore,
            you must have permissions to access the S3 object.
        truststoreVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the S3 object that contains your truststore.
            To specify a version, you must have versioning enabled for the S3 bucket.
        truststoreWarnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of warnings that API Gateway returns while processing
            your truststore. Invalid certificates produce warnings. Mutual TLS is
            still enabled, but some clients might not be able to access your API.
            To resolve warnings, upload a new truststore to S3, and then update you
            domain name to use the new version.
      description: The mutual TLS authentication configuration for a custom domain
        name. If specified, API Gateway performs two-way authentication between the
        client and the server. Clients must present a trusted certificate to access
        your API.
    MutualTlsAuthenticationInput:
      type: object
      properties:
        truststoreUri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An Amazon S3 URL that specifies the truststore for mutual TLS
            authentication, for example `s3://bucket-name/key-name`. The truststore
            can contain certificates from public or private certificate authorities.
            To update the truststore, upload a new version to S3, and then update
            your custom domain name to use the new version. To update the truststore,
            you must have permissions to access the S3 object.
        truststoreVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the S3 object that contains your truststore.
            To specify a version, you must have versioning enabled for the S3 bucket
      description: The mutual TLS authentication configuration for a custom domain
        name. If specified, API Gateway performs two-way authentication between the
        client and the server. Clients must present a trusted certificate to access
        your API.
    NotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The requested resource is not found. Make sure that the request
        URI is correct.
    NullableBoolean:
      type: boolean
    NullableInteger:
      type: integer
    Op:
      type: string
      enum:
      - add
      - remove
      - replace
      - move
      - copy
      - test
    PatchOperation:
      type: object
      properties:
        op:
          allOf:
          - $ref: '#/components/schemas/Op'
          description: An update operation to be performed with this PATCH request.
            The valid value can be add, remove, replace or copy. Not all valid operations
            are supported for a given resource. Support of the operations depends
            on specific operational contexts. Attempts to apply an unsupported operation
            on a resource will return an error message..
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The op operation''s target, as identified by a JSON Pointer
            value that references a location within the targeted resource. For example,
            if the target resource has an updateable property of {"name":"value"},
            the path for this property is /name. If the name property value is a JSON
            object (e.g., {"name": {"child/name": "child-value"}}), the path for the
            child/name property will be /name/child~1name. Any slash ("/") character
            appearing in path names must be escaped with "~1", as shown in the example
            above. Each op operation can have only one path associated with it.'
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The new target value of the update operation. It is applicable
            for the add or replace operation. When using AWS CLI to update a property
            of a JSON value, enclose the JSON object with a pair of single quotes
            in a Linux shell, e.g., ''{"a": ...}''.'
        from:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The copy update operation's source as identified by a JSON-Pointer
            value referencing the location within the targeted resource to copy the
            value from. For example, to promote a canary deployment, you copy the
            canary deployment ID to the affiliated deployment ID by calling a PATCH
            request on a Stage resource with "op":"copy", "from":"/canarySettings/deploymentId"
            and "path":"/deploymentId".
      description: For more information about supported patch operations, see [Patch
        Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
    PathToMapOfMethodSnapshot:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/MapOfMethodSnapshot'
    ProviderARN:
      type: string
    PutGatewayResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          description: The response type of the associated GatewayResponse
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The HTTP status code of the GatewayResponse.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Response parameters (paths, query strings and headers) of the
            GatewayResponse as a string-to-string map of key-value pairs.
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Response templates of the GatewayResponse as a string-to-string
            map of key-value pairs.
      required:
      - restApiId
      - responseType
      description: Creates a customization of a GatewayResponse of a specified response
        type and status code on the given RestApi.
    PutIntegrationRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a put integration request's resource ID.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the HTTP method for the integration.
        type:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: Specifies a put integration input's type.
        integrationHttpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP method for the integration.
        uri:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies Uniform Resource Identifier (URI) of the integration
            endpoint. For HTTP or `HTTP_PROXY` integrations, the URI must be a fully
            formed, encoded HTTP(S) URL according to the RFC-3986 specification, for
            either standard integration, where `connectionType` is not `VPC_LINK`,
            or private integration, where `connectionType` is `VPC_LINK`. For a private
            HTTP integration, the URI is not used for routing. For `AWS` or `AWS_PROXY`
            integrations, the URI is of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api`}.
            Here, {Region} is the API Gateway region (e.g., us-east-1); {service}
            is the name of the integrated Amazon Web Services service (e.g., s3);
            and {subdomain} is a designated subdomain supported by certain Amazon
            Web Services service for fast host-name lookup. action can be used for
            an Amazon Web Services service action-based API, using an Action={name}&{p1}={v1}&p2;={v2}...
            query string. The ensuing {service_api} refers to a supported action {name}
            plus any required input parameters. Alternatively, path can be used for
            an Amazon Web Services service path-based API. The ensuing service_api
            refers to the path to an Amazon Web Services service resource, including
            the region of the integrated Amazon Web Services service, if applicable.
            For example, for integration with the S3 API of `GetObject`, the `uri`
            can be either `arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket;={bucket}&Key;={key}`
            or `arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}`.
        connectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            The valid value is `INTERNET` for connections through the public routable
            internet or `VPC_LINK` for private connections between API Gateway and
            a network load balancer in a VPC. The default value is `INTERNET`.
        connectionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the VpcLink used for the integration. Specify this
            value only if you specify `VPC_LINK` as the connection type.
        credentials:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies whether credentials are required for a put integration.
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map specifying request parameters that are passed
            from the method request to the back end. The key is an integration request
            parameter name and the associated value is a method request parameter
            value or static value that must be enclosed within single quotes and pre-encoded
            as required by the back end. The method request parameter value must match
            the pattern of `method.request.{location}.{name}`, where `location` is
            `querystring`, `path`, or `header` and `name` must be a valid and unique
            method request parameter name.
        requestTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value.
        passthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the `requestTemplates` property on the Integration
            resource. There are three valid values: `WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`,
            and `NEVER`.'
        cacheNamespace:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a group of related cached parameters. By default,
            API Gateway uses the resource ID as the `cacheNamespace`. You can specify
            the same `cacheNamespace` across resources to return the same cached data
            for requests to different resources.
        cacheKeyParameters:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of request parameters whose values API Gateway caches.
            To be valid values for `cacheKeyParameters`, these parameters must also
            be specified for Method `requestParameters`.
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Specifies how to handle request payload content type conversions.
            Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the
            following behaviors:


            If this property is not defined, the request payload will be passed through
            from the method request to integration request without modification, provided
            that the `passthroughBehavior` is configured to support payload pass-through.'
        timeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: Custom timeout between 50 and 29,000 milliseconds. The default
            value is 29,000 milliseconds or 29 seconds.
        tlsConfig:
          $ref: '#/components/schemas/TlsConfig'
      required:
      - restApiId
      - resourceId
      - httpMethod
      - type
      description: Sets up a method's integration.
    PutIntegrationResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a put integration response request's resource identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a put integration response request's HTTP method.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: Specifies the status code that is used to map the integration
            response to an existing MethodResponse.
        selectionPattern:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the selection pattern of a put integration response.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map specifying response parameters that are passed
            to the method response from the back end. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of `method.response.header.{name}`, where `name`
            is a valid and unique header name. The mapped non-static value must match
            the pattern of `integration.response.header.{name}` or `integration.response.body.{JSON-expression}`,
            where `name` must be a valid and unique response header name and `JSON-expression`
            a valid JSON expression without the `$` prefix.
        responseTemplates:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies a put integration response's templates.
        contentHandling:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Specifies how to handle response payload content type conversions.
            Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`, with the
            following behaviors:


            If this property is not defined, the response payload will be passed through
            from the integration response to the method response without modification.'
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Represents a put integration response request.
    PutMethodRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the new Method resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the method request's HTTP method type.
        authorizationType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The method's authorization type. Valid values are `NONE` for
            open access, `AWS_IAM` for using AWS IAM permissions, `CUSTOM` for using
            a custom authorizer, or `COGNITO_USER_POOLS` for using a Cognito user
            pool.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the identifier of an Authorizer to use on this Method,
            if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier
            is generated by API Gateway when you created the authorizer.
        apiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether the method required a valid ApiKey.
        operationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A human-friendly operation identifier for the method. For example,
            you can assign the `operationName` of `ListPets` for the `GET /pets` method
            in the `PetStore` example.
        requestParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          description: A key-value map defining required or optional method request
            parameters that can be accepted by API Gateway. A key defines a method
            request parameter name matching the pattern of `method.request.{location}.{name}`,
            where `location` is `querystring`, `path`, or `header` and `name` is a
            valid and unique parameter name. The value associated with the key is
            a Boolean flag indicating whether the parameter is required (`true`) or
            optional (`false`). The method request parameter names defined here are
            available in Integration to be mapped to integration request parameters
            or body-mapping templates.
        requestModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies the Model resources used for the request's content
            type. Request models are represented as a key/value map, with a content
            type as the key and a Model name as the value.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a RequestValidator for validating the method
            request.
        authorizationScopes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: A list of authorization scopes configured on the method. The
            scopes are used with a `COGNITO_USER_POOLS` authorizer to authorize the
            method invocation. The authorization works by matching the method scopes
            against the scopes parsed from the access token in the incoming request.
            The method invocation is authorized if any method scopes matches a claimed
            scope in the access token. Otherwise, the invocation is not authorized.
            When the method scope is configured, the client must provide an access
            token instead of an identity token for authorization purposes.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - authorizationType
      description: Request to add a method to an existing Resource resource.
    PutMethodResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the Method resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The method response's status code.
        responseParameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToBoolean'
          description: A key-value map specifying required or optional response parameters
            that API Gateway can send back to the caller. A key defines a method response
            header name and the associated value is a Boolean flag indicating whether
            the method response parameter is required or not. The method response
            header names must match the pattern of `method.response.header.{name}`,
            where `name` is a valid and unique header name. The response parameter
            names defined here are available in the integration response to be mapped
            from an integration response header expressed in `integration.response.header.{name}`,
            a static value enclosed within a pair of single quotes (e.g., `'application/json'`),
            or a JSON expression from the back-end response payload in the form of
            `integration.response.body.{JSON-expression}`, where `JSON-expression`
            is a valid JSON expression without the `$` prefix.)
        responseModels:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Specifies the Model resources used for the response's content
            type. Response models are represented as a key/value map, with a content
            type as the key and a Model name as the value.
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Request to add a MethodResponse to an existing Method resource.
    PutMode:
      type: string
      enum:
      - merge
      - overwrite
    PutRestApiRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        mode:
          allOf:
          - $ref: '#/components/schemas/PutMode'
          description: The `mode` query parameter to specify the update mode. Valid
            values are "merge" and "overwrite". By default, the update mode is "merge".
        failOnWarnings:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A query parameter to indicate whether to rollback the API update
            (`true`) or not (`false`) when a warning is encountered. The default value
            is `false`.
        parameters:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: Custom header parameters as part of the request. For example,
            to exclude DocumentationParts from an imported API, set `ignore=documentation`
            as a `parameters` value, as in the AWS CLI command of `aws apigateway
            import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'`.
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The PUT request body containing external API definitions. Currently,
            only OpenAPI definition JSON/YAML files are supported. The maximum size
            of the API definition file is 6MB.
      required:
      - restApiId
      - body
      description: A PUT request to update an existing API, with external API definitions
        specified as the request body.
    QuotaPeriodType:
      type: string
      enum:
      - DAY
      - WEEK
      - MONTH
    QuotaSettings:
      type: object
      properties:
        limit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The target maximum number of requests that can be made in a
            given time period.
        offset:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of requests subtracted from the given limit in the
            initial time period.
        period:
          allOf:
          - $ref: '#/components/schemas/QuotaPeriodType'
          description: The time period in which the limit applies. Valid values are
            "DAY", "WEEK" or "MONTH".
      description: Quotas configured for a usage plan.
    RejectDomainNameAccessAssociationRequest:
      type: object
      properties:
        domainNameAccessAssociationArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name access association resource.
        domainNameArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the domain name.
      required:
      - domainNameAccessAssociationArn
      - domainNameArn
    RequestValidator:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of this RequestValidator.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of this RequestValidator
        validateRequestBody:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate a request body
            according to the configured Model schema.
        validateRequestParameters:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean flag to indicate whether to validate request parameters
            (`true`) or not (`false`).
      description: A set of validation rules for incoming Method requests.
    RequestValidators:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfRequestValidator'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: A collection of RequestValidator resources of a given RestApi.
    Resource:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource's identifier.
        parentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The parent resource's identifier.
        pathPart:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The last path segment for this resource.
        path:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The full path for this resource.
        resourceMethods:
          allOf:
          - $ref: '#/components/schemas/MapOfMethod'
          description: Gets an API resource's method of a given HTTP verb.
      description: Represents an API resource.
    ResourceOwner:
      type: string
      enum:
      - SELF
      - OTHER_ACCOUNTS
    Resources:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfResource'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of Resource resources.
    RestApi:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API's identifier. This identifier is unique across all
            of your APIs in API Gateway.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API's name.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API's description.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the API was created.
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A version identifier for the API.
        warnings:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The warning messages reported when `failonwarnings` is turned
            on during API import.
        binaryMediaTypes:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The list of binary media types supported by the RestApi. By
            default, the RestApi supports only UTF-8-encoded text payloads.
        minimumCompressionSize:
          allOf:
          - $ref: '#/components/schemas/NullableInteger'
          description: A nullable integer that is used to enable compression (with
            non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable
            compression (with a null value) on an API. When compression is enabled,
            compression or decompression is not applied on the payload if the payload
            size is smaller than this value. Setting it to zero allows compression
            for any payload size.
        apiKeySource:
          allOf:
          - $ref: '#/components/schemas/ApiKeySourceType'
          description: 'The source of the API key for metering requests according
            to a usage plan. Valid values are: >`HEADER` to read the API key from
            the `X-API-Key` header of a request. `AUTHORIZER` to read the API key
            from the `UsageIdentifierKey` from a custom authorizer.'
        endpointConfiguration:
          allOf:
          - $ref: '#/components/schemas/EndpointConfiguration'
          description: The endpoint configuration of this RestApi showing the endpoint
            types and IP address types of the API.
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A stringified JSON policy document that applies to this RestApi
            regardless of the caller and Method configuration.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
        disableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether clients can invoke your API by using the
            default `execute-api` endpoint. By default, clients can invoke your API
            with the default `https://{api_id}.execute-api.{region}.amazonaws.com`
            endpoint. To require that clients use a custom domain name to invoke your
            API, disable the default endpoint.
        rootResourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API's root resource ID.
      description: Represents a REST API.
    RestApis:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfRestApi'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Contains references to your APIs and links that guide you in how
        to interact with your collection. A collection offers a paginated view of
        your APIs.
    SdkConfigurationProperty:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a an SdkType configuration property.
        friendlyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user-friendly name of an SdkType configuration property.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of an SdkType configuration property.
        required:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A boolean flag of an SdkType configuration property to indicate
            if the associated SDK configuration property is required (`true`) or not
            (`false`).
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The default value of an SdkType configuration property.
      description: A configuration property of an SDK type.
    SdkResponse:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-type header value in the HTTP response.
        contentDisposition:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The content-disposition header value in the HTTP response.
        body:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The binary blob response to GetSdk, which contains the generated
            SDK.
      description: The binary blob response to GetSdk, which contains the generated
        SDK.
    SdkType:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of an SdkType instance.
        friendlyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The user-friendly name of an SdkType instance.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of an SdkType.
        configurationProperties:
          allOf:
          - $ref: '#/components/schemas/ListOfSdkConfigurationProperty'
          description: A list of configuration properties of an SdkType.
      description: A type of SDK that API Gateway can generate.
    SdkTypes:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfSdkType'
          description: The current page of elements from this collection.
      description: The collection of SdkType instances.
    SecurityPolicy:
      type: string
      enum:
      - TLS_1_0
      - TLS_1_2
    ServiceUnavailableException:
      type: object
      properties:
        retryAfterSeconds:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The requested service is not available. For details see the accompanying
        error message. Retry after the specified time period.
    Stage:
      type: object
      properties:
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Deployment that the stage points to.
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a client certificate for an API stage.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the stage is the first path segment in the Uniform
            Resource Identifier (URI) of a call to API Gateway. Stage names can only
            contain alphanumeric characters, hyphens, and underscores. Maximum length
            is 128 characters.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stage's description.
        cacheClusterEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether a cache cluster is enabled for the stage.
            To activate a method-level cache, set `CachingEnabled` to `true` for a
            method.
        cacheClusterSize:
          allOf:
          - $ref: '#/components/schemas/CacheClusterSize'
          description: The stage's cache capacity in GB. For more information about
            choosing a cache size, see [Enabling API caching to enhance responsiveness](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html).
        cacheClusterStatus:
          allOf:
          - $ref: '#/components/schemas/CacheClusterStatus'
          description: The status of the cache cluster for the stage, if enabled.
        methodSettings:
          allOf:
          - $ref: '#/components/schemas/MapOfMethodSettings'
          description: A map that defines the method settings for a Stage resource.
            Keys (designated as `/{method_setting_key` below) are method paths defined
            as `{resource_path}/{http_method}` for an individual method override,
            or `/\*/\*` for overriding all methods in the stage.
        variables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A map that defines the stage variables for a Stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match `[A-Za-z0-9-._~:/?#&=,]+`.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the associated API documentation.
        accessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        canarySettings:
          allOf:
          - $ref: '#/components/schemas/CanarySettings'
          description: Settings for the canary deployment in this stage.
        tracingEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether active tracing with X-ray is enabled for
            the Stage.
        webAclArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the WebAcl associated with the Stage.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the stage was created.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp when the stage last updated.
      description: Represents a unique identifier for a version of a deployed RestApi
        that is callable by users.
    StageKey:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The stage name associated with the stage key.
      description: A reference to a unique stage identified in the format `{restApiId}/{stage}`.
    Stages:
      type: object
      properties:
        item:
          allOf:
          - $ref: '#/components/schemas/ListOfStage'
          description: The current page of elements from this collection.
      description: A list of Stage resources that are associated with the ApiKey resource.
    StatusCode:
      type: string
      pattern: ^[1-5]\d\d$
    String:
      type: string
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of a resource that can be tagged.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
            The tag key can be up to 128 characters and must not start with `aws:`.
            The tag value can be up to 256 characters.
      required:
      - resourceArn
      - tags
      description: Adds or updates a tag on a given resource.
    Tags:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: The collection of tags. Each tag element is associated with a given
        resource.
    Template:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Apache Velocity Template Language (VTL) template content
            used for the template resource.
      description: Represents a mapping template used to transform a payload.
    TestInvokeAuthorizerRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a test invoke authorizer request's Authorizer ID.
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of headers to simulate an incoming invocation
            request. This is where the incoming authorization token, or identity source,
            should be specified.
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          description: The headers as a map from string to list of values to simulate
            an incoming invocation request. This is where the incoming authorization
            token, or identity source, may be specified.
        pathWithQueryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URI path, including query string, of the simulated invocation
            request. Use this to specify path parameters and query string parameters.
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The simulated request body of an incoming invocation request.
        stageVariables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of stage variables to simulate an invocation
            on a deployed Stage.
        additionalContext:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of additional context variables.
      required:
      - restApiId
      - authorizerId
      description: Make a request to simulate the invocation of an Authorizer.
    TestInvokeAuthorizerResponse:
      type: object
      properties:
        clientStatus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The HTTP status code that the client would have received. Value
            is 0 if the authorizer succeeded.
        log:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API Gateway execution log for the test authorizer request.
        latency:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The execution latency, in ms, of the test authorizer request.
        principalId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The principal identity returned by the Authorizer
        policy:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The JSON policy document returned by the Authorizer
        authorization:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          description: The authorization response.
        claims:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The open identity claims, with any supported custom attributes,
            returned from the Cognito Your User Pool configured for the API.
      description: Represents the response of the test invoke request for a custom
        Authorizer
    TestInvokeMethodRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a test invoke method request's resource ID.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies a test invoke method request's HTTP method.
        pathWithQueryString:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The URI path, including query string, of the simulated invocation
            request. Use this to specify path parameters and query string parameters.
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The simulated request body of an incoming invocation request.
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of headers to simulate an incoming invocation
            request.
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          description: The headers as a map from string to list of values to simulate
            an incoming invocation request.
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A ClientCertificate identifier to use in the test invocation.
            API Gateway will use the certificate when making the HTTPS request to
            the defined back-end endpoint.
        stageVariables:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: A key-value map of stage variables to simulate an invocation
            on a deployed Stage.
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Make a request to simulate the invocation of a Method.
    TestInvokeMethodResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The HTTP status code.
        body:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The body of the HTTP response.
        headers:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The headers of the HTTP response.
        multiValueHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToList'
          description: The headers of the HTTP response as a map from string to list
            of values.
        log:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The API Gateway execution log for the test invoke request.
        latency:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The execution latency, in ms, of the test invoke request.
      description: Represents the response of the test invoke request in the HTTP
        method.
    ThrottleSettings:
      type: object
      properties:
        burstLimit:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The API target request burst rate limit. This allows more requests
            through for a period of time than the target rate limit.
        rateLimit:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The API target request rate limit.
      description: The API request rate limits.
    Timestamp:
      type: string
      format: date-time
    TlsConfig:
      type: object
      properties:
        insecureSkipVerification:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Specifies whether or not API Gateway skips verification that
            the certificate for an integration endpoint is issued by a supported certificate
            authority. This isn’t recommended, but it enables you to use certificates
            that are signed by private certificate authorities, or certificates that
            are self-signed. If enabled, API Gateway still performs basic certificate
            validation, which includes checking the certificate''s expiration date,
            hostname, and presence of a root certificate authority. Supported only
            for `HTTP` and `HTTP_PROXY` integrations.


            Enabling `insecureSkipVerification` isn''t recommended, especially for
            integrations with public HTTPS endpoints. If you enable `insecureSkipVerification`,
            you increase the risk of man-in-the-middle attacks.'
      description: Specifies the TLS configuration for an integration.
    TooManyRequestsException:
      type: object
      properties:
        retryAfterSeconds:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The request has reached its throttling limit. Retry after the specified
        time period.
    UnauthorizedCacheControlHeaderStrategy:
      type: string
      enum:
      - FAIL_WITH_403
      - SUCCEED_WITH_RESPONSE_HEADER
      - SUCCEED_WITHOUT_RESPONSE_HEADER
    UnauthorizedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request is denied because the caller has insufficient permissions.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of a resource that can be tagged.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The Tag keys to delete.
      required:
      - resourceArn
      - tagKeys
      description: Removes a tag from a given resource.
    UpdateAccountRequest:
      type: object
      properties:
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      description: Requests API Gateway to change information about the current Account
        resource.
    UpdateApiKeyRequest:
      type: object
      properties:
        apiKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ApiKey resource to be updated.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - apiKey
      description: A request to change information about an ApiKey resource.
    UpdateAuthorizerRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        authorizerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Authorizer resource.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - authorizerId
      description: Request to update an existing Authorizer resource.
    UpdateBasePathMappingRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The domain name of the BasePathMapping resource to change.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        basePath:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The base path of the BasePathMapping resource to change.


            To specify an empty base path, set this parameter to `''(none)''`.'
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - domainName
      - basePath
      description: A request to change information about the BasePathMapping resource.
    UpdateClientCertificateRequest:
      type: object
      properties:
        clientCertificateId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the ClientCertificate resource to be updated.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - clientCertificateId
      description: A request to change information about an ClientCertificate resource.
    UpdateDeploymentRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        deploymentId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The replacement identifier for the Deployment resource to change
            information about.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - deploymentId
      description: Requests API Gateway to change information about a Deployment resource.
    UpdateDocumentationPartRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationPartId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the to-be-updated documentation part.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - documentationPartId
      description: Updates an existing documentation part of a given API.
    UpdateDocumentationVersionRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        documentationVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version identifier of the to-be-updated documentation version.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - documentationVersion
      description: Updates an existing documentation version of an API.
    UpdateDomainNameRequest:
      type: object
      properties:
        domainName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the DomainName resource to be changed.
        domainNameId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the domain name resource. Supported only
            for private custom domain names.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - domainName
      description: A request to change information about the DomainName resource.
    UpdateGatewayResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        responseType:
          allOf:
          - $ref: '#/components/schemas/GatewayResponseType'
          description: The response type of the associated GatewayResponse.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - responseType
      description: Updates a GatewayResponse of a specified response type on the given
        RestApi.
    UpdateIntegrationRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Represents an update integration request's resource identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Represents an update integration request's HTTP method.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Represents an update integration request.
    UpdateIntegrationResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies an update integration response request's resource
            identifier.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies an update integration response request's HTTP method.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: Specifies an update integration response request's status code.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: Represents an update integration response request.
    UpdateMethodRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the Method resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - resourceId
      - httpMethod
      description: Request to update an existing Method resource.
    UpdateMethodResponseRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Resource identifier for the MethodResponse resource.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The HTTP verb of the Method resource.
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The status code for the MethodResponse resource.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - resourceId
      - httpMethod
      - statusCode
      description: A request to update an existing MethodResponse resource.
    UpdateModelRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        modelName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the model to update.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - modelName
      description: Request to update an existing model in an existing RestApi resource.
    UpdateRequestValidatorRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        requestValidatorId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of RequestValidator to be updated.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - requestValidatorId
      description: Updates a RequestValidator of a given RestApi.
    UpdateResourceRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the Resource resource.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - resourceId
      description: Request to change information about a Resource resource.
    UpdateRestApiRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      description: Request to update an existing RestApi resource in your collection.
    UpdateStageRequest:
      type: object
      properties:
        restApiId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The string identifier of the associated RestApi.
        stageName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the Stage resource to change information about.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - restApiId
      - stageName
      description: Requests API Gateway to change information about a Stage resource.
    UpdateUsagePlanRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the to-be-updated usage plan.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - usagePlanId
      description: The PATCH request to update a usage plan of a given plan Id.
    UpdateUsageRequest:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of the usage plan associated with the usage data.
        keyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the API key associated with the usage plan
            in which a temporary extension is granted to the remaining quota.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - usagePlanId
      - keyId
      description: The PATCH request to grant a temporary extension to the remaining
        quota of a usage plan associated with a specified API key.
    UpdateVpcLinkRequest:
      type: object
      properties:
        vpcLinkId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the VpcLink. It is used in an Integration
            to reference this VpcLink.
        patchOperations:
          allOf:
          - $ref: '#/components/schemas/ListOfPatchOperation'
          description: For more information about supported patch operations, see
            [Patch Operations](https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html).
      required:
      - vpcLinkId
      description: Updates an existing VpcLink of a specified identifier.
    Usage:
      type: object
      properties:
        usagePlanId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The plan Id associated with this usage data.
        startDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The starting date of the usage data.
        endDate:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ending date of the usage data.
        items:
          allOf:
          - $ref: '#/components/schemas/MapOfKeyUsages'
          description: 'The usage data, as daily logs of used and remaining quotas,
            over the specified time interval indexed over the API keys in a usage
            plan. For example, `{..., "values" : { "{api_key}" : [ [0, 100], [10,
            90], [100, 10]]}`, where `{api_key}` stands for an API key value and the
            daily log entry is of the format `[used quota, remaining quota]`.'
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents the usage data of a usage plan.
    UsagePlan:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a UsagePlan resource.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a usage plan.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of a usage plan.
        apiStages:
          allOf:
          - $ref: '#/components/schemas/ListOfApiStage'
          description: The associated API stages of a usage plan.
        throttle:
          allOf:
          - $ref: '#/components/schemas/ThrottleSettings'
          description: A map containing method level throttling information for API
            stage in a usage plan.
        quota:
          allOf:
          - $ref: '#/components/schemas/QuotaSettings'
          description: The target maximum number of permitted requests per a given
            unit time interval.
        productCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Web Services Marketplace product identifier to associate
            with the usage plan as a SaaS product on the Amazon Web Services Marketplace.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: Represents a usage plan used to specify who can assess associated
        API stages. Optionally, target request rate and quota limits can be set. In
        some cases clients can exceed the targets that you set. Don’t rely on usage
        plans to control costs. Consider using [Amazon Web Services Budgets](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html)
        to monitor costs and [WAF](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html)
        to manage API requests.
    UsagePlanKey:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Id of a usage plan key.
        type:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of a usage plan key. Currently, the valid key type
            is `API_KEY`.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value of a usage plan key.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of a usage plan key.
      description: Represents a usage plan key to identify a plan customer.
    UsagePlanKeys:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfUsagePlanKey'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents the collection of usage plan keys added to usage plans
        for the associated API keys and, possibly, other types of keys.
    UsagePlans:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfUsagePlan'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: Represents a collection of usage plans for an AWS account.
    VpcLink:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the VpcLink. It is used in an Integration
            to reference this VpcLink.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name used to label and identify the VPC link.
        description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the VPC link.
        targetArns:
          allOf:
          - $ref: '#/components/schemas/ListOfString'
          description: The ARN of the network load balancer of the VPC targeted by
            the VPC link. The network load balancer must be owned by the same Amazon
            Web Services account of the API owner.
        status:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          description: The status of the VPC link. The valid values are `AVAILABLE`,
            `PENDING`, `DELETING`, or `FAILED`. Deploying an API will wait if the
            status is `PENDING` and will fail if the status is `DELETING`.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A description about the VPC link status.
        tags:
          allOf:
          - $ref: '#/components/schemas/MapOfStringToString'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      description: An API Gateway VPC link for a RestApi to access resources in an
        Amazon Virtual Private Cloud (VPC).
    VpcLinkStatus:
      type: string
      enum:
      - AVAILABLE
      - PENDING
      - DELETING
      - FAILED
    VpcLinks:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/ListOfVpcLink'
          description: The current page of elements from this collection.
        position:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current pagination position in the paged result set.
      description: The collection of VPC links under the caller's account in a region.
