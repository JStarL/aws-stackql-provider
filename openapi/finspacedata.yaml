openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: finspace_data
  x-aws-serviceName: finspacedata
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-07-13'
  title: FinSpace Public API
  description: |-
    The FinSpace APIs let you take actions inside the FinSpace.
servers:
- description: The FinSpace Public API regional endpoint
  url: https://finspace-api.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /permission-group/{permissionGroupId}/users/{userId}:
    post:
      operationId: AssociateUserToPermissionGroup
      description: |-
        Adds a user to a permission group to grant permissions for actions a user can perform in FinSpace.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DisassociateUserFromPermissionGroup
      description: |-
        Removes a user from a permission group.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasets/{datasetId}/changesetsv2:
    post:
      operationId: CreateChangeset
      description: |-
        Creates a new Changeset in a FinSpace Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                changeType:
                  $ref: '#/components/schemas/ChangeType'
                sourceParams:
                  $ref: '#/components/schemas/SourceParams'
                formatParams:
                  $ref: '#/components/schemas/FormatParams'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListChangesets
      description: |-
        Lists the FinSpace Changesets for a Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasets/{datasetId}/dataviewsv2:
    post:
      operationId: CreateDataView
      description: |-
        Creates a Dataview for a Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                autoUpdate:
                  $ref: '#/components/schemas/Boolean'
                sortColumns:
                  $ref: '#/components/schemas/SortColumnList'
                partitionColumns:
                  $ref: '#/components/schemas/PartitionColumnList'
                asOfTimestamp:
                  $ref: '#/components/schemas/TimestampEpoch'
                destinationTypeParams:
                  $ref: '#/components/schemas/DataViewDestinationTypeParams'
      responses:
        '200': {}
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListDataViews
      description: |-
        Lists all available Dataviews for a Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasetsv2:
    post:
      operationId: CreateDataset
      description: |-
        Creates a new FinSpace Dataset.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                datasetTitle:
                  $ref: '#/components/schemas/DatasetTitle'
                kind:
                  $ref: '#/components/schemas/DatasetKind'
                datasetDescription:
                  $ref: '#/components/schemas/DatasetDescription'
                ownerInfo:
                  $ref: '#/components/schemas/DatasetOwnerInfo'
                permissionGroupParams:
                  $ref: '#/components/schemas/PermissionGroupParams'
                alias:
                  $ref: '#/components/schemas/AliasString'
                schemaDefinition:
                  $ref: '#/components/schemas/SchemaUnion'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListDatasets
      description: |-
        Lists all of the active Datasets that a user has access to.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /permission-group:
    post:
      operationId: CreatePermissionGroup
      description: |-
        Creates a group of permissions for various actions that a user can perform in FinSpace.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/PermissionGroupName'
                description:
                  $ref: '#/components/schemas/PermissionGroupDescription'
                applicationPermissions:
                  $ref: '#/components/schemas/ApplicationPermissionList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListPermissionGroups
      description: |-
        Lists all available permission groups in FinSpace.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user:
    post:
      operationId: CreateUser
      description: |-
        Creates a new user in FinSpace.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  $ref: '#/components/schemas/Email'
                type:
                  $ref: '#/components/schemas/UserType'
                firstName:
                  $ref: '#/components/schemas/FirstName'
                lastName:
                  $ref: '#/components/schemas/LastName'
                apiAccess:
                  $ref: '#/components/schemas/ApiAccess'
                apiAccessPrincipalArn:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListUsers
      description: |-
        Lists all available users in FinSpace.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasetsv2/{datasetId}:
    delete:
      operationId: DeleteDataset
      description: |-
        Deletes a FinSpace Dataset.
      parameters:
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetDataset
      description: |-
        Returns information about a Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StringValueLength1to255'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateDataset
      description: |-
        Updates a FinSpace Dataset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                datasetTitle:
                  $ref: '#/components/schemas/DatasetTitle'
                kind:
                  $ref: '#/components/schemas/DatasetKind'
                datasetDescription:
                  $ref: '#/components/schemas/DatasetDescription'
                alias:
                  $ref: '#/components/schemas/AliasString'
                schemaDefinition:
                  $ref: '#/components/schemas/SchemaUnion'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /permission-group/{permissionGroupId}:
    delete:
      operationId: DeletePermissionGroup
      description: |-
        Deletes a permission group. This action is irreversible.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetPermissionGroup
      description: |-
        Retrieves the details of a specific permission group.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdatePermissionGroup
      description: |-
        Modifies the details of a permission group. You cannot modify a `permissionGroupID`.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/PermissionGroupName'
                description:
                  $ref: '#/components/schemas/PermissionGroupDescription'
                applicationPermissions:
                  $ref: '#/components/schemas/ApplicationPermissionList'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user/{userId}/disable:
    post:
      operationId: DisableUser
      description: |-
        Denies access to the FinSpace web application and API for the specified user.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user/{userId}/enable:
    post:
      operationId: EnableUser
      description: |-
        Allows the specified user to access the FinSpace web application and API.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /datasets/{datasetId}/changesetsv2/{changesetId}:
    get:
      operationId: GetChangeset
      description: |-
        Get information about a Changeset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      - name: changesetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChangesetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateChangeset
      description: |-
        Updates a FinSpace Changeset.
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      - name: changesetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChangesetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sourceParams:
                  $ref: '#/components/schemas/SourceParams'
                formatParams:
                  $ref: '#/components/schemas/FormatParams'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasets/{datasetId}/dataviewsv2/{dataViewId}:
    get:
      operationId: GetDataView
      description: |-
        Gets information about a Dataview.
      parameters:
      - name: dataViewId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataViewId'
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      responses:
        '200': {}
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /datasets/{datasetId}/dataviewsv2/{dataViewId}/external-access-details:
    post:
      operationId: GetExternalDataViewAccessDetails
      description: |-
        Returns the credentials to access the external Dataview from an S3 location. To call this API:

          * You must retrieve the programmatic credentials.

          * You must be a member of a FinSpace user group, where the dataset that you want to access has `Read Dataset Data` permissions.
      parameters:
      - name: dataViewId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataViewId'
      - name: datasetId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DatasetId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /credentials/programmatic:
    get:
      operationId: GetProgrammaticAccessCredentials
      description: |-
        Request programmatic credentials to use with FinSpace SDK. For more information, see [Step 2. Access credentials programmatically using IAM access key id and secret access key](https://docs.aws.amazon.com/finspace/latest/data-api/fs-using-the-finspace-api.html#accessing-credentials).
      parameters:
      - name: durationInMinutes
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SessionDuration'
      - name: environmentId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/IdType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user/{userId}:
    get:
      operationId: GetUser
      description: |-
        Retrieves details for a specific user.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateUser
      description: |-
        Modifies the details of the specified user. You cannot update the `userId` for a user.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/UserType'
                firstName:
                  $ref: '#/components/schemas/FirstName'
                lastName:
                  $ref: '#/components/schemas/LastName'
                apiAccess:
                  $ref: '#/components/schemas/ApiAccess'
                apiAccessPrincipalArn:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workingLocationV1:
    post:
      operationId: GetWorkingLocation
      description: |-
        A temporary Amazon S3 location, where you can copy your files from a source location to stage or use as a scratch space in FinSpace notebook.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                locationType:
                  $ref: '#/components/schemas/locationType'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user/{userId}/permission-groups:
    get:
      operationId: ListPermissionGroupsByUser
      description: |-
        Lists all the permission groups that are associated with a specific user.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /permission-group/{permissionGroupId}/users:
    get:
      operationId: ListUsersByPermissionGroup
      description: |-
        Lists details of all the users in a specific permission group.
      parameters:
      - name: permissionGroupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PermissionGroupId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResultLimit'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /user/{userId}/password:
    post:
      operationId: ResetUserPassword
      description: |-
        Resets the password for a specified user ID and generates a temporary one. Only a superuser can reset password for other users. Resetting the password immediately invalidates the previous password associated with the user.
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request conflicts with an existing resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            One or more resources can't be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: You do not have sufficient access to perform this action.
    AccessKeyId:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 1
      maxLength: 255
    AliasString:
      type: string
      pattern: ^alias\/\S+$
      minLength: 1
      maxLength: 255
    ApiAccess:
      type: string
      enum:
      - ENABLED
      - DISABLED
    ApplicationPermission:
      type: string
      enum:
      - CreateDataset
      - ManageClusters
      - ManageUsersAndGroups
      - ManageAttributeSets
      - ViewAuditData
      - AccessNotebooks
      - GetTemporaryCredentials
    ApplicationPermissionList:
      type: array
      items:
        $ref: '#/components/schemas/ApplicationPermission'
    AssociateUserToPermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - permissionGroupId
      - userId
    AssociateUserToPermissionGroupResponse:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The returned status code of the response.
    AwsCredentials:
      type: object
      properties:
        accessKeyId:
          allOf:
          - $ref: '#/components/schemas/AccessKeyId'
          description: The unique identifier for the security credentials.
        secretAccessKey:
          allOf:
          - $ref: '#/components/schemas/SecretAccessKey'
          description: The secret access key that can be used to sign requests.
        sessionToken:
          allOf:
          - $ref: '#/components/schemas/SessionToken'
          description: The token that users must pass to use the credentials.
        expiration:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The Epoch time when the current credentials expire.
      description: The credentials required to access the external Dataview from the
        S3 location.
    Boolean:
      type: boolean
      default: false
      description: Common Boolean data type
    ChangeType:
      type: string
      enum:
      - REPLACE
      - APPEND
      - MODIFY
      description: Indicates how the given change will be applied to the dataset.
    ChangesetArn:
      type: string
    ChangesetErrorInfo:
      type: object
      properties:
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The text of the error message.
        errorCategory:
          allOf:
          - $ref: '#/components/schemas/ErrorCategory'
          description: "The category of the error.\n\n  * `VALIDATION` – The inputs\
            \ to this request are invalid.\n\n  * `SERVICE_QUOTA_EXCEEDED` – Service\
            \ quotas have been exceeded. Please contact AWS support to increase quotas.\n\
            \n  * `ACCESS_DENIED` – Missing required permission to perform this request.\n\
            \n  * `RESOURCE_NOT_FOUND` – One or more inputs to this request were not\
            \ found.\n\n  * `THROTTLING` – The system temporarily lacks sufficient\
            \ resources to process the request.\n\n  * `INTERNAL_SERVICE_EXCEPTION`\
            \ – An internal service error has occurred.\n\n  * `CANCELLED` – Cancelled.\n\
            \n  * `USER_RECOVERABLE` – A user recoverable error has occurred."
      description: The structure with error messages.
    ChangesetId:
      type: string
      minLength: 1
      maxLength: 26
    ChangesetList:
      type: array
      items:
        $ref: '#/components/schemas/ChangesetSummary'
      description: List of Changeset Summaries
    ChangesetSummary:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier for a Changeset.
        changesetArn:
          allOf:
          - $ref: '#/components/schemas/ChangesetArn'
          description: The ARN identifier of the Changeset.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset in which the
            Changeset is created.
        changeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: "Type that indicates how a Changeset is applied to a Dataset.\n\
            \n  * `REPLACE` – Changeset is considered as a replacement to all prior\
            \ loaded Changesets.\n\n  * `APPEND` – Changeset is considered as an addition\
            \ to the end of all prior loaded Changesets.\n\n  * `MODIFY` – Changeset\
            \ is considered as a replacement to a specific prior ingested Changeset."
        sourceParams:
          allOf:
          - $ref: '#/components/schemas/SourceParams'
          description: Options that define the location of the data being ingested.
        formatParams:
          allOf:
          - $ref: '#/components/schemas/FormatParams'
          description: Options that define the structure of the source file(s).
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Changeset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/IngestionStatus'
          description: "Status of the Changeset ingestion.\n\n  * `PENDING` – Changeset\
            \ is pending creation.\n\n  * `FAILED` – Changeset creation has failed.\n\
            \n  * `SUCCESS` – Changeset creation has succeeded.\n\n  * `RUNNING` –\
            \ Changeset creation is running.\n\n  * `STOP_REQUESTED` – User requested\
            \ Changeset creation to stop."
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/ChangesetErrorInfo'
          description: The structure with error messages.
        activeUntilTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Time until which the Changeset is active. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        activeFromTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Beginning time from which the Changeset is active. The value
            is determined as epoch time in milliseconds. For example, the value for
            Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        updatesChangesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the Changeset that is updated.
        updatedByChangesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the updated Changeset.
      description: A Changeset is unit of data in a Dataset.
    ClientToken:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 128
    ColumnDataType:
      type: string
      enum:
      - STRING
      - CHAR
      - INTEGER
      - TINYINT
      - SMALLINT
      - BIGINT
      - FLOAT
      - DOUBLE
      - DATE
      - DATETIME
      - BOOLEAN
      - BINARY
      description: Data type of a column.
    ColumnDefinition:
      type: object
      properties:
        dataType:
          allOf:
          - $ref: '#/components/schemas/ColumnDataType'
          description: "Data type of a column.\n\n  * `STRING` – A String data type.\n\
            \n`CHAR` – A char data type.\n\n`INTEGER` – An integer data type.\n\n\
            `TINYINT` – A tinyint data type.\n\n`SMALLINT` – A smallint data type.\n\
            \n`BIGINT` – A bigint data type.\n\n`FLOAT` – A float data type.\n\n`DOUBLE`\
            \ – A double data type.\n\n`DATE` – A date data type.\n\n`DATETIME` –\
            \ A datetime data type.\n\n`BOOLEAN` – A boolean data type.\n\n`BINARY`\
            \ – A binary data type."
        columnName:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of a column.
        columnDescription:
          allOf:
          - $ref: '#/components/schemas/ColumnDescription'
          description: Description for a column.
      description: The definition of a column in a tabular Dataset.
    ColumnDescription:
      type: string
      pattern: ^[\s\S]*$
      minLength: 0
      maxLength: 512
    ColumnList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnDefinition'
      description: List of Column Definitions
    ColumnName:
      type: string
      pattern: \S
      minLength: 0
      maxLength: 126
    ColumnNameList:
      type: array
      items:
        $ref: '#/components/schemas/ColumnName'
      description: List of Column Names
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
        reason:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The request conflicts with an existing resource.
    CreateChangesetRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset where the Changeset
            will be created.
        changeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: "The option to indicate how a Changeset will be applied to\
            \ a Dataset.\n\n  * `REPLACE` – Changeset will be considered as a replacement\
            \ to all prior loaded Changesets.\n\n  * `APPEND` – Changeset will be\
            \ considered as an addition to the end of all prior loaded Changesets.\n\
            \n  * `MODIFY` – Changeset is considered as a replacement to a specific\
            \ prior ingested Changeset."
        sourceParams:
          allOf:
          - $ref: '#/components/schemas/SourceParams'
          description: 'Options that define the location of the data being ingested
            (`s3SourcePath`) and the source of the changeset (`sourceType`).


            Both `s3SourcePath` and `sourceType` are required attributes.


            Here is an example of how you could specify the `sourceParams`:


            ` "sourceParams": { "s3SourcePath": "s3://finspace-landing-us-east-2-bk7gcfvitndqa6ebnvys4d/scratch/wr5hh8pwkpqqkxa4sxrmcw/ingestion/equity.csv",
            "sourceType": "S3" } `


            The S3 path that you specify must allow the FinSpace role access. To do
            that, you first need to configure the IAM policy on S3 bucket. For more
            information, see [Loading data from an Amazon S3 Bucket using the FinSpace
            API](https://docs.aws.amazon.com/finspace/latest/data-api/fs-using-the-finspace-api.html#access-s3-buckets)
            section.'
        formatParams:
          allOf:
          - $ref: '#/components/schemas/FormatParams'
          description: "Options that define the structure of the source file(s) including\
            \ the format type (`formatType`), header row (`withHeader`), data separation\
            \ character (`separator`) and the type of compression (`compression`).\n\
            \n`formatType` is a required attribute and can have the following values:\n\
            \n  * `PARQUET` – Parquet source file format.\n\n  * `CSV` – CSV source\
            \ file format.\n\n  * `JSON` – JSON source file format.\n\n  * `XML` –\
            \ XML source file format.\n\nHere is an example of how you could specify\
            \ the `formatParams`:\n\n` \"formatParams\": { \"formatType\": \"CSV\"\
            , \"withHeader\": \"true\", \"separator\": \",\", \"compression\":\"None\"\
            \ } `\n\nNote that if you only provide `formatType` as `CSV`, the rest\
            \ of the attributes will automatically default to CSV values as following:\n\
            \n` { \"withHeader\": \"true\", \"separator\": \",\" } `\n\nFor more information\
            \ about supported file formats, see [Supported Data Types and File Formats](https://docs.aws.amazon.com/finspace/latest/userguide/supported-data-types.html)\
            \ in the FinSpace User Guide."
      required:
      - datasetId
      - changeType
      - sourceParams
      - formatParams
      description: The request for a CreateChangeset operation.
    CreateChangesetResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset where the Changeset
            is created.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the Changeset that is created.
      description: The response from a CreateChangeset operation.
    CreateDataViewRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique Dataset identifier that is used to create a Dataview.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Flag to indicate Dataview should be updated automatically.
        sortColumns:
          allOf:
          - $ref: '#/components/schemas/SortColumnList'
          description: Columns to be used for sorting the data.
        partitionColumns:
          allOf:
          - $ref: '#/components/schemas/PartitionColumnList'
          description: Ordered set of column names used to partition data.
        asOfTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Beginning time to use for the Dataview. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        destinationTypeParams:
          allOf:
          - $ref: '#/components/schemas/DataViewDestinationTypeParams'
          description: Options that define the destination type for the Dataview.
      required:
      - datasetId
      - destinationTypeParams
      description: Request for creating a data view.
    CreateDataViewResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier of the Dataset used for the Dataview.
        dataViewId:
          allOf:
          - $ref: '#/components/schemas/DataViewId'
          description: The unique identifier for the created Dataview.
      description: Response for creating a data view.
    CreateDatasetRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetTitle:
          allOf:
          - $ref: '#/components/schemas/DatasetTitle'
          description: Display title for a FinSpace Dataset.
        kind:
          allOf:
          - $ref: '#/components/schemas/DatasetKind'
          description: "The format in which Dataset data is structured.\n\n  * `TABULAR`\
            \ – Data is structured in a tabular format.\n\n  * `NON_TABULAR` – Data\
            \ is structured in a non-tabular format."
        datasetDescription:
          allOf:
          - $ref: '#/components/schemas/DatasetDescription'
          description: Description of a Dataset.
        ownerInfo:
          allOf:
          - $ref: '#/components/schemas/DatasetOwnerInfo'
          description: Contact information for a Dataset owner.
        permissionGroupParams:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupParams'
          description: Permission group parameters for Dataset permissions.
        alias:
          allOf:
          - $ref: '#/components/schemas/AliasString'
          description: The unique resource identifier for a Dataset.
        schemaDefinition:
          allOf:
          - $ref: '#/components/schemas/SchemaUnion'
          description: Definition for a schema on a tabular Dataset.
      required:
      - datasetTitle
      - kind
      - permissionGroupParams
      description: The request for a CreateDataset operation
    CreateDatasetResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the created Dataset.
      description: The response from a CreateDataset operation
    CreatePermissionGroupRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupName'
          description: The name of the permission group.
        description:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupDescription'
          description: A brief description for the permission group.
        applicationPermissions:
          allOf:
          - $ref: '#/components/schemas/ApplicationPermissionList'
          description: "The option to indicate FinSpace application permissions that\
            \ are granted to a specific group.\n\nWhen assigning application permissions,\
            \ be aware that the permission `ManageUsersAndGroups` allows users to\
            \ grant themselves or others access to any functionality in their FinSpace\
            \ environment's application. It should only be granted to trusted users.\n\
            \n  * `CreateDataset` – Group members can create new datasets.\n\n  *\
            \ `ManageClusters` – Group members can manage Apache Spark clusters from\
            \ FinSpace notebooks.\n\n  * `ManageUsersAndGroups` – Group members can\
            \ manage users and permission groups. This is a privileged permission\
            \ that allows users to grant themselves or others access to any functionality\
            \ in the application. It should only be granted to trusted users.\n\n\
            \  * `ManageAttributeSets` – Group members can manage attribute sets.\n\
            \n  * `ViewAuditData` – Group members can view audit data.\n\n  * `AccessNotebooks`\
            \ – Group members will have access to FinSpace notebooks.\n\n  * `GetTemporaryCredentials`\
            \ – Group members can get temporary API credentials."
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - name
      - applicationPermissions
    CreatePermissionGroupResponse:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
    CreateUserRequest:
      type: object
      properties:
        emailAddress:
          allOf:
          - $ref: '#/components/schemas/Email'
          description: The email address of the user that you want to register. The
            email address serves as a uniquer identifier for each user and cannot
            be changed after it's created.
        type:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: "The option to indicate the type of user. Use one of the following\
            \ options to specify this parameter:\n\n  * `SUPER_USER` – A user with\
            \ permission to all the functionality and data in FinSpace.\n\n  * `APP_USER`\
            \ – A user with specific permissions in FinSpace. The users are assigned\
            \ permissions by adding them to a permission group."
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name of the user that you want to register.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name of the user that you want to register.
        apiAccess:
          allOf:
          - $ref: '#/components/schemas/ApiAccess'
          description: "The option to indicate whether the user can use the `GetProgrammaticAccessCredentials`\
            \ API to obtain credentials that can then be used to access other FinSpace\
            \ Data API operations.\n\n  * `ENABLED` – The user has permissions to\
            \ use the APIs.\n\n  * `DISABLED` – The user does not have permissions\
            \ to use any APIs."
        apiAccessPrincipalArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN identifier of an AWS user or role that is allowed to
            call the `GetProgrammaticAccessCredentials` API to obtain a credentials
            token for a specific FinSpace user. This must be an IAM role within your
            FinSpace account.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - emailAddress
      - type
    CreateUserResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
    Credentials:
      type: object
      properties:
        accessKeyId:
          allOf:
          - $ref: '#/components/schemas/StringValueLength1to2552'
          description: The access key identifier.
        secretAccessKey:
          allOf:
          - $ref: '#/components/schemas/stringValueMaxLength1000'
          description: The access key.
        sessionToken:
          allOf:
          - $ref: '#/components/schemas/stringValueMaxLength1000'
          description: The session token.
      description: Short term API credentials.
    DataViewArn:
      type: string
    DataViewDestinationType:
      type: string
    DataViewDestinationTypeParams:
      type: object
      properties:
        destinationType:
          allOf:
          - $ref: '#/components/schemas/DataViewDestinationType'
          description: "Destination type for a Dataview.\n\n  * `GLUE_TABLE` – Glue\
            \ table destination type.\n\n  * `S3` – S3 destination type."
        s3DestinationExportFileFormat:
          allOf:
          - $ref: '#/components/schemas/ExportFileFormat'
          description: "Dataview export file format.\n\n  * `PARQUET` – Parquet export\
            \ file format.\n\n  * `DELIMITED_TEXT` – Delimited text export file format."
        s3DestinationExportFileFormatOptions:
          allOf:
          - $ref: '#/components/schemas/S3DestinationFormatOptions'
          description: 'Format Options for S3 Destination type.


            Here is an example of how you could specify the `s3DestinationExportFileFormatOptions`


            ` { "header": "true", "delimiter": ",", "compression": "gzip" }`'
      required:
      - destinationType
      description: Structure for the Dataview destination type parameters.
    DataViewErrorInfo:
      type: object
      properties:
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The text of the error message.
        errorCategory:
          allOf:
          - $ref: '#/components/schemas/ErrorCategory'
          description: "The category of the error.\n\n  * `VALIDATION` – The inputs\
            \ to this request are invalid.\n\n  * `SERVICE_QUOTA_EXCEEDED` – Service\
            \ quotas have been exceeded. Please contact AWS support to increase quotas.\n\
            \n  * `ACCESS_DENIED` – Missing required permission to perform this request.\n\
            \n  * `RESOURCE_NOT_FOUND` – One or more inputs to this request were not\
            \ found.\n\n  * `THROTTLING` – The system temporarily lacks sufficient\
            \ resources to process the request.\n\n  * `INTERNAL_SERVICE_EXCEPTION`\
            \ – An internal service error has occurred.\n\n  * `CANCELLED` – Cancelled.\n\
            \n  * `USER_RECOVERABLE` – A user recoverable error has occurred."
      description: The structure with error messages.
    DataViewId:
      type: string
      minLength: 1
      maxLength: 26
    DataViewList:
      type: array
      items:
        $ref: '#/components/schemas/DataViewSummary'
      description: List of Data Views
    DataViewStatus:
      type: string
      enum:
      - RUNNING
      - STARTING
      - FAILED
      - CANCELLED
      - TIMEOUT
      - SUCCESS
      - PENDING
      - FAILED_CLEANUP_FAILED
      description: Status of a DataView
    DataViewSummary:
      type: object
      properties:
        dataViewId:
          allOf:
          - $ref: '#/components/schemas/DataViewId'
          description: The unique identifier for the Dataview.
        dataViewArn:
          allOf:
          - $ref: '#/components/schemas/DataViewArn'
          description: The ARN identifier of the Dataview.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: Th unique identifier for the Dataview Dataset.
        asOfTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Time range to use for the Dataview. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        partitionColumns:
          allOf:
          - $ref: '#/components/schemas/PartitionColumnList'
          description: Ordered set of column names used to partition data.
        sortColumns:
          allOf:
          - $ref: '#/components/schemas/SortColumnList'
          description: Columns to be used for sorting the data.
        status:
          allOf:
          - $ref: '#/components/schemas/DataViewStatus'
          description: "The status of a Dataview creation.\n\n  * `RUNNING` – Dataview\
            \ creation is running.\n\n  * `STARTING` – Dataview creation is starting.\n\
            \n  * `FAILED` – Dataview creation has failed.\n\n  * `CANCELLED` – Dataview\
            \ creation has been cancelled.\n\n  * `TIMEOUT` – Dataview creation has\
            \ timed out.\n\n  * `SUCCESS` – Dataview creation has succeeded.\n\n \
            \ * `PENDING` – Dataview creation is pending.\n\n  * `FAILED_CLEANUP_FAILED`\
            \ – Dataview creation failed and resource cleanup failed."
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/DataViewErrorInfo'
          description: The structure with error messages.
        destinationTypeProperties:
          allOf:
          - $ref: '#/components/schemas/DataViewDestinationTypeParams'
          description: Information about the Dataview destination.
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The flag to indicate Dataview should be updated automatically.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Dataview was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The last time that a Dataview was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
      description: Structure for the summary of a Dataview.
    Dataset:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: An identifier for a Dataset.
        datasetArn:
          allOf:
          - $ref: '#/components/schemas/DatasetArn'
          description: The ARN identifier of the Dataset.
        datasetTitle:
          allOf:
          - $ref: '#/components/schemas/DatasetTitle'
          description: Display title for a Dataset.
        kind:
          allOf:
          - $ref: '#/components/schemas/DatasetKind'
          description: "The format in which Dataset data is structured.\n\n  * `TABULAR`\
            \ – Data is structured in a tabular format.\n\n  * `NON_TABULAR` – Data\
            \ is structured in a non-tabular format."
        datasetDescription:
          allOf:
          - $ref: '#/components/schemas/DatasetDescription'
          description: Description for a Dataset.
        ownerInfo:
          allOf:
          - $ref: '#/components/schemas/DatasetOwnerInfo'
          description: Contact information for a Dataset owner.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Dataset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The last time that the Dataset was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        schemaDefinition:
          allOf:
          - $ref: '#/components/schemas/SchemaUnion'
          description: Definition for a schema on a tabular Dataset.
        alias:
          allOf:
          - $ref: '#/components/schemas/AliasString'
          description: The unique resource identifier for a Dataset.
      description: The structure for a Dataset.
    DatasetArn:
      type: string
    DatasetDescription:
      type: string
      pattern: ^[\s\S]*$
      minLength: 0
      maxLength: 1000
    DatasetId:
      type: string
      minLength: 1
      maxLength: 26
    DatasetKind:
      type: string
      enum:
      - TABULAR
      - NON_TABULAR
      description: Dataset Kind
    DatasetList:
      type: array
      items:
        $ref: '#/components/schemas/Dataset'
      description: List of Dataset structures
    DatasetOwnerInfo:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/OwnerName'
          description: The name of the Dataset owner.
        phoneNumber:
          allOf:
          - $ref: '#/components/schemas/PhoneNumber'
          description: Phone number for the Dataset owner.
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          description: Email address for the Dataset owner.
      description: A structure for Dataset owner info.
    DatasetStatus:
      type: string
      enum:
      - PENDING
      - FAILED
      - SUCCESS
      - RUNNING
      description: Status of the dataset process returned from scheduler service.
    DatasetTitle:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 255
    DeleteDatasetRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier of the Dataset to be deleted.
      required:
      - datasetId
      description: The request for a DeleteDataset operation.
    DeleteDatasetResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the deleted Dataset.
      description: The response from an DeleteDataset operation
    DeletePermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group that you want
            to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - permissionGroupId
    DeletePermissionGroupResponse:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the deleted permission group.
    DisableUserRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user that you want to deactivate.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - userId
    DisableUserResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the deactivated user.
    DisassociateUserFromPermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - permissionGroupId
      - userId
    DisassociateUserFromPermissionGroupResponse:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/StatusCode'
          description: The returned status code of the response.
    Email:
      type: string
      pattern: ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$
      minLength: 4
      maxLength: 320
    EnableUserRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user that you want to activate.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - userId
    EnableUserResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the active user.
    ErrorCategory:
      type: string
      enum:
      - VALIDATION
      - SERVICE_QUOTA_EXCEEDED
      - ACCESS_DENIED
      - RESOURCE_NOT_FOUND
      - THROTTLING
      - INTERNAL_SERVICE_EXCEPTION
      - CANCELLED
      - USER_RECOVERABLE
      description: Changeset Error Category
    ErrorMessage:
      type: string
      minLength: 0
      maxLength: 1000
    ErrorMessage2:
      type: string
    ExportFileFormat:
      type: string
      enum:
      - PARQUET
      - DELIMITED_TEXT
      description: Data View Export File Format
    FirstName:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 50
    FormatParams:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringMapValue'
      description: Format Parameters of a Changeset
    GetChangesetRequest:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset where the Changeset
            is created.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the Changeset for which to get data.
      required:
      - datasetId
      - changesetId
      description: Request to describe a changeset.
    GetChangesetResponse:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier for a Changeset.
        changesetArn:
          allOf:
          - $ref: '#/components/schemas/ChangesetArn'
          description: The ARN identifier of the Changeset.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset where the Changeset
            is created.
        changeType:
          allOf:
          - $ref: '#/components/schemas/ChangeType'
          description: "Type that indicates how a Changeset is applied to a Dataset.\n\
            \n  * `REPLACE` – Changeset is considered as a replacement to all prior\
            \ loaded Changesets.\n\n  * `APPEND` – Changeset is considered as an addition\
            \ to the end of all prior loaded Changesets.\n\n  * `MODIFY` – Changeset\
            \ is considered as a replacement to a specific prior ingested Changeset."
        sourceParams:
          allOf:
          - $ref: '#/components/schemas/SourceParams'
          description: Options that define the location of the data being ingested.
        formatParams:
          allOf:
          - $ref: '#/components/schemas/FormatParams'
          description: Structure of the source file(s).
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Changeset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        status:
          allOf:
          - $ref: '#/components/schemas/IngestionStatus'
          description: The status of Changeset creation operation.
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/ChangesetErrorInfo'
          description: The structure with error messages.
        activeUntilTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Time until which the Changeset is active. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        activeFromTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Beginning time from which the Changeset is active. The value
            is determined as epoch time in milliseconds. For example, the value for
            Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        updatesChangesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the Changeset that is being updated.
        updatedByChangesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier of the updated Changeset.
      description: The response from a describe changeset operation
    GetDataViewRequest:
      type: object
      properties:
        dataViewId:
          allOf:
          - $ref: '#/components/schemas/DataViewId'
          description: The unique identifier for the Dataview.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the Dataset used in the Dataview.
      required:
      - dataViewId
      - datasetId
      description: Request for retrieving a data view detail. Grouped / accessible
        within a dataset by its dataset id.
    GetDataViewResponse:
      type: object
      properties:
        autoUpdate:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Flag to indicate Dataview should be updated automatically.
        partitionColumns:
          allOf:
          - $ref: '#/components/schemas/PartitionColumnList'
          description: Ordered set of column names used to partition data.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the Dataset used in the Dataview.
        asOfTimestamp:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Time range to use for the Dataview. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        errorInfo:
          allOf:
          - $ref: '#/components/schemas/DataViewErrorInfo'
          description: Information about an error that occurred for the Dataview.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The last time that a Dataview was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Dataview was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        sortColumns:
          allOf:
          - $ref: '#/components/schemas/SortColumnList'
          description: Columns to be used for sorting the data.
        dataViewId:
          allOf:
          - $ref: '#/components/schemas/DataViewId'
          description: The unique identifier for the Dataview.
        dataViewArn:
          allOf:
          - $ref: '#/components/schemas/DataViewArn'
          description: The ARN identifier of the Dataview.
        destinationTypeParams:
          allOf:
          - $ref: '#/components/schemas/DataViewDestinationTypeParams'
          description: Options that define the destination type for the Dataview.
        status:
          allOf:
          - $ref: '#/components/schemas/DataViewStatus'
          description: "The status of a Dataview creation.\n\n  * `RUNNING` – Dataview\
            \ creation is running.\n\n  * `STARTING` – Dataview creation is starting.\n\
            \n  * `FAILED` – Dataview creation has failed.\n\n  * `CANCELLED` – Dataview\
            \ creation has been cancelled.\n\n  * `TIMEOUT` – Dataview creation has\
            \ timed out.\n\n  * `SUCCESS` – Dataview creation has succeeded.\n\n \
            \ * `PENDING` – Dataview creation is pending.\n\n  * `FAILED_CLEANUP_FAILED`\
            \ – Dataview creation failed and resource cleanup failed."
      description: Response from retrieving a dataview, which includes details on
        the target database and table name
    GetDatasetRequest:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/StringValueLength1to255'
          description: The unique identifier for a Dataset.
      required:
      - datasetId
      description: Request for the GetDataset operation.
    GetDatasetResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for a Dataset.
        datasetArn:
          allOf:
          - $ref: '#/components/schemas/DatasetArn'
          description: The ARN identifier of the Dataset.
        datasetTitle:
          allOf:
          - $ref: '#/components/schemas/DatasetTitle'
          description: Display title for a Dataset.
        kind:
          allOf:
          - $ref: '#/components/schemas/DatasetKind'
          description: "The format in which Dataset data is structured.\n\n  * `TABULAR`\
            \ – Data is structured in a tabular format.\n\n  * `NON_TABULAR` – Data\
            \ is structured in a non-tabular format."
        datasetDescription:
          allOf:
          - $ref: '#/components/schemas/DatasetDescription'
          description: A description of the Dataset.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the Dataset was created in FinSpace.
            The value is determined as epoch time in milliseconds. For example, the
            value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The last time that the Dataset was modified. The value is determined
            as epoch time in milliseconds. For example, the value for Monday, November
            1, 2021 12:00:00 PM UTC is specified as 1635768000000.
        schemaDefinition:
          allOf:
          - $ref: '#/components/schemas/SchemaUnion'
          description: Definition for a schema on a tabular Dataset.
        alias:
          allOf:
          - $ref: '#/components/schemas/AliasString'
          description: The unique resource identifier for a Dataset.
        status:
          allOf:
          - $ref: '#/components/schemas/DatasetStatus'
          description: "Status of the Dataset creation.\n\n  * `PENDING` – Dataset\
            \ is pending creation.\n\n  * `FAILED` – Dataset creation has failed.\n\
            \n  * `SUCCESS` – Dataset creation has succeeded.\n\n  * `RUNNING` – Dataset\
            \ creation is running."
      description: Response for the GetDataset operation
    GetExternalDataViewAccessDetailsRequest:
      type: object
      properties:
        dataViewId:
          allOf:
          - $ref: '#/components/schemas/DataViewId'
          description: The unique identifier for the Dataview that you want to access.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the Dataset.
      required:
      - dataViewId
      - datasetId
    GetExternalDataViewAccessDetailsResponse:
      type: object
      properties:
        credentials:
          allOf:
          - $ref: '#/components/schemas/AwsCredentials'
          description: The credentials required to access the external Dataview from
            the S3 location.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The location where the external Dataview is stored.
    GetPermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
      required:
      - permissionGroupId
    GetPermissionGroupResponse:
      type: object
      properties:
        permissionGroup:
          $ref: '#/components/schemas/PermissionGroup'
    GetProgrammaticAccessCredentialsRequest:
      type: object
      properties:
        durationInMinutes:
          allOf:
          - $ref: '#/components/schemas/SessionDuration'
          description: The time duration in which the credentials remain valid.
        environmentId:
          allOf:
          - $ref: '#/components/schemas/IdType'
          description: The FinSpace environment identifier.
      required:
      - environmentId
      description: Request for GetProgrammaticAccessCredentials operation
    GetProgrammaticAccessCredentialsResponse:
      type: object
      properties:
        credentials:
          allOf:
          - $ref: '#/components/schemas/Credentials'
          description: Returns the programmatic credentials.
        durationInMinutes:
          allOf:
          - $ref: '#/components/schemas/SessionDuration'
          description: Returns the duration in which the credentials will remain valid.
      description: Response for GetProgrammaticAccessCredentials operation
    GetUserRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier of the user to get data for.
      required:
      - userId
    GetUserResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user that is retrieved.
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: "The current status of the user.\n\n  * `CREATING` – The creation\
            \ is in progress.\n\n  * `ENABLED` – The user is created and is currently\
            \ active.\n\n  * `DISABLED` – The user is currently inactive."
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name of the user.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name of the user.
        emailAddress:
          allOf:
          - $ref: '#/components/schemas/Email'
          description: The email address that is associated with the user.
        type:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: "Indicates the type of user.\n\n  * `SUPER_USER` – A user with\
            \ permission to all the functionality and data in FinSpace.\n\n  * `APP_USER`\
            \ – A user with specific permissions in FinSpace. The users are assigned\
            \ permissions by adding them to a permission group."
        apiAccess:
          allOf:
          - $ref: '#/components/schemas/ApiAccess'
          description: "Indicates whether the user can use the `GetProgrammaticAccessCredentials`\
            \ API to obtain credentials that can then be used to access other FinSpace\
            \ Data API operations.\n\n  * `ENABLED` – The user has permissions to\
            \ use the APIs.\n\n  * `DISABLED` – The user does not have permissions\
            \ to use any APIs."
        apiAccessPrincipalArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN identifier of an AWS user or role that is allowed to
            call the `GetProgrammaticAccessCredentials` API to obtain a credentials
            token for a specific FinSpace user. This must be an IAM role within your
            FinSpace account.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the user was created in FinSpace. The
            value is determined as epoch time in milliseconds.
        lastEnabledTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user was activated. The value is
            determined as epoch time in milliseconds.
        lastDisabledTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user was deactivated. The value
            is determined as epoch time in milliseconds.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user details were updated. The
            value is determined as epoch time in milliseconds.
        lastLoginTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time that the user logged into their account.
            The value is determined as epoch time in milliseconds.
    GetWorkingLocationRequest:
      type: object
      properties:
        locationType:
          allOf:
          - $ref: '#/components/schemas/locationType'
          description: "Specify the type of the working location.\n\n  * `SAGEMAKER`\
            \ – Use the Amazon S3 location as a temporary location to store data content\
            \ when working with FinSpace Notebooks that run on SageMaker studio.\n\
            \n  * `INGESTION` – Use the Amazon S3 location as a staging location to\
            \ copy your data content and then use the location with the Changeset\
            \ creation operation."
    GetWorkingLocationResponse:
      type: object
      properties:
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/stringValueLength1to1024'
          description: Returns the Amazon S3 URI for the working location.
        s3Path:
          allOf:
          - $ref: '#/components/schemas/stringValueLength1to1024'
          description: Returns the Amazon S3 Path for the working location.
        s3Bucket:
          allOf:
          - $ref: '#/components/schemas/stringValueLength1to63'
          description: Returns the Amazon S3 bucket name for the working location.
    IdType:
      type: string
      minLength: 1
      maxLength: 26
    IngestionStatus:
      type: string
      enum:
      - PENDING
      - FAILED
      - SUCCESS
      - RUNNING
      - STOP_REQUESTED
      description: Status of the ingestion process returned from scheduler service.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The request processing has failed because of an unknown error,
        exception or failure.
    LastName:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 50
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
      description: A limit has exceeded.
    ListChangesetsRequest:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset to which the
            Changeset belongs.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
      required:
      - datasetId
      description: Request to ListChangesetsRequest. It exposes minimal query filters.
    ListChangesetsResponse:
      type: object
      properties:
        changesets:
          allOf:
          - $ref: '#/components/schemas/ChangesetList'
          description: List of Changesets found.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
      description: Response to ListChangesetsResponse. This returns a list of dataset
        changesets that match the query criteria.
    ListDataViewsRequest:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier of the Dataset for which to retrieve
            Dataviews.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      required:
      - datasetId
      description: Request for a list data views.
    ListDataViewsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        dataViews:
          allOf:
          - $ref: '#/components/schemas/DataViewList'
          description: A list of Dataviews.
    ListDatasetsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      description: Request for the ListDatasets operation.
    ListDatasetsResponse:
      type: object
      properties:
        datasets:
          allOf:
          - $ref: '#/components/schemas/DatasetList'
          description: List of Datasets.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
      description: Response for the ListDatasets operation
    ListPermissionGroupsByUserRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      required:
      - userId
      - maxResults
    ListPermissionGroupsByUserResponse:
      type: object
      properties:
        permissionGroups:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupByUserList'
          description: A list of returned permission groups.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListPermissionGroupsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      required:
      - maxResults
    ListPermissionGroupsResponse:
      type: object
      properties:
        permissionGroups:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupList'
          description: A list of all the permission groups.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListUsersByPermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      required:
      - permissionGroupId
      - maxResults
    ListUsersByPermissionGroupResponse:
      type: object
      properties:
        users:
          allOf:
          - $ref: '#/components/schemas/UserByPermissionGroupList'
          description: Lists details of all users in a specific permission group.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    ListUsersRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/ResultLimit'
          description: The maximum number of results per page.
      required:
      - maxResults
    ListUsersResponse:
      type: object
      properties:
        users:
          allOf:
          - $ref: '#/components/schemas/UserList'
          description: A list of all the users.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token that indicates where a results page should begin.
    OwnerName:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 250
    PaginationToken:
      type: string
    PartitionColumnList:
      type: array
      items:
        $ref: '#/components/schemas/StringValueLength1to255'
      description: DataView Partition Column List
    Password:
      type: string
      pattern: \S
      minLength: 8
      maxLength: 20
    PermissionGroup:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
        name:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupName'
          description: The name of the permission group.
        description:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupDescription'
          description: A brief description for the permission group.
        applicationPermissions:
          allOf:
          - $ref: '#/components/schemas/ApplicationPermissionList'
          description: "Indicates the permissions that are granted to a specific group\
            \ for accessing the FinSpace application.\n\nWhen assigning application\
            \ permissions, be aware that the permission `ManageUsersAndGroups` allows\
            \ users to grant themselves or others access to any functionality in their\
            \ FinSpace environment's application. It should only be granted to trusted\
            \ users.\n\n  * `CreateDataset` – Group members can create new datasets.\n\
            \n  * `ManageClusters` – Group members can manage Apache Spark clusters\
            \ from FinSpace notebooks.\n\n  * `ManageUsersAndGroups` – Group members\
            \ can manage users and permission groups. This is a privileged permission\
            \ that allows users to grant themselves or others access to any functionality\
            \ in the application. It should only be granted to trusted users.\n\n\
            \  * `ManageAttributeSets` – Group members can manage attribute sets.\n\
            \n  * `ViewAuditData` – Group members can view audit data.\n\n  * `AccessNotebooks`\
            \ – Group members will have access to FinSpace notebooks.\n\n  * `GetTemporaryCredentials`\
            \ – Group members can get temporary API credentials."
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the group was created in FinSpace. The
            value is determined as epoch time in milliseconds.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the permission group was updated. The
            value is determined as epoch time in milliseconds.
        membershipStatus:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupMembershipStatus'
          description: "Indicates the status of the user within a permission group.\n\
            \n  * `ADDITION_IN_PROGRESS` – The user is currently being added to the\
            \ permission group.\n\n  * `ADDITION_SUCCESS` – The user is successfully\
            \ added to the permission group.\n\n  * `REMOVAL_IN_PROGRESS` – The user\
            \ is currently being removed from the permission group."
      description: The structure for a permission group.
    PermissionGroupByUser:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group.
        name:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupName'
          description: The name of the permission group.
        membershipStatus:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupMembershipStatus'
          description: "Indicates the status of the user within a permission group.\n\
            \n  * `ADDITION_IN_PROGRESS` – The user is currently being added to the\
            \ permission group.\n\n  * `ADDITION_SUCCESS` – The user is successfully\
            \ added to the permission group.\n\n  * `REMOVAL_IN_PROGRESS` – The user\
            \ is currently being removed from the permission group."
      description: The structure of a permission group associated with a user.
    PermissionGroupByUserList:
      type: array
      items:
        $ref: '#/components/schemas/PermissionGroupByUser'
    PermissionGroupDescription:
      type: string
      pattern: ^[\s\S]*$
      minLength: 1
      maxLength: 4000
    PermissionGroupId:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 26
    PermissionGroupList:
      type: array
      items:
        $ref: '#/components/schemas/PermissionGroup'
    PermissionGroupMembershipStatus:
      type: string
      enum:
      - ADDITION_IN_PROGRESS
      - ADDITION_SUCCESS
      - REMOVAL_IN_PROGRESS
    PermissionGroupName:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 255
    PermissionGroupParams:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the `PermissionGroup`.
        datasetPermissions:
          allOf:
          - $ref: '#/components/schemas/ResourcePermissionsList'
          description: List of resource permissions.
      description: 'Permission group parameters for Dataset permissions.


        Here is an example of how you could specify the `PermissionGroupParams`:


        ` { "permissionGroupId": "0r6fCRtSTUk4XPfXQe3M0g", "datasetPermissions": [
        {"permission": "ViewDatasetDetails"}, {"permission": "AddDatasetData"}, {"permission":
        "EditDatasetMetadata"}, {"permission": "DeleteDataset"} ] } `'
    PhoneNumber:
      type: string
      pattern: ^[\+0-9\#\,\(][\+0-9\-\.\/\(\)\,\#\s]+$
      minLength: 10
      maxLength: 20
    ResetUserPasswordRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier of the user that a temporary password
            is requested for.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - userId
    ResetUserPasswordResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier of the user that a new password is generated
            for.
        temporaryPassword:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: A randomly generated temporary password for the requested user.
            This password expires in 7 days.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
        reason:
          $ref: '#/components/schemas/ErrorMessage2'
      description: One or more resources can't be found.
    ResourcePermission:
      type: object
      properties:
        permission:
          allOf:
          - $ref: '#/components/schemas/StringValueLength1to250'
          description: Permission for a resource.
      description: "Resource permission for a dataset. When you create a dataset,\
        \ all the other members of the same user group inherit access to the dataset.\
        \ You can only create a dataset if your user group has application permission\
        \ for Create Datasets.\n\nThe following is a list of valid dataset permissions\
        \ that you can apply:\n\n  * `ViewDatasetDetails`\n\n  * `ReadDatasetDetails`\n\
        \n  * `AddDatasetData`\n\n  * `CreateDataView`\n\n  * `EditDatasetMetadata`\n\
        \n  * `DeleteDataset`\n\nFor more information on the dataset permissions,\
        \ see [Supported Dataset Permissions](https://docs.aws.amazon.com/finspace/latest/userguide/managing-user-permissions.html#supported-dataset-permissions)\
        \ in the FinSpace User Guide."
    ResourcePermissionsList:
      type: array
      items:
        $ref: '#/components/schemas/ResourcePermission'
      description: List of Resource Permissions
    ResultLimit:
      type: integer
      minimum: 1
      maximum: 100
    RoleArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
      minLength: 20
      maxLength: 2048
    S3BucketName:
      type: string
      pattern: ^.*\S.*$
      minLength: 1
      maxLength: 63
    S3DestinationFormatOptions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringMapValue'
    S3Key:
      type: string
      pattern: ^.*\S.*$
      minLength: 1
      maxLength: 1024
    S3Location:
      type: object
      properties:
        bucket:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: The name of the S3 bucket.
        key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: The path of the folder, within the S3 bucket that contains
            the Dataset.
      required:
      - bucket
      - key
      description: The location of an external Dataview in an S3 bucket.
    SchemaDefinition:
      type: object
      properties:
        columns:
          allOf:
          - $ref: '#/components/schemas/ColumnList'
          description: List of column definitions.
        primaryKeyColumns:
          allOf:
          - $ref: '#/components/schemas/ColumnNameList'
          description: List of column names used for primary key.
      description: Definition for a schema on a tabular Dataset.
    SchemaUnion:
      type: object
      properties:
        tabularSchemaConfig:
          allOf:
          - $ref: '#/components/schemas/SchemaDefinition'
          description: The configuration for a schema on a tabular Dataset.
      description: A union of schema types.
    SecretAccessKey:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 1
      maxLength: 1000
    SessionDuration:
      type: integer
      format: int64
      minimum: 1
      maximum: 60
    SessionToken:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 1
      maxLength: 1000
    SortColumnList:
      type: array
      items:
        $ref: '#/components/schemas/StringValueLength1to255'
      description: DataView Sort Column List
    SourceParams:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringMapValue'
      description: Source Parameters of a Changeset
    StatusCode:
      type: integer
      default: 0
    StringMapKey:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 0
      maxLength: 128
    StringMapValue:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 0
      maxLength: 1000
    StringValueLength1to250:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 1
      maxLength: 250
    StringValueLength1to255:
      type: string
      pattern: ^[\s\S]*\S[\s\S]*$
      minLength: 1
      maxLength: 255
    StringValueLength1to2552:
      type: string
      minLength: 1
      maxLength: 255
    ThrottlingException:
      type: object
      properties: {}
      description: The request was denied due to request throttling.
    TimestampEpoch:
      type: integer
      format: int64
      description: Milliseconds since UTC epoch
      default: 0
    UpdateChangesetRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset in which the
            Changeset is created.
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier for the Changeset to update.
        sourceParams:
          allOf:
          - $ref: '#/components/schemas/SourceParams'
          description: 'Options that define the location of the data being ingested
            (`s3SourcePath`) and the source of the changeset (`sourceType`).


            Both `s3SourcePath` and `sourceType` are required attributes.


            Here is an example of how you could specify the `sourceParams`:


            ` "sourceParams": { "s3SourcePath": "s3://finspace-landing-us-east-2-bk7gcfvitndqa6ebnvys4d/scratch/wr5hh8pwkpqqkxa4sxrmcw/ingestion/equity.csv",
            "sourceType": "S3" } `


            The S3 path that you specify must allow the FinSpace role access. To do
            that, you first need to configure the IAM policy on S3 bucket. For more
            information, see [Loading data from an Amazon S3 Bucket using the FinSpace
            API](https://docs.aws.amazon.com/finspace/latest/data-api/fs-using-the-finspace-api.html#access-s3-buckets)section.'
        formatParams:
          allOf:
          - $ref: '#/components/schemas/FormatParams'
          description: "Options that define the structure of the source file(s) including\
            \ the format type (`formatType`), header row (`withHeader`), data separation\
            \ character (`separator`) and the type of compression (`compression`).\n\
            \n`formatType` is a required attribute and can have the following values:\n\
            \n  * `PARQUET` – Parquet source file format.\n\n  * `CSV` – CSV source\
            \ file format.\n\n  * `JSON` – JSON source file format.\n\n  * `XML` –\
            \ XML source file format.\n\nHere is an example of how you could specify\
            \ the `formatParams`:\n\n` \"formatParams\": { \"formatType\": \"CSV\"\
            , \"withHeader\": \"true\", \"separator\": \",\", \"compression\":\"None\"\
            \ } `\n\nNote that if you only provide `formatType` as `CSV`, the rest\
            \ of the attributes will automatically default to CSV values as following:\n\
            \n` { \"withHeader\": \"true\", \"separator\": \",\" } `\n\nFor more information\
            \ about supported file formats, see [Supported Data Types and File Formats](https://docs.aws.amazon.com/finspace/latest/userguide/supported-data-types.html)\
            \ in the FinSpace User Guide."
      required:
      - datasetId
      - changesetId
      - sourceParams
      - formatParams
      description: Request to update an existing changeset.
    UpdateChangesetResponse:
      type: object
      properties:
        changesetId:
          allOf:
          - $ref: '#/components/schemas/ChangesetId'
          description: The unique identifier for the Changeset to update.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the FinSpace Dataset in which the
            Changeset is created.
      description: The response from a update changeset operation.
    UpdateDatasetRequest:
      type: object
      properties:
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for the Dataset to update.
        datasetTitle:
          allOf:
          - $ref: '#/components/schemas/DatasetTitle'
          description: A display title for the Dataset.
        kind:
          allOf:
          - $ref: '#/components/schemas/DatasetKind'
          description: "The format in which the Dataset data is structured.\n\n  *\
            \ `TABULAR` – Data is structured in a tabular format.\n\n  * `NON_TABULAR`\
            \ – Data is structured in a non-tabular format."
        datasetDescription:
          allOf:
          - $ref: '#/components/schemas/DatasetDescription'
          description: A description for the Dataset.
        alias:
          allOf:
          - $ref: '#/components/schemas/AliasString'
          description: The unique resource identifier for a Dataset.
        schemaDefinition:
          allOf:
          - $ref: '#/components/schemas/SchemaUnion'
          description: Definition for a schema on a tabular Dataset.
      required:
      - datasetId
      - datasetTitle
      - kind
      description: The request for an UpdateDataset operation
    UpdateDatasetResponse:
      type: object
      properties:
        datasetId:
          allOf:
          - $ref: '#/components/schemas/DatasetId'
          description: The unique identifier for updated Dataset.
      description: The response from an UpdateDataset operation
    UpdatePermissionGroupRequest:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the permission group to update.
        name:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupName'
          description: The name of the permission group.
        description:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupDescription'
          description: A brief description for the permission group.
        applicationPermissions:
          allOf:
          - $ref: '#/components/schemas/ApplicationPermissionList'
          description: "The permissions that are granted to a specific group for accessing\
            \ the FinSpace application.\n\nWhen assigning application permissions,\
            \ be aware that the permission `ManageUsersAndGroups` allows users to\
            \ grant themselves or others access to any functionality in their FinSpace\
            \ environment's application. It should only be granted to trusted users.\n\
            \n  * `CreateDataset` – Group members can create new datasets.\n\n  *\
            \ `ManageClusters` – Group members can manage Apache Spark clusters from\
            \ FinSpace notebooks.\n\n  * `ManageUsersAndGroups` – Group members can\
            \ manage users and permission groups. This is a privileged permission\
            \ that allows users to grant themselves or others access to any functionality\
            \ in the application. It should only be granted to trusted users.\n\n\
            \  * `ManageAttributeSets` – Group members can manage attribute sets.\n\
            \n  * `ViewAuditData` – Group members can view audit data.\n\n  * `AccessNotebooks`\
            \ – Group members will have access to FinSpace notebooks.\n\n  * `GetTemporaryCredentials`\
            \ – Group members can get temporary API credentials."
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - permissionGroupId
    UpdatePermissionGroupResponse:
      type: object
      properties:
        permissionGroupId:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupId'
          description: The unique identifier for the updated permission group.
    UpdateUserRequest:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user that you want to update.
        type:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: "The option to indicate the type of user.\n\n  * `SUPER_USER`–\
            \ A user with permission to all the functionality and data in FinSpace.\n\
            \n  * `APP_USER` – A user with specific permissions in FinSpace. The users\
            \ are assigned permissions by adding them to a permission group."
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name of the user.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name of the user.
        apiAccess:
          allOf:
          - $ref: '#/components/schemas/ApiAccess'
          description: "The option to indicate whether the user can use the `GetProgrammaticAccessCredentials`\
            \ API to obtain credentials that can then be used to access other FinSpace\
            \ Data API operations.\n\n  * `ENABLED` – The user has permissions to\
            \ use the APIs.\n\n  * `DISABLED` – The user does not have permissions\
            \ to use any APIs."
        apiAccessPrincipalArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN identifier of an AWS user or role that is allowed to
            call the `GetProgrammaticAccessCredentials` API to obtain a credentials
            token for a specific FinSpace user. This must be an IAM role within your
            FinSpace account.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: A token that ensures idempotency. This token expires in 10
            minutes.
      required:
      - userId
    UpdateUserResponse:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier of the updated user.
    User:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: "The current status of the user.\n\n  * `CREATING` – The user\
            \ creation is in progress.\n\n  * `ENABLED` – The user is created and\
            \ is currently active.\n\n  * `DISABLED` – The user is currently inactive."
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name of the user.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name of the user.
        emailAddress:
          allOf:
          - $ref: '#/components/schemas/Email'
          description: The email address of the user. The email address serves as
            a uniquer identifier for each user and cannot be changed after it's created.
        type:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: "Indicates the type of user.\n\n  * `SUPER_USER` – A user with\
            \ permission to all the functionality and data in FinSpace.\n\n  * `APP_USER`\
            \ – A user with specific permissions in FinSpace. The users are assigned\
            \ permissions by adding them to a permission group."
        apiAccess:
          allOf:
          - $ref: '#/components/schemas/ApiAccess'
          description: "Indicates whether the user can use the `GetProgrammaticAccessCredentials`\
            \ API to obtain credentials that can then be used to access other FinSpace\
            \ Data API operations.\n\n  * `ENABLED` – The user has permissions to\
            \ use the APIs.\n\n  * `DISABLED` – The user does not have permissions\
            \ to use any APIs."
        apiAccessPrincipalArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN identifier of an AWS user or role that is allowed to
            call the `GetProgrammaticAccessCredentials` API to obtain a credentials
            token for a specific FinSpace user. This must be an IAM role within your
            FinSpace account.
        createTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: The timestamp at which the user was created in FinSpace. The
            value is determined as epoch time in milliseconds.
        lastEnabledTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user was activated. The value is
            determined as epoch time in milliseconds.
        lastDisabledTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user was deactivated. The value
            is determined as epoch time in milliseconds.
        lastModifiedTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time the user was updated. The value is
            determined as epoch time in milliseconds.
        lastLoginTime:
          allOf:
          - $ref: '#/components/schemas/TimestampEpoch'
          description: Describes the last time that the user logged into their account.
            The value is determined as epoch time in milliseconds.
      description: The details of the user.
    UserByPermissionGroup:
      type: object
      properties:
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user.
        status:
          allOf:
          - $ref: '#/components/schemas/UserStatus'
          description: "The current status of the user.\n\n  * `CREATING` – The user\
            \ creation is in progress.\n\n  * `ENABLED` – The user is created and\
            \ is currently active.\n\n  * `DISABLED` – The user is currently inactive."
        firstName:
          allOf:
          - $ref: '#/components/schemas/FirstName'
          description: The first name of the user.
        lastName:
          allOf:
          - $ref: '#/components/schemas/LastName'
          description: The last name of the user.
        emailAddress:
          allOf:
          - $ref: '#/components/schemas/Email'
          description: The email address of the user. The email address serves as
            a unique identifier for each user and cannot be changed after it's created.
        type:
          allOf:
          - $ref: '#/components/schemas/UserType'
          description: "Indicates the type of user.\n\n  * `SUPER_USER` – A user with\
            \ permission to all the functionality and data in FinSpace.\n\n  * `APP_USER`\
            \ – A user with specific permissions in FinSpace. The users are assigned\
            \ permissions by adding them to a permission group."
        apiAccess:
          allOf:
          - $ref: '#/components/schemas/ApiAccess'
          description: "Indicates whether the user can access FinSpace API operations.\n\
            \n  * `ENABLED` – The user has permissions to use the API operations.\n\
            \n  * `DISABLED` – The user does not have permissions to use any API operations."
        apiAccessPrincipalArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The IAM ARN identifier that is attached to FinSpace API calls.
        membershipStatus:
          allOf:
          - $ref: '#/components/schemas/PermissionGroupMembershipStatus'
          description: "Indicates the status of the user within a permission group.\n\
            \n  * `ADDITION_IN_PROGRESS` – The user is currently being added to the\
            \ permission group.\n\n  * `ADDITION_SUCCESS` – The user is successfully\
            \ added to the permission group.\n\n  * `REMOVAL_IN_PROGRESS` – The user\
            \ is currently being removed from the permission group."
      description: The structure of a user associated with a permission group.
    UserByPermissionGroupList:
      type: array
      items:
        $ref: '#/components/schemas/UserByPermissionGroup'
    UserId:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 26
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserStatus:
      type: string
      enum:
      - CREATING
      - ENABLED
      - DISABLED
    UserType:
      type: string
      enum:
      - SUPER_USER
      - APP_USER
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage2'
        reason:
          $ref: '#/components/schemas/ErrorMessage2'
      description: The input fails to satisfy the constraints specified by an AWS
        service.
    locationType:
      type: string
      enum:
      - INGESTION
      - SAGEMAKER
    stringValueLength1to1024:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 1024
    stringValueLength1to63:
      type: string
      pattern: \S
      minLength: 1
      maxLength: 63
    stringValueMaxLength1000:
      type: string
      minLength: 0
      maxLength: 1000
