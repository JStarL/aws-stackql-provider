openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: securitylake
  x-aws-serviceName: securitylake
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-10'
  title: Amazon Security Lake
  description: |-
    Amazon Security Lake is a fully managed security data lake service. You can use Security Lake to automatically centralize security data from cloud, on-premises, and custom sources into a data lake that's stored in your Amazon Web Services account. Amazon Web Services Organizations is an account management service that lets you consolidate multiple Amazon Web Services accounts into an organization that you create and centrally manage. With Organizations, you can create member accounts and invite existing accounts to join your organization. Security Lake helps you analyze security data for a more complete understanding of your security posture across the entire organization. It can also help you improve the protection of your workloads, applications, and data.

    The data lake is backed by Amazon Simple Storage Service (Amazon S3) buckets, and you retain ownership over your data.

    Amazon Security Lake integrates with CloudTrail, a service that provides a record of actions taken by a user, role, or an Amazon Web Services service. In Security Lake, CloudTrail captures API calls for Security Lake as events. The calls captured include calls from the Security Lake console and code calls to the Security Lake API operations. If you create a trail, you can enable continuous delivery of CloudTrail events to an Amazon S3 bucket, including events for Security Lake. If you don't configure a trail, you can still view the most recent events in the CloudTrail console in Event history. Using the information collected by CloudTrail you can determine the request that was made to Security Lake, the IP address from which the request was made, who made the request, when it was made, and additional details. To learn more about Security Lake information in CloudTrail, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/securitylake-cloudtrail.html).

    Security Lake automates the collection of security-related log and event data from integrated Amazon Web Services services and third-party services. It also helps you manage the lifecycle of data with customizable retention and replication settings. Security Lake converts ingested data into Apache Parquet format and a standard open-source schema called the Open Cybersecurity Schema Framework (OCSF).

    Other Amazon Web Services services and third-party services can subscribe to the data that's stored in Security Lake for incident response and security data analytics.
servers:
- description: The Amazon Security Lake regional endpoint
  url: https://securitylake.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v1/datalake/logsources/aws:
    post:
      operationId: CreateAwsLogSource
      description: |-
        Adds a natively supported Amazon Web Services service as an Amazon Security Lake source. Enables source types for member accounts in required Amazon Web Services Regions, based on the parameters you specify. You can choose any source type in any Region for either accounts that are part of a trusted organization or standalone accounts. Once you add an Amazon Web Services service as a source, Security Lake starts collecting logs and events from it.

        You can use this API only to enable natively supported Amazon Web Services services as a source. Use `CreateCustomLogSource` to enable data collection from a custom source.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  $ref: '#/components/schemas/AwsLogSourceConfigurationList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/logsources/custom:
    post:
      operationId: CreateCustomLogSource
      description: |-
        Adds a third-party custom source in Amazon Security Lake, from the Amazon Web Services Region where you want to create a custom source. Security Lake can collect logs and events from third-party custom sources. After creating the appropriate IAM role to invoke Glue crawler, use this API to add a custom source name in Security Lake. This operation creates a partition in the Amazon S3 bucket for Security Lake as the target location for log files from the custom source. In addition, this operation also creates an associated Glue table and an Glue crawler.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceName:
                  $ref: '#/components/schemas/CustomLogSourceName'
                sourceVersion:
                  $ref: '#/components/schemas/CustomLogSourceVersion'
                eventClasses:
                  $ref: '#/components/schemas/OcsfEventClassList'
                configuration:
                  $ref: '#/components/schemas/CustomLogSourceConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake:
    post:
      operationId: CreateDataLake
      description: |-
        Initializes an Amazon Security Lake instance with the provided (or default) configuration. You can enable Security Lake in Amazon Web Services Regions with customized settings before enabling log collection in Regions. To specify particular Regions, configure these Regions using the `configurations` parameter. If you have already enabled Security Lake in a Region when you call this command, the command will update the Region if you provide new configuration parameters. If you have not already enabled Security Lake in the Region when you call this API, it will set up the data lake in the Region with the specified configurations.

        When you enable Security Lake, it starts ingesting security data after the `CreateAwsLogSource` call and after you create subscribers using the `CreateSubscriber` API. This includes ingesting security data from sources, storing data, and making data accessible to subscribers. Security Lake also enables all the existing settings and resources that it stores or maintains for your Amazon Web Services account in the current Region, including security log and event data. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/what-is-security-lake.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configurations:
                  $ref: '#/components/schemas/DataLakeConfigurationList'
                metaStoreManagerRoleArn:
                  $ref: '#/components/schemas/RoleArn'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateDataLake
      description: |-
        You can use `UpdateDataLake` to specify where to store your security data, how it should be encrypted at rest and for how long. You can add a [Rollup Region](https://docs.aws.amazon.com/security-lake/latest/userguide/manage-regions.html#add-rollup-region) to consolidate data from multiple Amazon Web Services Regions, replace default encryption (SSE-S3) with [Customer Manged Key](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#customer-cmk), or specify transition and expiration actions through storage [Lifecycle management](https://docs.aws.amazon.com/security-lake/latest/userguide/lifecycle-management.html). The `UpdateDataLake` API works as an "upsert" operation that performs an insert if the specified item or record does not exist, or an update if it already exists. Security Lake securely stores your data at rest using Amazon Web Services encryption solutions. For more details, see [Data protection in Amazon Security Lake](https://docs.aws.amazon.com/security-lake/latest/userguide/data-protection.html).

        For example, omitting the key `encryptionConfiguration` from a Region that is included in an update call that currently uses KMS will leave that Region's KMS key in place, but specifying `encryptionConfiguration: {kmsKeyId: 'S3_MANAGED_KEY'}` for that same Region will reset the key to `S3-managed`.

        For more details about lifecycle management and how to update retention settings for one or more Regions after enabling Security Lake, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/lifecycle-management.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configurations:
                  $ref: '#/components/schemas/DataLakeConfigurationList'
                metaStoreManagerRoleArn:
                  $ref: '#/components/schemas/RoleArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/exceptions/subscription:
    post:
      operationId: CreateDataLakeExceptionSubscription
      description: |-
        Creates the specified notification subscription in Amazon Security Lake for the organization you specify. The notification subscription is created for exceptions that cannot be resolved by Security Lake automatically.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionProtocol:
                  $ref: '#/components/schemas/SubscriptionProtocol'
                notificationEndpoint:
                  $ref: '#/components/schemas/SafeString'
                exceptionTimeToLive:
                  $ref: '#/components/schemas/Long'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteDataLakeExceptionSubscription
      description: |-
        Deletes the specified notification subscription in Amazon Security Lake for the organization you specify.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetDataLakeExceptionSubscription
      description: |-
        Retrieves the protocol and endpoint that were provided when subscribing to Amazon SNS topics for exception notifications.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateDataLakeExceptionSubscription
      description: |-
        Updates the specified notification subscription in Amazon Security Lake for the organization you specify.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriptionProtocol:
                  $ref: '#/components/schemas/SubscriptionProtocol'
                notificationEndpoint:
                  $ref: '#/components/schemas/SafeString'
                exceptionTimeToLive:
                  $ref: '#/components/schemas/Long'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/organization/configuration:
    post:
      operationId: CreateDataLakeOrganizationConfiguration
      description: |-
        Automatically enables Amazon Security Lake for new member accounts in your organization. Security Lake is not automatically enabled for any existing member accounts in your organization.

        This operation merges the new data lake organization configuration with the existing configuration for Security Lake in your organization. If you want to create a new data lake organization configuration, you must delete the existing one using [DeleteDataLakeOrganizationConfiguration](https://docs.aws.amazon.com/security-lake/latest/APIReference/API_DeleteDataLakeOrganizationConfiguration.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                autoEnableNewAccount:
                  $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfigurationList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetDataLakeOrganizationConfiguration
      description: |-
        Retrieves the configuration that will be automatically set up for accounts added to the organization after the organization has onboarded to Amazon Security Lake. This API does not take input parameters.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/subscribers:
    post:
      operationId: CreateSubscriber
      description: |-
        Creates a subscriber for accounts that are already enabled in Amazon Security Lake. You can create a subscriber with access to data in the current Amazon Web Services Region.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriberIdentity:
                  $ref: '#/components/schemas/AwsIdentity'
                subscriberName:
                  $ref: '#/components/schemas/String'
                subscriberDescription:
                  $ref: '#/components/schemas/DescriptionString'
                sources:
                  $ref: '#/components/schemas/LogSourceResourceList'
                accessTypes:
                  $ref: '#/components/schemas/AccessTypeList'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListSubscribers
      description: |-
        Lists all subscribers for the specific Amazon Security Lake account ID. You can retrieve a list of subscriptions associated with a specific organization or Amazon Web Services account.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/subscribers/{subscriberId}/notification:
    post:
      operationId: CreateSubscriberNotification
      description: |-
        Notifies the subscriber when new data is written to the data lake for the sources that the subscriber consumes in Security Lake. You can create only one subscriber notification per subscriber.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configuration:
                  $ref: '#/components/schemas/NotificationConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: DeleteSubscriberNotification
      description: |-
        Deletes the specified subscription notification in Amazon Security Lake for the organization you specify.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateSubscriberNotification
      description: |-
        Updates an existing notification method for the subscription (SQS or HTTPs endpoint) or switches the notification subscription endpoint for a subscriber.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                configuration:
                  $ref: '#/components/schemas/NotificationConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/logsources/aws/delete:
    post:
      operationId: DeleteAwsLogSource
      description: |-
        Removes a natively supported Amazon Web Services service as an Amazon Security Lake source. You can remove a source for one or more Regions. When you remove the source, Security Lake stops collecting data from that source in the specified Regions and accounts, and subscribers can no longer consume new data from the source. However, subscribers can still consume data that Security Lake collected from the source before removal.

        You can choose any source type in any Amazon Web Services Region for either accounts that are part of a trusted organization or standalone accounts.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sources:
                  $ref: '#/components/schemas/AwsLogSourceConfigurationList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/logsources/custom/{sourceName}:
    delete:
      operationId: DeleteCustomLogSource
      description: |-
        Removes a custom log source from Amazon Security Lake, to stop sending data from the custom source to Security Lake.
      parameters:
      - name: sourceName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CustomLogSourceName'
      - name: sourceVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/CustomLogSourceVersion'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/delete:
    post:
      operationId: DeleteDataLake
      description: |-
        When you disable Amazon Security Lake from your account, Security Lake is disabled in all Amazon Web Services Regions and it stops collecting data from your sources. Also, this API automatically takes steps to remove the account from Security Lake. However, Security Lake retains all of your existing settings and the resources that it created in your Amazon Web Services account in the current Amazon Web Services Region.

        The `DeleteDataLake` operation does not delete the data that is stored in your Amazon S3 bucket, which is owned by your Amazon Web Services account. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/disable-security-lake.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                regions:
                  $ref: '#/components/schemas/RegionList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/organization/configuration/delete:
    post:
      operationId: DeleteDataLakeOrganizationConfiguration
      description: |-
        Turns off automatic enablement of Amazon Security Lake for member accounts that are added to an organization in Organizations. Only the delegated Security Lake administrator for an organization can perform this operation. If the delegated Security Lake administrator performs this operation, new member accounts won't automatically contribute data to the data lake.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                autoEnableNewAccount:
                  $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfigurationList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/subscribers/{subscriberId}:
    delete:
      operationId: DeleteSubscriber
      description: |-
        Deletes the subscription permission and all notification settings for accounts that are already enabled in Amazon Security Lake. When you run `DeleteSubscriber`, the subscriber will no longer consume data from Security Lake and the subscriber is removed. This operation deletes the subscriber and removes access to data in the current Amazon Web Services Region.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: GetSubscriber
      description: |-
        Retrieves the subscription information for the specified subscription ID. You can get information about a specific subscriber.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateSubscriber
      description: |-
        Updates an existing subscription for the given Amazon Security Lake account ID. You can update a subscriber by changing the sources that the subscriber consumes data from.
      parameters:
      - name: subscriberId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subscriberIdentity:
                  $ref: '#/components/schemas/AwsIdentity'
                subscriberName:
                  $ref: '#/components/schemas/SafeString'
                subscriberDescription:
                  $ref: '#/components/schemas/DescriptionString'
                sources:
                  $ref: '#/components/schemas/LogSourceResourceList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/delegate:
    delete:
      operationId: DeregisterDataLakeDelegatedAdministrator
      description: |-
        Deletes the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: RegisterDataLakeDelegatedAdministrator
      description: |-
        Designates the Amazon Security Lake delegated administrator account for the organization. This API can only be called by the organization management account. The organization management account cannot be the delegated administrator account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountId:
                  $ref: '#/components/schemas/SafeString'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/sources:
    post:
      operationId: GetDataLakeSources
      description: |-
        Retrieves a snapshot of the current Region, including whether Amazon Security Lake is enabled for those accounts and which sources Security Lake is collecting data from.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accounts:
                  $ref: '#/components/schemas/AccountList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/exceptions:
    post:
      operationId: ListDataLakeExceptions
      description: |-
        Lists the Amazon Security Lake exceptions that you can use to find the source of problems and fix them.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                regions:
                  $ref: '#/components/schemas/RegionList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalakes:
    get:
      operationId: ListDataLakes
      description: |-
        Retrieves the Amazon Security Lake configuration object for the specified Amazon Web Services Regions. You can use this operation to determine whether Security Lake is enabled for a Region.
      parameters:
      - name: regions
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RegionList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/datalake/logsources/list:
    post:
      operationId: ListLogSources
      description: |-
        Retrieves the log sources.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accounts:
                  $ref: '#/components/schemas/AccountList'
                regions:
                  $ref: '#/components/schemas/RegionList'
                sources:
                  $ref: '#/components/schemas/LogSourceResourceList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /v1/tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Retrieves the tags (keys and values) that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: TagResource
      description: |-
        Adds or updates one or more tags that are associated with an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region. A _tag_ is a label that you can define and associate with Amazon Web Services resources. Each tag consists of a required _tag key_ and an associated _tag value_. A _tag key_ is a general label that acts as a category for a more specific tag value. A _tag value_ acts as a descriptor for a tag key. Tags can help you identify, categorize, and manage resources in different ways, such as by owner, environment, or other criteria. For more information, see [Tagging Amazon Security Lake resources](https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html) in the _Amazon Security Lake User Guide_.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: UntagResource
      description: |-
        Removes one or more tags (keys and values) from an Amazon Security Lake resource: a subscriber, or the data lake configuration for your Amazon Web Services account in a particular Amazon Web Services Region.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action. Access denied errors appear when Amazon Security Lake explicitly or implicitly denies an authorization request. An explicit denial occurs when a policy contains a Deny statement for the specific Amazon Web Services action. An implicit denial occurs when there is no applicable Deny statement and also no applicable Allow statement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is malformed or contains an error such as an invalid parameter value or a missing required parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            Occurs when a conflict with a previous successful write is detected. This generally occurs when the previous write did not have time to propagate to the host serving the current request. A retry (with appropriate backoff logic) is the recommended response to this exception.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal service exceptions are sometimes caused by transient issues. Before you start troubleshooting, perform the operation again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The limit on the number of requests per second was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A coded string to provide more information about the access
            denied exception. You can use the error code to check the exception type.
      description: You do not have sufficient access to perform this action. Access
        denied errors appear when Amazon Security Lake explicitly or implicitly denies
        an authorization request. An explicit denial occurs when a policy contains
        a Deny statement for the specific Amazon Web Services action. An implicit
        denial occurs when there is no applicable Deny statement and also no applicable
        Allow statement.
    AccessType:
      type: string
      enum:
      - LAKEFORMATION
      - S3
    AccessTypeList:
      type: array
      items:
        $ref: '#/components/schemas/AccessType'
    AccountList:
      type: array
      items:
        $ref: '#/components/schemas/AwsAccountId'
    AmazonResourceName:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):securitylake:[A-Za-z0-9_/.\-]{0,63}:[A-Za-z0-9_/.\-]{0,63}:[A-Za-z0-9][A-Za-z0-9_/.\-]{0,127}$
      minLength: 1
      maxLength: 1011
    AwsAccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    AwsIdentity:
      type: object
      properties:
        principal:
          allOf:
          - $ref: '#/components/schemas/AwsPrincipal'
          description: The Amazon Web Services identity principal.
        externalId:
          allOf:
          - $ref: '#/components/schemas/ExternalId'
          description: The external ID used to establish trust relationship with the
            Amazon Web Services identity.
      required:
      - principal
      - externalId
      description: The Amazon Web Services identity.
    AwsLogSourceConfiguration:
      type: object
      properties:
        accounts:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: Specify the Amazon Web Services account information where you
            want to enable Security Lake.
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: Specify the Regions where you want to enable Security Lake.
        sourceName:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceName'
          description: The name for a Amazon Web Services source.
        sourceVersion:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceVersion'
          description: The version for a Amazon Web Services source.
      required:
      - regions
      - sourceName
      description: To add a natively-supported Amazon Web Services service as a log
        source, use these parameters to specify the configuration settings for the
        log source.
    AwsLogSourceConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/AwsLogSourceConfiguration'
    AwsLogSourceName:
      type: string
      enum:
      - ROUTE53
      - VPC_FLOW
      - SH_FINDINGS
      - CLOUD_TRAIL_MGMT
      - LAMBDA_EXECUTION
      - S3_DATA
      - EKS_AUDIT
      - WAF
    AwsLogSourceResource:
      type: object
      properties:
        sourceName:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceName'
          description: The name for a Amazon Web Services source. This must be a Regionally
            unique value.
        sourceVersion:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceVersion'
          description: The version for a Amazon Web Services source. This must be
            a Regionally unique value.
      description: Amazon Security Lake can collect logs and events from natively-supported
        Amazon Web Services services.
    AwsLogSourceResourceList:
      type: array
      items:
        $ref: '#/components/schemas/AwsLogSourceResource'
    AwsLogSourceVersion:
      type: string
      pattern: ^(latest|[0-9]\.[0-9])$
    AwsPrincipal:
      type: string
      pattern: ^([0-9]{12}|[a-z0-9\.\-]*\.(amazonaws|amazon)\.com)$
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request is malformed or contains an error such as an invalid
        parameter value or a missing required parameter.
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource name.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The resource type.
      description: Occurs when a conflict with a previous successful write is detected.
        This generally occurs when the previous write did not have time to propagate
        to the host serving the current request. A retry (with appropriate backoff
        logic) is the recommended response to this exception.
    CreateAwsLogSourceRequest:
      type: object
      properties:
        sources:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceConfigurationList'
          description: Specify the natively-supported Amazon Web Services service
            to add as a source in Security Lake.
      required:
      - sources
    CreateAwsLogSourceResponse:
      type: object
      properties:
        failed:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: Lists all accounts in which enabling a natively supported Amazon
            Web Services service as a Security Lake source failed. The failure occurred
            as these accounts are not part of an organization.
    CreateCustomLogSourceRequest:
      type: object
      properties:
        sourceName:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceName'
          description: Specify the name for a third-party custom source. This must
            be a Regionally unique value. The `sourceName` you enter here, is used
            in the `LogProviderRole` name which follows the convention `AmazonSecurityLake-Provider-{name
            of the custom source}-{region}`. You must use a `CustomLogSource` name
            that is shorter than or equal to 20 characters. This ensures that the
            `LogProviderRole` name is below the 64 character limit.
        sourceVersion:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceVersion'
          description: Specify the source version for the third-party custom source,
            to limit log collection to a specific version of custom data source.
        eventClasses:
          allOf:
          - $ref: '#/components/schemas/OcsfEventClassList'
          description: The Open Cybersecurity Schema Framework (OCSF) event classes
            which describes the type of data that the custom source will send to Security
            Lake. For the list of supported event classes, see the [Amazon Security
            Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass).
        configuration:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceConfiguration'
          description: The configuration used for the third-party custom source.
      required:
      - sourceName
      - configuration
    CreateCustomLogSourceResponse:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceResource'
          description: The third-party custom source that was created.
    CreateDataLakeExceptionSubscriptionRequest:
      type: object
      properties:
        subscriptionProtocol:
          allOf:
          - $ref: '#/components/schemas/SubscriptionProtocol'
          description: The subscription protocol to which exception notifications
            are posted.
        notificationEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The Amazon Web Services account where you want to receive exception
            notifications.
        exceptionTimeToLive:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The expiration period and time-to-live (TTL). It is the duration
            of time until which the exception message remains.
      required:
      - subscriptionProtocol
      - notificationEndpoint
    CreateDataLakeExceptionSubscriptionResponse:
      type: object
      properties: {}
    CreateDataLakeOrganizationConfigurationRequest:
      type: object
      properties:
        autoEnableNewAccount:
          allOf:
          - $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfigurationList'
          description: Enable Security Lake with the specified configuration settings,
            to begin collecting security data for new accounts in your organization.
    CreateDataLakeOrganizationConfigurationResponse:
      type: object
      properties: {}
    CreateDataLakeRequest:
      type: object
      properties:
        configurations:
          allOf:
          - $ref: '#/components/schemas/DataLakeConfigurationList'
          description: Specify the Region or Regions that will contribute data to
            the rollup region.
        metaStoreManagerRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) used to create and update the
            Glue table. This table contains partitions generated by the ingestion
            and normalization of Amazon Web Services log sources and custom sources.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: An array of objects, one for each tag to associate with the
            data lake configuration. For each tag, you must specify both a tag key
            and a tag value. A tag value cannot be null, but it can be an empty string.
      required:
      - configurations
      - metaStoreManagerRoleArn
    CreateDataLakeResponse:
      type: object
      properties:
        dataLakes:
          allOf:
          - $ref: '#/components/schemas/DataLakeResourceList'
          description: The created Security Lake configuration object.
    CreateSubscriberNotificationRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The subscriber ID for the notification subscription.
        configuration:
          allOf:
          - $ref: '#/components/schemas/NotificationConfiguration'
          description: Specify the configuration using which you want to create the
            subscriber notification.
      required:
      - subscriberId
      - configuration
    CreateSubscriberNotificationResponse:
      type: object
      properties:
        subscriberEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The subscriber endpoint to which exception messages are posted.
    CreateSubscriberRequest:
      type: object
      properties:
        subscriberIdentity:
          allOf:
          - $ref: '#/components/schemas/AwsIdentity'
          description: The Amazon Web Services identity used to access your data.
        subscriberName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of your Security Lake subscriber account.
        subscriberDescription:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description for your subscriber account in Security Lake.
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceResourceList'
          description: The supported Amazon Web Services services from which logs
            and events are collected. Security Lake supports log and event collection
            for natively supported Amazon Web Services services.
        accessTypes:
          allOf:
          - $ref: '#/components/schemas/AccessTypeList'
          description: The Amazon S3 or Lake Formation access type.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: An array of objects, one for each tag to associate with the
            subscriber. For each tag, you must specify both a tag key and a tag value.
            A tag value cannot be null, but it can be an empty string.
      required:
      - subscriberIdentity
      - subscriberName
      - sources
    CreateSubscriberResponse:
      type: object
      properties:
        subscriber:
          allOf:
          - $ref: '#/components/schemas/SubscriberResource'
          description: Retrieve information about the subscriber created using the
            `CreateSubscriber` API.
    CustomLogSourceAttributes:
      type: object
      properties:
        crawlerArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the Glue crawler.
        databaseArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: 'The ARN of the Glue database where results are written, such
            as: `arn:aws:daylight:us-east-1::database/sometable/*`.'
        tableArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the Glue table.
      description: The attributes of a third-party custom source.
    CustomLogSourceConfiguration:
      type: object
      properties:
        crawlerConfiguration:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceCrawlerConfiguration'
          description: The configuration used for the Glue Crawler for a third-party
            custom source.
        providerIdentity:
          allOf:
          - $ref: '#/components/schemas/AwsIdentity'
          description: The identity of the log provider for the third-party custom
            source.
      required:
      - crawlerConfiguration
      - providerIdentity
      description: The configuration used for the third-party custom source.
    CustomLogSourceCrawlerConfiguration:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: "The Amazon Resource Name (ARN) of the Identity and Access\
            \ Management (IAM) role to be used by the Glue crawler. The recommended\
            \ IAM policies are:\n\n  * The managed policy `AWSGlueServiceRole`\n\n\
            \  * A custom policy granting access to your Amazon S3 Data Lake"
      required:
      - roleArn
      description: The configuration used for the Glue Crawler for a third-party custom
        source.
    CustomLogSourceName:
      type: string
      pattern: ^[\w\-\_\:\.]*$
      minLength: 1
      maxLength: 64
    CustomLogSourceProvider:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the IAM role to be used by the entity putting logs
            into your custom source partition. Security Lake will apply the correct
            access policies to this role, but you must first manually create the trust
            policy for this role. The IAM role name must start with the text 'Security
            Lake'. The IAM role must trust the `logProviderAccountId` to assume the
            role.
        location:
          allOf:
          - $ref: '#/components/schemas/S3URI'
          description: The location of the partition in the Amazon S3 bucket for Security
            Lake.
      description: The details of the log provider for a third-party custom source.
    CustomLogSourceResource:
      type: object
      properties:
        sourceName:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceName'
          description: The name for a third-party custom source. This must be a Regionally
            unique value.
        sourceVersion:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceVersion'
          description: The version for a third-party custom source. This must be a
            Regionally unique value.
        provider:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceProvider'
          description: The details of the log provider for a third-party custom source.
        attributes:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceAttributes'
          description: The attributes of a third-party custom source.
      description: Amazon Security Lake can collect logs and events from third-party
        custom sources.
    CustomLogSourceVersion:
      type: string
      pattern: ^[A-Za-z0-9\-\.\_]*$
      minLength: 1
      maxLength: 32
    DataLakeAutoEnableNewAccountConfiguration:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Regions where Security Lake is automatically
            enabled.
        sources:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceResourceList'
          description: The Amazon Web Services sources that are automatically enabled
            in Security Lake.
      required:
      - region
      - sources
      description: Automatically enable new organization accounts as member accounts
        from an Amazon Security Lake administrator account.
    DataLakeAutoEnableNewAccountConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfiguration'
    DataLakeConfiguration:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Regions where Security Lake is automatically
            enabled.
        encryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeEncryptionConfiguration'
          description: Provides encryption details of Amazon Security Lake object.
        lifecycleConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeLifecycleConfiguration'
          description: Provides lifecycle details of Amazon Security Lake object.
        replicationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeReplicationConfiguration'
          description: Provides replication details of Amazon Security Lake object.
      required:
      - region
      description: Provides details of Amazon Security Lake object.
    DataLakeConfigurationList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeConfiguration'
    DataLakeEncryptionConfiguration:
      type: object
      properties:
        kmsKeyId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of KMS encryption key used by Amazon Security
            Lake to encrypt the Security Lake object.
      description: Provides encryption details of Amazon Security Lake object.
    DataLakeException:
      type: object
      properties:
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Regions where the exception occurred.
        exception:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The underlying exception of a Security Lake exception.
        remediation:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: List of all remediation steps for a Security Lake exception.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: This error can occur if you configure the wrong timestamp format,
            or if the subset of entries used for validation had errors or missing
            values.
      description: The details for an Amazon Security Lake exception.
    DataLakeExceptionList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeException'
    DataLakeLifecycleConfiguration:
      type: object
      properties:
        expiration:
          allOf:
          - $ref: '#/components/schemas/DataLakeLifecycleExpiration'
          description: Provides data expiration details of Amazon Security Lake object.
        transitions:
          allOf:
          - $ref: '#/components/schemas/DataLakeLifecycleTransitionList'
          description: Provides data storage transition details of Amazon Security
            Lake object.
      description: Provides lifecycle details of Amazon Security Lake object.
    DataLakeLifecycleExpiration:
      type: object
      properties:
        days:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Number of days before data expires in the Amazon Security Lake
            object.
      description: Provide expiration lifecycle details of Amazon Security Lake object.
    DataLakeLifecycleTransition:
      type: object
      properties:
        storageClass:
          allOf:
          - $ref: '#/components/schemas/DataLakeStorageClass'
          description: The range of storage classes that you can choose from based
            on the data access, resiliency, and cost requirements of your workloads.
        days:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Number of days before data transitions to a different S3 Storage
            Class in the Amazon Security Lake object.
      description: Provide transition lifecycle details of Amazon Security Lake object.
    DataLakeLifecycleTransitionList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeLifecycleTransition'
    DataLakeReplicationConfiguration:
      type: object
      properties:
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: 'Specifies one or more centralized rollup Regions. The Amazon
            Web Services Region specified in the `region` parameter of the [ `CreateDataLake`
            ](https://docs.aws.amazon.com/security-lake/latest/APIReference/API_CreateDataLake.html)
            or [ `UpdateDataLake` ](https://docs.aws.amazon.com/security-lake/latest/APIReference/API_UpdateDataLake.html)
            operations contributes data to the rollup Region or Regions specified
            in this parameter.


            Replication enables automatic, asynchronous copying of objects across
            Amazon S3 buckets. S3 buckets that are configured for object replication
            can be owned by the same Amazon Web Services account or by different accounts.
            You can replicate objects to a single destination bucket or to multiple
            destination buckets. The destination buckets can be in different Regions
            or within the same Region as the source bucket.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: Replication settings for the Amazon S3 buckets. This parameter
            uses the Identity and Access Management (IAM) role you created that is
            managed by Security Lake, to ensure the replication setting is correct.
      description: Provides replication details for objects stored in the Amazon Security
        Lake data lake.
    DataLakeResource:
      type: object
      properties:
        dataLakeArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) created by you to provide to
            the subscriber. For more information about ARNs and how to use them in
            policies, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/subscriber-management.html).
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Amazon Web Services Regions where Security Lake is enabled.
        s3BucketArn:
          allOf:
          - $ref: '#/components/schemas/S3BucketArn'
          description: The ARN for the Amazon Security Lake Amazon S3 bucket.
        encryptionConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeEncryptionConfiguration'
          description: Provides encryption details of Amazon Security Lake object.
        lifecycleConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeLifecycleConfiguration'
          description: Provides lifecycle details of Amazon Security Lake object.
        replicationConfiguration:
          allOf:
          - $ref: '#/components/schemas/DataLakeReplicationConfiguration'
          description: Provides replication details of Amazon Security Lake object.
        createStatus:
          allOf:
          - $ref: '#/components/schemas/DataLakeStatus'
          description: Retrieves the status of the `CreateDatalake` API call for an
            account in Amazon Security Lake.
        updateStatus:
          allOf:
          - $ref: '#/components/schemas/DataLakeUpdateStatus'
          description: The status of the last `UpdateDataLake `or `DeleteDataLake`
            API request.
      required:
      - dataLakeArn
      - region
      description: Provides details of Amazon Security Lake object.
    DataLakeResourceList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeResource'
    DataLakeSource:
      type: object
      properties:
        account:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the Security Lake account for which logs are collected.
        sourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The supported Amazon Web Services services from which logs
            and events are collected. Amazon Security Lake supports log and event
            collection for natively supported Amazon Web Services services.
        eventClasses:
          allOf:
          - $ref: '#/components/schemas/OcsfEventClassList'
          description: The Open Cybersecurity Schema Framework (OCSF) event classes
            describes the type of data that the custom source will send to Security
            Lake. For the list of supported event classes, see [Supported OCSF Event
            classes](https://docs.aws.amazon.com/security-lake/latest/userguide/adding-custom-sources.html#ocsf-eventclass.html)
            in the Amazon Security Lake User Guide.
        sourceStatuses:
          allOf:
          - $ref: '#/components/schemas/DataLakeSourceStatusList'
          description: The log status for the Security Lake account.
      description: Amazon Security Lake collects logs and events from supported Amazon
        Web Services services and custom sources. For the list of supported Amazon
        Web Services services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
    DataLakeSourceList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeSource'
    DataLakeSourceStatus:
      type: object
      properties:
        resource:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Defines path the stored logs are available which has information
            on your systems, applications, and services.
        status:
          allOf:
          - $ref: '#/components/schemas/SourceCollectionStatus'
          description: The health status of services, including error codes and patterns.
      description: Retrieves the Logs status for the Amazon Security Lake account.
    DataLakeSourceStatusList:
      type: array
      items:
        $ref: '#/components/schemas/DataLakeSourceStatus'
    DataLakeStatus:
      type: string
      enum:
      - INITIALIZED
      - PENDING
      - COMPLETED
      - FAILED
    DataLakeStorageClass:
      type: string
    DataLakeUpdateException:
      type: object
      properties:
        reason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for the exception of the last `UpdateDataLake`or
            `DeleteDataLake` API request.
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason code for the exception of the last `UpdateDataLake`
            or `DeleteDataLake` API request.
      description: The details of the last `UpdateDataLake` or `DeleteDataLake` API
        request which failed.
    DataLakeUpdateStatus:
      type: object
      properties:
        requestId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique ID for the last `UpdateDataLake` or `DeleteDataLake`
            API request.
        status:
          allOf:
          - $ref: '#/components/schemas/DataLakeStatus'
          description: The status of the last `UpdateDataLake` or `DeleteDataLake`
            API request that was requested.
        exception:
          allOf:
          - $ref: '#/components/schemas/DataLakeUpdateException'
          description: The details of the last `UpdateDataLake`or `DeleteDataLake`
            API request which failed.
      description: The status of the last `UpdateDataLake` or `DeleteDataLake` API
        request. This is set to Completed after the configuration is updated, or removed
        if deletion of the data lake is successful.
    DeleteAwsLogSourceRequest:
      type: object
      properties:
        sources:
          allOf:
          - $ref: '#/components/schemas/AwsLogSourceConfigurationList'
          description: Specify the natively-supported Amazon Web Services service
            to remove as a source in Security Lake.
      required:
      - sources
    DeleteAwsLogSourceResponse:
      type: object
      properties:
        failed:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: Deletion of the Amazon Web Services sources failed as the account
            is not a part of the organization.
    DeleteCustomLogSourceRequest:
      type: object
      properties:
        sourceName:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceName'
          description: The source name of custom log source that you want to delete.
        sourceVersion:
          allOf:
          - $ref: '#/components/schemas/CustomLogSourceVersion'
          description: The source version for the third-party custom source. You can
            limit the custom source removal to the specified source version.
      required:
      - sourceName
    DeleteCustomLogSourceResponse:
      type: object
      properties: {}
    DeleteDataLakeExceptionSubscriptionRequest:
      type: object
      properties: {}
    DeleteDataLakeExceptionSubscriptionResponse:
      type: object
      properties: {}
    DeleteDataLakeOrganizationConfigurationRequest:
      type: object
      properties:
        autoEnableNewAccount:
          allOf:
          - $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfigurationList'
          description: Turns off automatic enablement of Security Lake for member
            accounts that are added to an organization.
    DeleteDataLakeOrganizationConfigurationResponse:
      type: object
      properties: {}
    DeleteDataLakeRequest:
      type: object
      properties:
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: The list of Regions where Security Lake is enabled.
      required:
      - regions
    DeleteDataLakeResponse:
      type: object
      properties: {}
    DeleteSubscriberNotificationRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The ID of the Security Lake subscriber account.
      required:
      - subscriberId
    DeleteSubscriberNotificationResponse:
      type: object
      properties: {}
    DeleteSubscriberRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: A value created by Security Lake that uniquely identifies your
            `DeleteSubscriber` API request.
      required:
      - subscriberId
    DeleteSubscriberResponse:
      type: object
      properties: {}
    DeregisterDataLakeDelegatedAdministratorRequest:
      type: object
      properties: {}
    DeregisterDataLakeDelegatedAdministratorResponse:
      type: object
      properties: {}
    DescriptionString:
      type: string
      pattern: ^[\\\w\s\-_:/,.@=+]*$
    ExternalId:
      type: string
      pattern: ^[\w+=,.@:\/-]*$
      minLength: 2
      maxLength: 1224
    GetDataLakeExceptionSubscriptionRequest:
      type: object
      properties: {}
    GetDataLakeExceptionSubscriptionResponse:
      type: object
      properties:
        subscriptionProtocol:
          allOf:
          - $ref: '#/components/schemas/SubscriptionProtocol'
          description: The subscription protocol to which exception notifications
            are posted.
        notificationEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The Amazon Web Services account where you receive exception
            notifications.
        exceptionTimeToLive:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The expiration period and time-to-live (TTL). It is the duration
            of time until which the exception message remains.
    GetDataLakeOrganizationConfigurationRequest:
      type: object
      properties: {}
    GetDataLakeOrganizationConfigurationResponse:
      type: object
      properties:
        autoEnableNewAccount:
          allOf:
          - $ref: '#/components/schemas/DataLakeAutoEnableNewAccountConfigurationList'
          description: The configuration used for new accounts in Security Lake.
    GetDataLakeSourcesRequest:
      type: object
      properties:
        accounts:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: The Amazon Web Services account ID for which a static snapshot
            of the current Amazon Web Services Region, including enabled accounts
            and log sources, is retrieved.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum limit of accounts for which the static snapshot
            of the current Region, including enabled accounts and log sources, is
            retrieved.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'Lists if there are more results available. The value of nextToken
            is a unique pagination token for each page. Repeat the call using the
            returned token to retrieve the next page. Keep all other arguments unchanged.


            Each pagination token expires after 24 hours. Using an expired pagination
            token will return an HTTP 400 InvalidToken error.'
    GetDataLakeSourcesResponse:
      type: object
      properties:
        dataLakeArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) created by you to provide to
            the subscriber. For more information about ARNs and how to use them in
            policies, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/subscriber-management.html).
        dataLakeSources:
          allOf:
          - $ref: '#/components/schemas/DataLakeSourceList'
          description: The list of enabled accounts and enabled sources.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'Lists if there are more results available. The value of nextToken
            is a unique pagination token for each page. Repeat the call using the
            returned token to retrieve the next page. Keep all other arguments unchanged.


            Each pagination token expires after 24 hours. Using an expired pagination
            token will return an HTTP 400 InvalidToken error.'
    GetSubscriberRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: A value created by Amazon Security Lake that uniquely identifies
            your `GetSubscriber` API request.
      required:
      - subscriberId
    GetSubscriberResponse:
      type: object
      properties:
        subscriber:
          allOf:
          - $ref: '#/components/schemas/SubscriberResource'
          description: The subscriber information for the specified subscriber ID.
    HttpMethod:
      type: string
      enum:
      - POST
      - PUT
    HttpsNotificationConfiguration:
      type: object
      properties:
        endpoint:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The subscription endpoint in Security Lake. If you prefer notification
            with an HTTPs endpoint, populate this field.
        authorizationApiKeyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key name for the notification subscription.
        authorizationApiKeyValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key value for the notification subscription.
        httpMethod:
          allOf:
          - $ref: '#/components/schemas/HttpMethod'
          description: The HTTPS method used for the notification subscription.
        targetRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) of the EventBridge API destinations
            IAM role that you created. For more information about ARNs and how to
            use them in policies, see [Managing data access](https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html)
            and [Amazon Web Services Managed Policies](https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html)
            in the _Amazon Security Lake User Guide_.
      required:
      - endpoint
      - targetRoleArn
      description: The configurations used for HTTPS subscriber notification.
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Internal service exceptions are sometimes caused by transient issues.
        Before you start troubleshooting, perform the operation again.
    ListDataLakeExceptionsRequest:
      type: object
      properties:
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: The Amazon Web Services Regions from which exceptions are retrieved.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Lists the maximum number of failures in Security Lake.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'Lists if there are more results available. The value of nextToken
            is a unique pagination token for each page. Repeat the call using the
            returned token to retrieve the next page. Keep all other arguments unchanged.


            Each pagination token expires after 24 hours. Using an expired pagination
            token will return an HTTP 400 InvalidToken error.'
    ListDataLakeExceptionsResponse:
      type: object
      properties:
        exceptions:
          allOf:
          - $ref: '#/components/schemas/DataLakeExceptionList'
          description: Lists the failures that cannot be retried.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: 'Lists if there are more results available. The value of nextToken
            is a unique pagination token for each page. Repeat the call using the
            returned token to retrieve the next page. Keep all other arguments unchanged.


            Each pagination token expires after 24 hours. Using an expired pagination
            token will return an HTTP 400 InvalidToken error.'
    ListDataLakesRequest:
      type: object
      properties:
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: The list of Regions where Security Lake is enabled.
    ListDataLakesResponse:
      type: object
      properties:
        dataLakes:
          allOf:
          - $ref: '#/components/schemas/DataLakeResourceList'
          description: Retrieves the Security Lake configuration object.
    ListLogSourcesRequest:
      type: object
      properties:
        accounts:
          allOf:
          - $ref: '#/components/schemas/AccountList'
          description: The list of Amazon Web Services accounts for which log sources
            are displayed.
        regions:
          allOf:
          - $ref: '#/components/schemas/RegionList'
          description: The list of Regions for which log sources are displayed.
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceResourceList'
          description: The list of sources for which log sources are displayed.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of accounts for which the log sources are
            displayed.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If nextToken is returned, there are more results available.
            You can repeat the call using the returned token to retrieve the next
            page.
    ListLogSourcesResponse:
      type: object
      properties:
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceList'
          description: The list of log sources in your organization that send data
            to the data lake.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If nextToken is returned, there are more results available.
            You can repeat the call using the returned token to retrieve the next
            page.
    ListSubscribersRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If nextToken is returned, there are more results available.
            You can repeat the call using the returned token to retrieve the next
            page.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of accounts for which the configuration
            is displayed.
    ListSubscribersResponse:
      type: object
      properties:
        subscribers:
          allOf:
          - $ref: '#/components/schemas/SubscriberResourceList'
          description: The subscribers available for the specified Security Lake account
            ID.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If nextToken is returned, there are more results available.
            You can repeat the call using the returned token to retrieve the next
            page.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the Amazon Security Lake
            resource for which you want to retrieve the tags.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: An array of objects, one for each tag (key and value) that’s
            associated with the Amazon Security Lake resource.
    LogSource:
      type: object
      properties:
        account:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: Specify the account from which you want to collect logs.
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: Specify the Regions from which you want to collect logs.
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceResourceList'
          description: Specify the sources from which you want to collect logs.
      description: Amazon Security Lake can collect logs and events from natively-supported
        Amazon Web Services services and custom sources.
    LogSourceList:
      type: array
      items:
        $ref: '#/components/schemas/LogSource'
    LogSourceResource:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AwsLogSourceResource'
        description: |-
          Amazon Security Lake supports log and event collection for natively supported Amazon Web Services services. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
      - allOf:
        - $ref: '#/components/schemas/CustomLogSourceResource'
        description: |-
          Amazon Security Lake supports custom source types. For more information, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/custom-sources.html).
      description: |-
        The supported source types from which logs and events are collected in Amazon Security Lake. For a list of supported Amazon Web Services services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
    LogSourceResourceList:
      type: array
      items:
        $ref: '#/components/schemas/LogSourceResource'
    MaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      maxLength: 2048
    NotificationConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/SqsNotificationConfiguration'
        description: |-
          The configurations for SQS subscriber notification.
      - allOf:
        - $ref: '#/components/schemas/HttpsNotificationConfiguration'
        description: |-
          The configurations used for HTTPS subscriber notification.
      description: |-
        Specify the configurations you want to use for subscriber notification to notify the subscriber when new data is written to the data lake for sources that the subscriber consumes in Security Lake.
    OcsfEventClass:
      type: string
      pattern: ^[A-Z\_0-9]*$
    OcsfEventClassList:
      type: array
      items:
        $ref: '#/components/schemas/OcsfEventClass'
    Region:
      type: string
      pattern: ^(us(-gov)?|af|ap|ca|eu|me|sa)-(central|north|(north(?:east|west))|south|south(?:east|west)|east|west)-\d+$
    RegionList:
      type: array
      items:
        $ref: '#/components/schemas/Region'
    RegisterDataLakeDelegatedAdministratorRequest:
      type: object
      properties:
        accountId:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The Amazon Web Services account ID of the Security Lake delegated
            administrator.
      required:
      - accountId
    RegisterDataLakeDelegatedAdministratorResponse:
      type: object
      properties: {}
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        resourceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the resource that could not be found.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the resource that could not be found.
      description: The resource could not be found.
    ResourceShareArn:
      type: string
    ResourceShareName:
      type: string
      pattern: ^LakeFormation(?:-V[0-9]+)-([a-zA-Z0-9]+)-([\\\w\-_:/.@=+]*)$
    RoleArn:
      type: string
      pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
    S3BucketArn:
      type: string
    S3URI:
      type: string
      pattern: ^s3[an]?://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/[^/].*)+$
      minLength: 0
      maxLength: 1024
    SafeString:
      type: string
      pattern: ^[\\\w\-_:/.@=+]*$
    SourceCollectionStatus:
      type: string
      enum:
      - COLLECTING
      - MISCONFIGURED
      - NOT_COLLECTING
    SqsNotificationConfiguration:
      type: object
      properties: {}
      description: The configurations used for EventBridge subscriber notification.
    SubscriberResource:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The subscriber ID of the Amazon Security Lake subscriber account.
        subscriberArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The subscriber ARN of the Amazon Security Lake subscriber account.
        subscriberIdentity:
          allOf:
          - $ref: '#/components/schemas/AwsIdentity'
          description: The Amazon Web Services identity used to access your data.
        subscriberName:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The name of your Amazon Security Lake subscriber account.
        subscriberDescription:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The subscriber descriptions for a subscriber account. The description
            for a subscriber includes `subscriberName`, `accountID`, `externalID`,
            and `subscriberId`.
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceResourceList'
          description: Amazon Security Lake supports log and event collection for
            natively supported Amazon Web Services services. For more information,
            see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/source-management.html).
        accessTypes:
          allOf:
          - $ref: '#/components/schemas/AccessTypeList'
          description: 'You can choose to notify subscribers of new objects with an
            Amazon Simple Queue Service (Amazon SQS) queue or through messaging to
            an HTTPS endpoint provided by the subscriber.


            Subscribers can consume data by directly querying Lake Formation tables
            in your Amazon S3 bucket through services like Amazon Athena. This subscription
            type is defined as `LAKEFORMATION`.'
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) specifying the role of the subscriber.
        s3BucketArn:
          allOf:
          - $ref: '#/components/schemas/S3BucketArn'
          description: The ARN for the Amazon S3 bucket.
        subscriberEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The subscriber endpoint to which exception messages are posted.
        subscriberStatus:
          allOf:
          - $ref: '#/components/schemas/SubscriberStatus'
          description: The subscriber status of the Amazon Security Lake subscriber
            account.
        resourceShareArn:
          allOf:
          - $ref: '#/components/schemas/ResourceShareArn'
          description: 'The Amazon Resource Name (ARN) which uniquely defines the
            Amazon Web Services RAM resource share. Before accepting the RAM resource
            share invitation, you can view details related to the RAM resource share.


            This field is available only for Lake Formation subscribers created after
            March 8, 2023.'
        resourceShareName:
          allOf:
          - $ref: '#/components/schemas/ResourceShareName'
          description: The name of the resource share.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the subscriber was created.
        updatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the subscriber was last updated.
      required:
      - subscriberId
      - subscriberArn
      - subscriberIdentity
      - subscriberName
      - sources
      description: Provides details about the Amazon Security Lake account subscription.
        Subscribers are notified of new objects for a source as the data is written
        to your Amazon S3 bucket for Security Lake.
    SubscriberResourceList:
      type: array
      items:
        $ref: '#/components/schemas/SubscriberResource'
    SubscriberStatus:
      type: string
      enum:
      - ACTIVE
      - DEACTIVATED
      - PENDING
      - READY
    SubscriptionProtocol:
      type: string
      pattern: ^[a-z\-]*$
    Tag:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The name of the tag. This is a general label that acts as a
            category for a more specific tag value (`value`).
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value that’s associated with the specified tag key (`key`).
            This value acts as a descriptor for the tag key. A tag value cannot be
            null, but it can be an empty string.
      required:
      - key
      - value
      description: 'A _tag_ is a label that you can define and associate with Amazon
        Web Services resources, including certain types of Amazon Security Lake resources.
        Tags can help you identify, categorize, and manage resources in different
        ways, such as by owner, environment, or other criteria. You can associate
        tags with the following types of Security Lake resources: subscribers, and
        the data lake configuration for your Amazon Web Services account in individual
        Amazon Web Services Regions.


        A resource can have up to 50 tags. Each tag consists of a required _tag key_
        and an associated _tag value_. A _tag key_ is a general label that acts as
        a category for a more specific tag value. Each tag key must be unique and
        it can have only one tag value. A _tag value_ acts as a descriptor for a tag
        key. Tag keys and values are case sensitive. They can contain letters, numbers,
        spaces, or the following symbols: _ . : / = + @ -


        For more information, see [Tagging Amazon Security Lake resources](https://docs.aws.amazon.com/security-lake/latest/userguide/tagging-resources.html)
        in the _Amazon Security Lake User Guide_.'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the Amazon Security Lake
            resource to add or update the tags for.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: An array of objects, one for each tag (key and value) to associate
            with the Amazon Security Lake resource. For each tag, you must specify
            both a tag key and a tag value. A tag value cannot be null, but it can
            be an empty string.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The code for the service in Service Quotas.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: That the rate of requests to Security Lake is exceeding the
            request quotas for your Amazon Web Services account.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Retry the request after the specified time.
      description: The limit on the number of requests per second was exceeded.
    UUID:
      type: string
      pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the Amazon Security Lake
            resource to remove one or more tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of one or more tag keys. For each value in the list,
            specify the tag key for a tag to remove from the Amazon Security Lake
            resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateDataLakeExceptionSubscriptionRequest:
      type: object
      properties:
        subscriptionProtocol:
          allOf:
          - $ref: '#/components/schemas/SubscriptionProtocol'
          description: The subscription protocol to which exception messages are posted.
        notificationEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The account that is subscribed to receive exception notifications.
        exceptionTimeToLive:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The time-to-live (TTL) for the exception message to remain.
            It is the duration of time until which the exception message remains.
      required:
      - subscriptionProtocol
      - notificationEndpoint
    UpdateDataLakeExceptionSubscriptionResponse:
      type: object
      properties: {}
    UpdateDataLakeRequest:
      type: object
      properties:
        configurations:
          allOf:
          - $ref: '#/components/schemas/DataLakeConfigurationList'
          description: Specifies the Region or Regions that will contribute data to
            the rollup region.
        metaStoreManagerRoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The Amazon Resource Name (ARN) used to create and update the
            Glue table. This table contains partitions generated by the ingestion
            and normalization of Amazon Web Services log sources and custom sources.
      required:
      - configurations
    UpdateDataLakeResponse:
      type: object
      properties:
        dataLakes:
          allOf:
          - $ref: '#/components/schemas/DataLakeResourceList'
          description: The created Security Lake configuration object.
    UpdateSubscriberNotificationRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: The subscription ID for which the subscription notification
            is specified.
        configuration:
          allOf:
          - $ref: '#/components/schemas/NotificationConfiguration'
          description: The configuration for subscriber notification.
      required:
      - subscriberId
      - configuration
    UpdateSubscriberNotificationResponse:
      type: object
      properties:
        subscriberEndpoint:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The subscriber endpoint to which exception messages are posted.
    UpdateSubscriberRequest:
      type: object
      properties:
        subscriberId:
          allOf:
          - $ref: '#/components/schemas/UUID'
          description: A value created by Security Lake that uniquely identifies your
            subscription.
        subscriberIdentity:
          allOf:
          - $ref: '#/components/schemas/AwsIdentity'
          description: The Amazon Web Services identity used to access your data.
        subscriberName:
          allOf:
          - $ref: '#/components/schemas/SafeString'
          description: The name of the Security Lake account subscriber.
        subscriberDescription:
          allOf:
          - $ref: '#/components/schemas/DescriptionString'
          description: The description of the Security Lake account subscriber.
        sources:
          allOf:
          - $ref: '#/components/schemas/LogSourceResourceList'
          description: The supported Amazon Web Services services from which logs
            and events are collected. For the list of supported Amazon Web Services
            services, see the [Amazon Security Lake User Guide](https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html).
      required:
      - subscriberId
    UpdateSubscriberResponse:
      type: object
      properties:
        subscriber:
          allOf:
          - $ref: '#/components/schemas/SubscriberResource'
          description: The updated subscriber information.
