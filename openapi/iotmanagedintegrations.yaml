openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: iot_managed_integrations
  x-aws-serviceName: iotmanagedintegrations
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2025-03-03'
  title: Managed integrations for AWS IoT Device Management
  description: |-
    Managed integrations is a feature of AWS IoT Device Management that enables developers to quickly build innovative IoT solutions. Customers can use managed integrations to automate device setup workflows and support interoperability across many devices, regardless of device vendor or connectivity protocol. This allows developers to use a single user-interface to control, manage, and operate a range of devices.
servers:
- description: The Managed integrations for AWS IoT Device Management regional endpoint
  url: https://api.iotmanagedintegrations.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /credential-lockers:
    post:
      operationId: CreateCredentialLocker
      description: |-
        Create a product credential locker. This operation will trigger the creation of all the manufacturing resources including the Wi-Fi setup key pair and device certificate.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/CredentialLockerName'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListCredentialLockers
      description: |-
        List information on an existing credential locker.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /destinations:
    post:
      operationId: CreateDestination
      description: |-
        Create a destination. IoT managed integrations uses the destination to determine where to deliver notifications for a device.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DeliveryDestinationArn:
                  $ref: '#/components/schemas/DeliveryDestinationArn'
                DeliveryDestinationType:
                  $ref: '#/components/schemas/DeliveryDestinationType'
                Name:
                  $ref: '#/components/schemas/DestinationName'
                RoleArn:
                  $ref: '#/components/schemas/DeliveryDestinationRoleArn'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Description:
                  $ref: '#/components/schemas/DestinationDescription'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListDestinations
      description: |-
        List all destination names under one Amazon Web Services account.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /event-log-configurations:
    post:
      operationId: CreateEventLogConfiguration
      description: |-
        Set the event log configuration for the account, resource type, or specific resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ResourceType:
                  $ref: '#/components/schemas/SmartHomeResourceType'
                ResourceId:
                  $ref: '#/components/schemas/SmartHomeResourceId'
                EventLogLevel:
                  $ref: '#/components/schemas/LogLevel'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEventLogConfigurations
      description: |-
        List all event log configurations for an account.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things:
    post:
      operationId: CreateManagedThing
      description: |-
        Creates a managed thing. A managed thing contains the device identifier, protocol supported, and capabilities of the device in a protocol-specific format.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Role:
                  $ref: '#/components/schemas/Role'
                Owner:
                  $ref: '#/components/schemas/Owner'
                CredentialLockerId:
                  $ref: '#/components/schemas/CredentialLockerId'
                AuthenticationMaterial:
                  $ref: '#/components/schemas/AuthMaterialString'
                AuthenticationMaterialType:
                  $ref: '#/components/schemas/AuthMaterialType'
                SerialNumber:
                  $ref: '#/components/schemas/SerialNumber'
                Brand:
                  $ref: '#/components/schemas/Brand'
                Model:
                  $ref: '#/components/schemas/Model'
                Name:
                  $ref: '#/components/schemas/Name'
                CapabilityReport:
                  $ref: '#/components/schemas/CapabilityReport'
                Capabilities:
                  $ref: '#/components/schemas/Capabilities'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Classification:
                  $ref: '#/components/schemas/Classification'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
                MetaData:
                  $ref: '#/components/schemas/MetaData'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListManagedThings
      description: |-
        List all of the associations and statuses for a managed thing by its owner.
      parameters:
      - name: OwnerFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Owner'
      - name: CredentialLockerFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/CredentialLockerId'
      - name: RoleFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Role'
      - name: ParentControllerIdentifierFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ParentControllerId'
      - name: ConnectorPolicyIdFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ConnectorPolicyId'
      - name: SerialNumberFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SerialNumber'
      - name: ProvisioningStatusFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ProvisioningStatus'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-configurations:
    post:
      operationId: CreateNotificationConfiguration
      description: |-
        Creates a notification configuration. A configuration is a connection between an event type and a destination that you have already created.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EventType:
                  $ref: '#/components/schemas/EventType'
                DestinationName:
                  $ref: '#/components/schemas/DestinationName'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListNotificationConfigurations
      description: |-
        List all notification configurations.
      parameters:
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ota-tasks:
    post:
      operationId: CreateOtaTask
      description: |-
        Create an over-the-air (OTA) task to update a device.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/OtaDescription'
                S3Url:
                  $ref: '#/components/schemas/S3Url'
                Protocol:
                  $ref: '#/components/schemas/OtaProtocol'
                Target:
                  $ref: '#/components/schemas/Target'
                TaskConfigurationId:
                  $ref: '#/components/schemas/OtaTaskConfigurationId'
                OtaMechanism:
                  $ref: '#/components/schemas/OtaMechanism'
                OtaType:
                  $ref: '#/components/schemas/OtaType'
                OtaTargetQueryString:
                  $ref: '#/components/schemas/OtaTargetQueryString'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                OtaSchedulingConfig:
                  $ref: '#/components/schemas/OtaTaskSchedulingConfig'
                OtaTaskExecutionRetryConfig:
                  $ref: '#/components/schemas/OtaTaskExecutionRetryConfig'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListOtaTasks
      description: |-
        List all of the over-the-air (OTA) tasks.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OtaNextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ota-task-configurations:
    post:
      operationId: CreateOtaTaskConfiguration
      description: |-
        Create a configuraiton for the over-the-air (OTA) task.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/OtaDescription'
                Name:
                  $ref: '#/components/schemas/OtaTaskConfigurationName'
                PushConfig:
                  $ref: '#/components/schemas/PushConfig'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListOtaTaskConfigurations
      description: |-
        List all of the over-the-air (OTA) task configurations.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /provisioning-profiles:
    post:
      operationId: CreateProvisioningProfile
      description: |-
        Create a provisioning profile for a device to execute the provisioning flows using a provisioning template. The provisioning template is a document that defines the set of resources and policies applied to a device during the provisioning process.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ProvisioningType:
                  $ref: '#/components/schemas/ProvisioningType'
                CaCertificate:
                  $ref: '#/components/schemas/CaCertificate'
                Name:
                  $ref: '#/components/schemas/ProvisioningProfileName'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListProvisioningProfiles
      description: |-
        List the provisioning profiles within the Amazon Web Services account.
      parameters:
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /credential-lockers/{Identifier}:
    delete:
      operationId: DeleteCredentialLocker
      description: |-
        Delete a credential locker.

        This operation can't be undone and any existing device won't be able to use IoT managed integrations.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CredentialLockerId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetCredentialLocker
      description: |-
        Get information on an existing credential locker
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CredentialLockerId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /destinations/{Name}:
    delete:
      operationId: DeleteDestination
      description: |-
        Deletes a customer-managed destination specified by id.
      parameters:
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DestinationName'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetDestination
      description: |-
        Gets a destination by ID.
      parameters:
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DestinationName'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateDestination
      description: |-
        Update a destination specified by id.
      parameters:
      - name: Name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DestinationName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DeliveryDestinationArn:
                  $ref: '#/components/schemas/DeliveryDestinationArn'
                DeliveryDestinationType:
                  $ref: '#/components/schemas/DeliveryDestinationType'
                RoleArn:
                  $ref: '#/components/schemas/DeliveryDestinationRoleArn'
                Description:
                  $ref: '#/components/schemas/DestinationDescription'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /event-log-configurations/{Id}:
    delete:
      operationId: DeleteEventLogConfiguration
      description: |-
        Delete an event log configuration.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LogConfigurationId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEventLogConfiguration
      description: |-
        Get an event log configuration.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LogConfigurationId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateEventLogConfiguration
      description: |-
        Update an event log configuration by log configuration ID.
      parameters:
      - name: Id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/LogConfigurationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                EventLogLevel:
                  $ref: '#/components/schemas/LogLevel'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things/{Identifier}:
    delete:
      operationId: DeleteManagedThing
      description: |-
        Delete a managed thing. If a controller is deleted, all of the devices connected to it will have their status changed to `PENDING`. It is not possible to remove a cloud device.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      - name: Force
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '204': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetManagedThing
      description: |-
        Get the attributes and capabilities associated with a managed thing.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateManagedThing
      description: |-
        Update the attributes and capabilities associated with a managed thing.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Owner:
                  $ref: '#/components/schemas/Owner'
                CredentialLockerId:
                  $ref: '#/components/schemas/CredentialLockerId'
                SerialNumber:
                  $ref: '#/components/schemas/SerialNumber'
                Brand:
                  $ref: '#/components/schemas/Brand'
                Model:
                  $ref: '#/components/schemas/Model'
                Name:
                  $ref: '#/components/schemas/Name'
                CapabilityReport:
                  $ref: '#/components/schemas/CapabilityReport'
                Capabilities:
                  $ref: '#/components/schemas/Capabilities'
                Classification:
                  $ref: '#/components/schemas/Classification'
                HubNetworkMode:
                  $ref: '#/components/schemas/HubNetworkMode'
                MetaData:
                  $ref: '#/components/schemas/MetaData'
      responses:
        '204': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-configurations/{EventType}:
    delete:
      operationId: DeleteNotificationConfiguration
      description: |-
        Deletes a notification configuration.
      parameters:
      - name: EventType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventType'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetNotificationConfiguration
      description: |-
        Get a notification configuration.
      parameters:
      - name: EventType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventType'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateNotificationConfiguration
      description: |-
        Update a notification configuration.
      parameters:
      - name: EventType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DestinationName:
                  $ref: '#/components/schemas/DestinationName'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ota-tasks/{Identifier}:
    delete:
      operationId: DeleteOtaTask
      description: |-
        Delete the over-the-air (OTA) task.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetOtaTask
      description: |-
        Get the over-the-air (OTA) task.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateOtaTask
      description: |-
        Update an over-the-air (OTA) task.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/OtaDescription'
                TaskConfigurationId:
                  $ref: '#/components/schemas/OtaTaskConfigurationId'
      responses:
        '204': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ota-task-configurations/{Identifier}:
    delete:
      operationId: DeleteOtaTaskConfiguration
      description: |-
        Delete the over-the-air (OTA) task configuration.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskConfigurationId'
      responses:
        '204': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetOtaTaskConfiguration
      description: |-
        Get a configuraiton for the over-the-air (OTA) task.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskConfigurationId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /provisioning-profiles/{Identifier}:
    delete:
      operationId: DeleteProvisioningProfile
      description: |-
        Delete a provisioning profile.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProvisioningProfileId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetProvisioningProfile
      description: |-
        Get a provisioning profile by template name.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ProvisioningProfileId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /custom-endpoint:
    get:
      operationId: GetCustomEndpoint
      description: |-
        Returns the IoT managed integrations custom endpoint.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: RegisterCustomEndpoint
      description: |-
        Customers can request IoT managed integrations to manage the server trust for them or bring their own external server trusts for the custom domain. Returns an IoT managed integrations endpoint.
      parameters: []
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /configuration/account/encryption:
    get:
      operationId: GetDefaultEncryptionConfiguration
      description: |-
        Retrieves information about the default encryption configuration for the Amazon Web Services account in the default or specified region. For more information, see [Key management](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html) in the _AWS IoT SiteWise User Guide_.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: PutDefaultEncryptionConfiguration
      description: |-
        Sets the default encryption configuration for the Amazon Web Services account. For more information, see [Key management](https://docs.aws.amazon.com/iot-sitewise/latest/userguide/key-management.html) in the AWS IoT SiteWise User Guide.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                encryptionType:
                  $ref: '#/components/schemas/EncryptionType'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /device-discoveries/{Identifier}:
    get:
      operationId: GetDeviceDiscovery
      description: |-
        Get the current state of a device discovery.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DeviceDiscoveryId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /hub-configuration:
    get:
      operationId: GetHubConfiguration
      description: |-
        Get a hub configuration.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutHubConfiguration
      description: |-
        Update a hub configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                HubTokenTimerExpirySettingInSeconds:
                  $ref: '#/components/schemas/HubTokenTimerExpirySettingInSeconds'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things-capabilities/{Identifier}:
    get:
      operationId: GetManagedThingCapabilities
      description: |-
        Get the capabilities for a managed thing using the device ID.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things-connectivity-data/{Identifier}:
    post:
      operationId: GetManagedThingConnectivityData
      description: |-
        Get the connectivity status of a managed thing.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things-metadata/{Identifier}:
    get:
      operationId: GetManagedThingMetaData
      description: |-
        Get the metadata information for a managed thing.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-thing-states/{ManagedThingId}:
    get:
      operationId: GetManagedThingState
      description: |-
        Returns the managed thing state for the given device Id.
      parameters:
      - name: ManagedThingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /runtime-log-configurations/{ManagedThingId}:
    get:
      operationId: GetRuntimeLogConfiguration
      description: |-
        Get the runtime log configuration for a specific managed thing or for all managed things as a group.
      parameters:
      - name: ManagedThingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutRuntimeLogConfiguration
      description: |-
        Set the runtime log configuration for a specific managed thing or for all managed things as a group.
      parameters:
      - name: ManagedThingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RuntimeLogConfigurations:
                  $ref: '#/components/schemas/RuntimeLogConfigurations'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: ResetRuntimeLogConfiguration
      description: |-
        Reset a runtime log configuration for a specific managed thing or for all managed things as a group.
      parameters:
      - name: ManagedThingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /schema-versions/{Type}/{SchemaVersionedId}:
    get:
      operationId: GetSchemaVersion
      description: |-
        Gets a schema version with the provided information.
      parameters:
      - name: Type
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SchemaVersionType'
      - name: SchemaVersionedId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SchemaVersionedId'
      - name: Format
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SchemaVersionFormat'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-thing-schemas/{Identifier}:
    get:
      operationId: ListManagedThingSchemas
      description: |-
        List schemas associated with a managed thing.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      - name: EndpointIdFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EndpointId'
      - name: CapabilityIdFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/CapabilityId'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /ota-tasks/{Identifier}/devices:
    get:
      operationId: ListOtaTaskExecutions
      description: |-
        List all of the over-the-air (OTA) task executions.
      parameters:
      - name: Identifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/OtaTaskId'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OtaNextToken'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /schema-versions/{Type}:
    get:
      operationId: ListSchemaVersions
      description: |-
        Lists schema versions with the provided information.
      parameters:
      - name: Type
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SchemaVersionType'
      - name: MaxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: NextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: SchemaIdFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SchemaId'
      - name: NamespaceFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SchemaVersionNamespaceName'
      - name: VisibilityFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SchemaVersionVisibility'
      - name: SemanticVersionFilter
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SchemaVersionVersion'
      responses:
        '200': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-things-command/{ManagedThingId}:
    post:
      operationId: SendManagedThingCommand
      description: |-
        Send the command to the device represented by the managed thing.
      parameters:
      - name: ManagedThingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedThingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Endpoints:
                  $ref: '#/components/schemas/CommandEndpoints'
                ConnectorAssociationId:
                  $ref: '#/components/schemas/ConnectorAssociationId'
      responses:
        '202': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /device-discoveries:
    post:
      operationId: StartDeviceDiscovery
      description: |-
        During user-guided setup, this is used to start device discovery. The authentication material (install code) is passed as a message to the controller telling it to start the discovery.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DiscoveryType:
                  $ref: '#/components/schemas/DiscoveryType'
                ControllerIdentifier:
                  $ref: '#/components/schemas/ManagedThingId'
                ConnectorAssociationIdentifier:
                  $ref: '#/components/schemas/ConnectorAssociationId'
                AuthenticationMaterial:
                  $ref: '#/components/schemas/DiscoveryAuthMaterialString'
                AuthenticationMaterialType:
                  $ref: '#/components/schemas/DiscoveryAuthMaterialType'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
                Tags:
                  $ref: '#/components/schemas/TagsMap'
      responses:
        '201': {}
        '403':
          description: |-
            User is not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            There is a conflict with the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Internal error from the service that indicates an unexpected error or that the service is unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is temporarily unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '401':
          description: |-
            You are not authorized to perform this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedException'
        '400':
          description: |-
            A validation error occurred when performing the API request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AbortConfigCriteria:
      type: object
      properties:
        Action:
          allOf:
          - $ref: '#/components/schemas/AbortCriteriaAction'
          description: The action taken by the abort configuration.
        FailureType:
          allOf:
          - $ref: '#/components/schemas/AbortCriteriaFailureType'
          description: Over-the-air (OTA) task abort criteria failure type.
        MinNumberOfExecutedThings:
          allOf:
          - $ref: '#/components/schemas/MinNumberOfExecutedThings'
          description: The minimum number of things that must receive task execution
            notifications before the task can be aborted.
        ThresholdPercentage:
          allOf:
          - $ref: '#/components/schemas/ThresholdPercentage'
          description: The minimum percentage of over-the-air (OTA) task execution
            failures that must occur to initiate the last abort.
      description: Structure representing one abort config criteria.
    AbortConfigCriteriaList:
      type: array
      items:
        $ref: '#/components/schemas/AbortConfigCriteria'
    AbortCriteriaAction:
      type: string
      enum:
      - CANCEL
    AbortCriteriaFailureType:
      type: string
      enum:
      - FAILED
      - REJECTED
      - TIMED_OUT
      - ALL
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: User is not authorized.
    ActionName:
      type: string
      pattern: ^[/a-zA-Z0-9\._ ]+$
      minLength: 1
      maxLength: 128
    ActionReference:
      type: string
      pattern: ^[a-zA-Z.]+$
    ActionTraceId:
      type: string
      pattern: ^[a-zA-Z0-9]+=(?:_[0-9]+)?$
      minLength: 16
      maxLength: 20
    AdvertisedProductId:
      type: string
      pattern: ^([A-Za-z0-9!#$%&()*\+\-;<=>?@^_`{|}~])+$
      minLength: 5
      maxLength: 5
    AttributeName:
      type: string
      pattern: '[a-zA-Z0-9_.,@/:#-]+'
      maxLength: 128
    AttributeValue:
      type: string
      pattern: '[a-zA-Z0-9_.,@/:#-]*'
      maxLength: 800
    AuthMaterialString:
      type: string
      pattern: '^[0-9A-Za-z!#$%&()*\+\-;<=>?@^_`{|}~\/: ]+$'
      minLength: 1
      maxLength: 512
    AuthMaterialType:
      type: string
      enum:
      - WIFI_SETUP_QR_BAR_CODE
      - ZWAVE_QR_BAR_CODE
      - ZIGBEE_QR_BAR_CODE
    BaseRatePerMinute:
      type: integer
      minimum: 1
      maximum: 100
    Brand:
      type: string
      pattern: ^[A-Za-z0-9-_ ]+$
      minLength: 1
      maxLength: 128
    CaCertificate:
      type: string
      pattern: ^-----BEGIN CERTIFICATE-----.*(.|\n)*-----END CERTIFICATE-----\n?$
    Capabilities:
      type: string
      pattern: ^[a-zA-Z0-9\s'\x{0022},.:\\\/{$}\[\]=_\-\+]+$
      minLength: 1
      maxLength: 65535
    CapabilityAction:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/CapabilityActionName'
          description: Describe a capability action with a name.
        ref:
          allOf:
          - $ref: '#/components/schemas/ActionReference'
          description: Describe a capability action with an reference.
        actionTraceId:
          allOf:
          - $ref: '#/components/schemas/ActionTraceId'
          description: Describe a capability action with an `actionTraceId` for a
            response command.
        parameters:
          allOf:
          - $ref: '#/components/schemas/CapabilityProperties'
          description: Describe a capability action with a capability property.
      required:
      - name
      description: Action for an Amazon Web Services capability, containing the action
        parameters for control.
    CapabilityActionName:
      type: string
      pattern: ^[/a-zA-Z]+$
    CapabilityActions:
      type: array
      items:
        $ref: '#/components/schemas/CapabilityAction'
    CapabilityId:
      type: string
      pattern: ^[a-zA-Z0-9./]+(@\d+\.\d+)?$
      minLength: 1
      maxLength: 128
    CapabilityName:
      type: string
      pattern: ^[/a-zA-Z0-9\._ ]+$
      minLength: 1
      maxLength: 128
    CapabilityProperties:
      type: object
      additionalProperties: true
      x-sensitive: true
    CapabilityReport:
      type: object
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportVersion'
          description: The version of the capability report.
        nodeId:
          allOf:
          - $ref: '#/components/schemas/NodeId'
          description: The numeric identifier of the node.
        endpoints:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportEndpoints'
          description: The endpoints used in the capability report.
      required:
      - version
      - endpoints
      description: Report of all capabilities supported by the device.
    CapabilityReportActions:
      type: array
      items:
        $ref: '#/components/schemas/ActionName'
    CapabilityReportCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/CapabilityReportCapability'
    CapabilityReportCapability:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionedId'
          description: The id of the schema version.
        name:
          allOf:
          - $ref: '#/components/schemas/CapabilityName'
          description: The name of the capability.
        version:
          allOf:
          - $ref: '#/components/schemas/CapabilityVersion'
          description: The version of the capability.
        properties:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportProperties'
          description: The capability properties used in the capability report.
        actions:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportActions'
          description: The capability actions used in the capability report.
        events:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportEvents'
          description: The capability events used in the capability report.
      required:
      - id
      - name
      - version
      - properties
      - actions
      - events
      description: The capability used in capability report.
    CapabilityReportEndpoint:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/EndpointId'
          description: The id of the endpoint used in the capability report.
        deviceTypes:
          allOf:
          - $ref: '#/components/schemas/DeviceTypes'
          description: The type of device.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/CapabilityReportCapabilities'
          description: The capabilities used in the capability report.
      required:
      - id
      - deviceTypes
      - capabilities
      description: The endpoint used in the capability report.
    CapabilityReportEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/CapabilityReportEndpoint'
    CapabilityReportEvents:
      type: array
      items:
        $ref: '#/components/schemas/EventName'
    CapabilityReportProperties:
      type: array
      items:
        $ref: '#/components/schemas/PropertyName'
    CapabilityReportVersion:
      type: string
      pattern: ^1\.0\.0$
      minLength: 1
      maxLength: 10
    CapabilityVersion:
      type: string
      pattern: ^(0|[1-9][0-9]*)$
      minLength: 1
      maxLength: 64
    ClaimCertificate:
      type: string
    ClaimCertificatePrivateKey:
      type: string
    Classification:
      type: string
      minLength: 1
      maxLength: 64
    ClientToken:
      type: string
      pattern: ^[a-zA-Z0-9=_-]+$
      minLength: 1
      maxLength: 64
    CommandCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/CommandCapability'
    CommandCapability:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionedId'
          description: Describe the capability with an id.
        name:
          allOf:
          - $ref: '#/components/schemas/CapabilityName'
          description: Describe the capability with an name.
        version:
          allOf:
          - $ref: '#/components/schemas/CapabilityVersion'
          description: Describe the capability with a version.
        actions:
          allOf:
          - $ref: '#/components/schemas/CapabilityActions'
          description: Describe the command capability with the actions it supports.
      required:
      - id
      - name
      - version
      - actions
      description: The command capabilities added for the managed thing
    CommandEndpoint:
      type: object
      properties:
        endpointId:
          allOf:
          - $ref: '#/components/schemas/EndpointId'
          description: The id of the endpoint for a managed thing.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/CommandCapabilities'
          description: Describe the endpoint with an id, a name, and the relevant
            capabilities for sending commands.
      required:
      - endpointId
      - capabilities
      description: The endpoint for a managed thing when sending a command.
    CommandEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/CommandEndpoint'
    ConfigurationError:
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/ConfigurationErrorCode'
          description: The error code returned when the default encryption configuration
            update fails.
        message:
          allOf:
          - $ref: '#/components/schemas/ConfigurationErrorMessage'
          description: The error message returned when the default encryption configuration
            update fails.
      description: Provides the default encryption configuration error update details.
    ConfigurationErrorCode:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 256
    ConfigurationErrorMessage:
      type: string
      pattern: ^[a-zA-Z0-9\-._,]+$
      minLength: 1
      maxLength: 65535
    ConfigurationState:
      type: string
      enum:
      - ENABLED
      - UPDATE_IN_PROGRESS
      - UPDATE_FAILED
    ConfigurationStatus:
      type: object
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/ConfigurationError'
          description: The error details describing a failed default encryption configuration
            update.
        state:
          allOf:
          - $ref: '#/components/schemas/ConfigurationState'
          description: The status state describing the default encryption configuration
            update.
      required:
      - state
      description: Provides the status of the default encryption configuration for
        an Amazon Web Services account.
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: There is a conflict with the request.
    ConnectivityStatus:
      type: boolean
    ConnectivityTimestamp:
      type: string
      format: date-time
    ConnectorAssociationId:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      minLength: 1
      maxLength: 64
    ConnectorDeviceId:
      type: string
      pattern: ^[a-zA-Z0-9_.,@-]+$
      minLength: 1
      maxLength: 256
    ConnectorPolicyId:
      type: string
      pattern: ^[A-Za-z0-9-_]+$
      minLength: 1
      maxLength: 64
    CreateCredentialLockerRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerName'
          description: The name of the credential locker.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the credential
            locker.
    CreateCredentialLockerResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker creation request.
        Arn:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerArn'
          description: The Amazon Resource Name (ARN) of the credential locker.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerCreatedAt'
          description: The timestamp value of when the credential locker request occurred.
    CreateDestinationRequest:
      type: object
      properties:
        DeliveryDestinationArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationArn'
          description: The Amazon Resource Name (ARN) of the customer-managed destination.
        DeliveryDestinationType:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationType'
          description: The destination type for the customer-managed destination.
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationRoleArn'
          description: The Amazon Resource Name (ARN) of the delivery destination
            role.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Description:
          allOf:
          - $ref: '#/components/schemas/DestinationDescription'
          description: The description of the customer-managed destination.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the destination.
      required:
      - DeliveryDestinationArn
      - DeliveryDestinationType
      - Name
      - RoleArn
    CreateDestinationResponse:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
    CreateEventLogConfigurationRequest:
      type: object
      properties:
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceType'
          description: The type of resource for the event log configuration.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceId'
          description: The identifier of the resource for the event log configuration.
        EventLogLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The logging level for the event log configuration.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
      required:
      - ResourceType
      - EventLogLevel
    CreateEventLogConfigurationResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The identifier of the event log configuration request.
    CreateManagedThingRequest:
      type: object
      properties:
        Role:
          allOf:
          - $ref: '#/components/schemas/Role'
          description: The type of device used. This will be the hub controller, cloud
            device, or AWS IoT device.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: Owner of the device, usually an indication of whom the device
            belongs to. This value should not contain personal identifiable information.
        CredentialLockerId:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential for the managed thing.
        AuthenticationMaterial:
          allOf:
          - $ref: '#/components/schemas/AuthMaterialString'
          description: The authentication material defining the device connectivity
            setup requests. The authentication materials used are the device bar code.
        AuthenticationMaterialType:
          allOf:
          - $ref: '#/components/schemas/AuthMaterialType'
          description: The type of authentication material used for device connectivity
            setup requests.
        SerialNumber:
          allOf:
          - $ref: '#/components/schemas/SerialNumber'
          description: The serial number of the device.
        Brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          description: The brand of the device.
        Model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the device.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the managed thing representing the physical device.
        CapabilityReport:
          allOf:
          - $ref: '#/components/schemas/CapabilityReport'
          description: A report of the capabilities for the managed thing.
        Capabilities:
          allOf:
          - $ref: '#/components/schemas/Capabilities'
          description: The capabilities of the device such as light bulb.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Classification:
          allOf:
          - $ref: '#/components/schemas/Classification'
          description: The classification of the managed thing such as light bulb
            or thermostat.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the managed
            thing.
        MetaData:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: The metadata for the managed thing.
      required:
      - Role
      - AuthenticationMaterial
      - AuthenticationMaterialType
    CreateManagedThingResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the managed thing.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ManagedThingArn'
          description: The Amazon Resource Name (ARN) of the managed thing.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the device creation request occurred.
    CreateNotificationConfigurationRequest:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
        DestinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the destination for the notification configuration.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the notification
            configuration.
      required:
      - EventType
      - DestinationName
    CreateNotificationConfigurationResponse:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
    CreateOtaTaskConfigurationRequest:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: A description of the over-the-air (OTA) task configuration.
        Name:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationName'
          description: The name of the over-the-air (OTA) task.
        PushConfig:
          allOf:
          - $ref: '#/components/schemas/PushConfig'
          description: Describes the type of configuration used for the over-the-air
            (OTA) task.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
    CreateOtaTaskConfigurationResponse:
      type: object
      properties:
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier of the over-the-air (OTA) task configuration.
    CreateOtaTaskRequest:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: The description of the over-the-air (OTA) task.
        S3Url:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The URL to the Amazon S3 bucket where the over-the-air (OTA)
            task is stored.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/OtaProtocol'
          description: The connection protocol the over-the-air (OTA) task uses to
            update the device.
        Target:
          allOf:
          - $ref: '#/components/schemas/Target'
          description: The device targeted for the over-the-air (OTA) task.
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier for the over-the-air (OTA) task configuration.
        OtaMechanism:
          allOf:
          - $ref: '#/components/schemas/OtaMechanism'
          description: The deployment mechanism for the over-the-air (OTA) task.
        OtaType:
          allOf:
          - $ref: '#/components/schemas/OtaType'
          description: The frequency type for the over-the-air (OTA) task.
        OtaTargetQueryString:
          allOf:
          - $ref: '#/components/schemas/OtaTargetQueryString'
          description: The query string to add things to the thing group.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        OtaSchedulingConfig:
          $ref: '#/components/schemas/OtaTaskSchedulingConfig'
        OtaTaskExecutionRetryConfig:
          $ref: '#/components/schemas/OtaTaskExecutionRetryConfig'
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the over-the-air
            (OTA) task.
      required:
      - S3Url
      - OtaType
    CreateOtaTaskResponse:
      type: object
      properties:
        TaskId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The identifier of the over-the-air (OTA) task.
        TaskArn:
          allOf:
          - $ref: '#/components/schemas/OtaTaskArn'
          description: The Amazon Resource Name (ARN) of the over-the-air (OTA) task.
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: A description of the over-the-air (OTA) task.
    CreateProvisioningProfileRequest:
      type: object
      properties:
        ProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ProvisioningType'
          description: The type of provisioning workflow the device uses for onboarding
            to IoT managed integrations.
        CaCertificate:
          allOf:
          - $ref: '#/components/schemas/CaCertificate'
          description: The id of the certificate authority (CA) certificate.
        Name:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileName'
          description: The name of the provisioning template.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the provisioning
            profile.
      required:
      - ProvisioningType
    CreateProvisioningProfileResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileArn'
          description: The Amazon Resource Name (ARN) of the provisioning template
            used in the provisioning profile.
        Name:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileName'
          description: The name of the provisioning template.
        ProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ProvisioningType'
          description: The type of provisioning workflow the device uses for onboarding
            to IoT managed integrations.
        Id:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileId'
          description: The identifier of the provisioning profile.
        ClaimCertificate:
          allOf:
          - $ref: '#/components/schemas/ClaimCertificate'
          description: The id of the claim certificate.
        ClaimCertificatePrivateKey:
          allOf:
          - $ref: '#/components/schemas/ClaimCertificatePrivateKey'
          description: The private key of the claim certificate. This is stored securely
            on the device for validating the connection endpoint with IoT managed
            integrations using the public key.
    CreatedAt:
      type: string
      format: date-time
    CredentialLockerArn:
      type: string
      pattern: ^arn:aws:iotmanagedintegrations:[0-9a-zA-Z-]+:[0-9]+:credential-locker/[0-9a-zA-Z]+$
      minLength: 32
      maxLength: 1011
    CredentialLockerCreatedAt:
      type: string
      format: date-time
    CredentialLockerId:
      type: string
      pattern: ^[a-zA-Z0-9]*$
      minLength: 1
      maxLength: 64
    CredentialLockerListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/CredentialLockerSummary'
    CredentialLockerName:
      type: string
      pattern: ^[A-Za-z0-9-_ ]+$
      minLength: 1
      maxLength: 128
    CredentialLockerSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The id of the credential locker.
        Arn:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerArn'
          description: The Amazon Resource Name (ARN) of the credential locker.
        Name:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerName'
          description: The name of the credential locker.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerCreatedAt'
          description: The timestampe value of when the credential locker was created
            at.
      description: Structure describing one Credential Locker.
    DeleteCredentialLockerRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker.
      required:
      - Identifier
    DeleteDestinationRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The id of the customer-managed destination.
      required:
      - Name
    DeleteEventLogConfigurationRequest:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The identifier of the event log configuration.
      required:
      - Id
    DeleteLocalStoreAfterUpload:
      type: boolean
    DeleteManagedThingRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the managed thing.
        Force:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When set to `TRUE`, a forceful deteletion of the managed thing
            will occur. When set to `FALSE`, a non-forceful deletion of the managed
            thing will occur.
      required:
      - Identifier
    DeleteNotificationConfigurationRequest:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
      required:
      - EventType
    DeleteOtaTaskConfigurationRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier of the over-the-air (OTA) task configuration.
      required:
      - Identifier
    DeleteOtaTaskRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The identifier of the over-the-air (OTA) task.
      required:
      - Identifier
    DeleteProvisioningProfileRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileId'
          description: The name of the provisioning template.
      required:
      - Identifier
    DeliveryDestinationArn:
      type: string
      pattern: ^arn:aws:[0-9a-zA-Z]+:[0-9a-zA-Z-]+:[0-9]+:[0-9a-zA-Z]+/[0-9a-zA-Z._-]+$
      minLength: 20
      maxLength: 2048
    DeliveryDestinationRoleArn:
      type: string
    DeliveryDestinationType:
      type: string
      enum:
      - KINESIS
    DestinationCreatedAt:
      type: string
      format: date-time
    DestinationDescription:
      type: string
      pattern: ^[0-9A-Za-z_\- ]+$
      minLength: 1
      maxLength: 256
    DestinationListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/DestinationSummary'
    DestinationName:
      type: string
      pattern: ^[\p{L}\p{N} ._-]+$
      minLength: 1
      maxLength: 128
    DestinationSummary:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/DestinationDescription'
          description: The description of the customer-managed destination.
        DeliveryDestinationArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationArn'
          description: The Amazon Resource Name (ARN) of the customer-managed destination.
        DeliveryDestinationType:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationType'
          description: The destination type for the customer-managed destination.
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationRoleArn'
          description: The Amazon Resource Name (ARN) of the delivery destination.
      description: Structure describing a destination for IoT managed integrations
        to deliver notifications for a device.
    DestinationUpdatedAt:
      type: string
      format: date-time
    DeviceDiscoveryArn:
      type: string
      pattern: ^arn:aws:iotmanagedintegrations:[0-9a-zA-Z-]+:[0-9]+:device-discovery/[0-9a-zA-Z]+$
    DeviceDiscoveryId:
      type: string
      pattern: ^[A-Za-z0-9]+$
      minLength: 1
      maxLength: 200
    DeviceDiscoveryStatus:
      type: string
      enum:
      - RUNNING
      - SUCCEEDED
      - FAILED
      - TIMED_OUT
    DeviceSpecificKey:
      type: string
      pattern: ^[a-zA-Z0-9=_.,@\+\-]+$
      minLength: 1
      maxLength: 128
    DeviceType:
      type: string
      pattern: ^[a-zA-Z0-9=_. ,@\+\-/]+$
      maxLength: 256
    DeviceTypes:
      type: array
      items:
        $ref: '#/components/schemas/DeviceType'
    DisconnectReasonValue:
      type: string
      enum:
      - AUTH_ERROR
      - CLIENT_INITIATED_DISCONNECT
      - CLIENT_ERROR
      - CONNECTION_LOST
      - DUPLICATE_CLIENTID
      - FORBIDDEN_ACCESS
      - MQTT_KEEP_ALIVE_TIMEOUT
      - SERVER_ERROR
      - SERVER_INITIATED_DISCONNECT
      - THROTTLED
      - WEBSOCKET_TTL_EXPIRATION
      - CUSTOMAUTH_TTL_EXPIRATION
      - UNKNOWN
      - NONE
    DiscoveryAuthMaterialString:
      type: string
      pattern: ^[0-9A-Za-z_\-\+=\/:; ]+$
      minLength: 1
      maxLength: 64
    DiscoveryAuthMaterialType:
      type: string
      enum:
      - ZWAVE_INSTALL_CODE
    DiscoveryFinishedAt:
      type: string
      format: date-time
    DiscoveryStartedAt:
      type: string
      format: date-time
    DiscoveryType:
      type: string
      enum:
      - ZWAVE
      - ZIGBEE
      - CLOUD
    DurationInMinutes:
      type: integer
      minimum: 1
      maximum: 1430
    EncryptionType:
      type: string
      enum:
      - MANAGED_INTEGRATIONS_DEFAULT_ENCRYPTION
      - CUSTOMER_KEY_ENCRYPTION
    EndTime:
      type: string
    EndpointAddress:
      type: string
      pattern: ^[A-Za-z0-9._@-]+$
      minLength: 1
      maxLength: 256
    EndpointId:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      minLength: 1
      maxLength: 64
    ErrorMessage:
      type: string
    EventLogConfigurationListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/EventLogConfigurationSummary'
    EventLogConfigurationSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The identifier of the event log configuration.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceType'
          description: The type of resource for the event log configuration.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceId'
          description: The identifier of the resource for the event log configuration.
        EventLogLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The logging level for the event log configuration.
      description: List of event log configurations.
    EventName:
      type: string
      pattern: ^[/a-zA-Z0-9\._ ]+$
      minLength: 1
      maxLength: 128
    EventType:
      type: string
      enum:
      - DEVICE_COMMAND
      - DEVICE_COMMAND_REQUEST
      - DEVICE_EVENT
      - DEVICE_LIFE_CYCLE
      - DEVICE_STATE
      - DEVICE_OTA
      - CONNECTOR_ASSOCIATION
      - CONNECTOR_ERROR_REPORT
    ExecutionNumber:
      type: integer
      format: int64
    ExponentialRolloutRate:
      type: object
      properties:
        BaseRatePerMinute:
          allOf:
          - $ref: '#/components/schemas/BaseRatePerMinute'
          description: The base rate per minute for the rollout of an over-the-air
            (OTA) task.
        IncrementFactor:
          allOf:
          - $ref: '#/components/schemas/IncrementFactor'
          description: The incremental factor for increasing the rollout rate of an
            over-the-air (OTA) task.
        RateIncreaseCriteria:
          allOf:
          - $ref: '#/components/schemas/RolloutRateIncreaseCriteria'
          description: The criteria for increasing the rollout rate of an over-the-air
            (OTA) task.
      description: Structure representing exponential rate of rollout for an over-the-air
        (OTA) task.
    GetCredentialLockerRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker.
      required:
      - Identifier
    GetCredentialLockerResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker.
        Arn:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerArn'
          description: The Amazon Resource Name (ARN) of the credential locker.
        Name:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerName'
          description: The name of the credential locker.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerCreatedAt'
          description: The timestamp value of when the credential locker requset occurred.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the credential
            locker.
    GetCustomEndpointRequest:
      type: object
      properties: {}
    GetCustomEndpointResponse:
      type: object
      properties:
        EndpointAddress:
          allOf:
          - $ref: '#/components/schemas/EndpointAddress'
          description: The IoT managed integrations dedicated, custom endpoint for
            the device to route traffic through.
      required:
      - EndpointAddress
    GetDefaultEncryptionConfigurationRequest:
      type: object
      properties: {}
    GetDefaultEncryptionConfigurationResponse:
      type: object
      properties:
        configurationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfigurationStatus'
          description: Provides the status of the default encryption configuration
            for an Amazon Web Services account.
        encryptionType:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          description: The type of encryption used for the encryption configuration.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Key Amazon Resource Name (ARN) of the AWS KMS key used
            for KMS encryption if you use `KMS_BASED_ENCRYPTION`.
      required:
      - configurationStatus
      - encryptionType
    GetDestinationRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
      required:
      - Name
    GetDestinationResponse:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/DestinationDescription'
          description: The description of the customer-managed destination.
        DeliveryDestinationArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationArn'
          description: The Amazon Resource Name (ARN) of the customer-managed destination.
        DeliveryDestinationType:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationType'
          description: The destination type for the customer-managed destination.
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationRoleArn'
          description: The Amazon Resource Name (ARN) of the delivery destination
            role.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/DestinationCreatedAt'
          description: The timestamp value of when the destination creation requset
            occurred.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/DestinationUpdatedAt'
          description: The timestamp value of when the destination update requset
            occurred.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the customer-managed
            destination.
    GetDeviceDiscoveryRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/DeviceDiscoveryId'
          description: The id of the device discovery job request.
      required:
      - Identifier
    GetDeviceDiscoveryResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/DeviceDiscoveryId'
          description: The id of the device discovery job request.
        Arn:
          allOf:
          - $ref: '#/components/schemas/DeviceDiscoveryArn'
          description: The Amazon Resource Name (ARN) of the device discovery job
            request.
        DiscoveryType:
          allOf:
          - $ref: '#/components/schemas/DiscoveryType'
          description: The discovery type supporting the type of device to be discovered
            in the device discovery job request.
        Status:
          allOf:
          - $ref: '#/components/schemas/DeviceDiscoveryStatus'
          description: The status of the device discovery job request.
        StartedAt:
          allOf:
          - $ref: '#/components/schemas/DiscoveryStartedAt'
          description: The timestamp value for the start time of the device discovery.
        ControllerId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the end-user's IoT hub.
        ConnectorAssociationId:
          allOf:
          - $ref: '#/components/schemas/ConnectorAssociationId'
          description: The ID tracking the current discovery process for one connector
            association.
        FinishedAt:
          allOf:
          - $ref: '#/components/schemas/DiscoveryFinishedAt'
          description: The timestamp value for the completion time of the device discovery.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the device
            discovery request.
      required:
      - Id
      - Arn
      - DiscoveryType
      - Status
      - StartedAt
    GetEventLogConfigurationRequest:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The identifier of the event log configuration.
      required:
      - Id
    GetEventLogConfigurationResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The identifier of the event log configuration.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceType'
          description: The type of resource for the event log configuration.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/SmartHomeResourceId'
          description: The identifier of the resource for the event log configuration.
        EventLogLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The logging level for the event log configuration.
    GetHubConfigurationRequest:
      type: object
      properties: {}
    GetHubConfigurationResponse:
      type: object
      properties:
        HubTokenTimerExpirySettingInSeconds:
          allOf:
          - $ref: '#/components/schemas/HubTokenTimerExpirySettingInSeconds'
          description: A user-defined integer value that represents the hub token
            timer expiry setting in seconds.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/HubConfigurationUpdatedAt'
          description: The timestamp value of when the hub configuration was updated.
    GetManagedThingCapabilitiesRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the device.
      required:
      - Identifier
    GetManagedThingCapabilitiesResponse:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the device.
        Capabilities:
          allOf:
          - $ref: '#/components/schemas/Capabilities'
          description: The capabilities of the device such as light bulb.
        CapabilityReport:
          allOf:
          - $ref: '#/components/schemas/CapabilityReport'
          description: A report of the capabilities for the managed thing.
    GetManagedThingConnectivityDataRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The identifier of a managed thing.
      required:
      - Identifier
    GetManagedThingConnectivityDataResponse:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of a managed thing.
        Connected:
          allOf:
          - $ref: '#/components/schemas/ConnectivityStatus'
          description: The connectivity status for a managed thing.
        Timestamp:
          allOf:
          - $ref: '#/components/schemas/ConnectivityTimestamp'
          description: The timestamp value of when the connectivity status for a managed
            thing was last taken.
        DisconnectReason:
          allOf:
          - $ref: '#/components/schemas/DisconnectReasonValue'
          description: The reason for the connectivity disconnect with the managed
            thing.
    GetManagedThingMetaDataRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The managed thing id.
      required:
      - Identifier
    GetManagedThingMetaDataResponse:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The managed thing id.
        MetaData:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: The metadata for the managed thing.
    GetManagedThingRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the managed thing.
      required:
      - Identifier
    GetManagedThingResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the managed thing.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ManagedThingArn'
          description: The Amazon Resource Name (ARN) of the managed thing.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: Owner of the device, usually an indication of whom the device
            belongs to. This value should not contain personal identifiable information.
        CredentialLockerId:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker for the managed thing.
        AdvertisedProductId:
          allOf:
          - $ref: '#/components/schemas/AdvertisedProductId'
          description: The id of the advertised product.
        Role:
          allOf:
          - $ref: '#/components/schemas/Role'
          description: The type of device used. This will be the Amazon Web Services
            hub controller, cloud device, or IoT device.
        ProvisioningStatus:
          allOf:
          - $ref: '#/components/schemas/ProvisioningStatus'
          description: The provisioning status of the device in the provisioning workflow
            for onboarding to IoT managed integrations.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the managed thing representing the physical device.
        Model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the device.
        Brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          description: The brand of the device.
        SerialNumber:
          allOf:
          - $ref: '#/components/schemas/SerialNumber'
          description: The serial number of the device.
        UniversalProductCode:
          allOf:
          - $ref: '#/components/schemas/UniversalProductCode'
          description: The universal product code (UPC) of the device model. The UPC
            is typically used in the United States of America and Canada.
        InternationalArticleNumber:
          allOf:
          - $ref: '#/components/schemas/InternationalArticleNumber'
          description: The unique 13 digit number that identifies the managed thing.
        ConnectorPolicyId:
          allOf:
          - $ref: '#/components/schemas/ConnectorPolicyId'
          description: 'The id of the connector policy.


            This parameter is used for cloud-to-cloud devices only.'
        ConnectorDeviceId:
          allOf:
          - $ref: '#/components/schemas/ConnectorDeviceId'
          description: 'The third-party device id as defined by the connector. This
            device id must not contain personal identifiable information (PII).


            This parameter is used for cloud-to-cloud devices only.'
        DeviceSpecificKey:
          allOf:
          - $ref: '#/components/schemas/DeviceSpecificKey'
          description: 'A Zwave device-specific key used during device activation.


            This parameter is used for Zwave devices only.'
        MacAddress:
          allOf:
          - $ref: '#/components/schemas/MacAddress'
          description: 'The media access control (MAC) address for the device represented
            by the managed thing.


            This parameter is used for Zigbee devices only.'
        ParentControllerId:
          allOf:
          - $ref: '#/components/schemas/ParentControllerId'
          description: Id of the controller device used for the discovery job.
        Classification:
          allOf:
          - $ref: '#/components/schemas/Classification'
          description: The classification of the managed thing such as light bulb
            or thermostat.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the device creation request occurred.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/UpdatedAt'
          description: The timestamp value of when the managed thing was last updated
            at.
        ActivatedAt:
          allOf:
          - $ref: '#/components/schemas/SetupAt'
          description: The timestampe value of when the device was activated.
        HubNetworkMode:
          allOf:
          - $ref: '#/components/schemas/HubNetworkMode'
          description: The network mode for the hub-connected device.
        MetaData:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: The metadata for the managed thing.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the managed
            thing.
    GetManagedThingStateRequest:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the device.
      required:
      - ManagedThingId
    GetManagedThingStateResponse:
      type: object
      properties:
        Endpoints:
          allOf:
          - $ref: '#/components/schemas/StateEndpoints'
          description: The device endpoint.
      required:
      - Endpoints
    GetNotificationConfigurationRequest:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
      required:
      - EventType
    GetNotificationConfigurationResponse:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
        DestinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the destination for the notification configuration.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationCreatedAt'
          description: The timestamp value of when the notification configuration
            was created.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationUpdatedAt'
          description: The timestamp value of when the notification configuration
            was last updated.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the notification
            configuration.
    GetOtaTaskConfigurationRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The over-the-air (OTA) task configuration id.
      required:
      - Identifier
    GetOtaTaskConfigurationResponse:
      type: object
      properties:
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The over-the-air (OTA) task configuration id.
        Name:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationName'
          description: The name of the over-the-air (OTA) task configuration.
        PushConfig:
          allOf:
          - $ref: '#/components/schemas/PushConfig'
          description: Describes the type of configuration used for the over-the-air
            (OTA) task.
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: A description of the over-the-air (OTA) task configuration.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the over-the-air (OTA) task configuration
            was created at.
    GetOtaTaskRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The over-the-air (OTA) task id.
      required:
      - Identifier
    GetOtaTaskResponse:
      type: object
      properties:
        TaskId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The id of the over-the-air (OTA) task.
        TaskArn:
          allOf:
          - $ref: '#/components/schemas/OtaTaskArn'
          description: The Amazon Resource Name (ARN) of the over-the-air (OTA) task
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: The description of the over-the-air (OTA) task.
        S3Url:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The URL to the Amazon S3 bucket where the over-the-air (OTA)
            task is stored.
        Protocol:
          allOf:
          - $ref: '#/components/schemas/OtaProtocol'
          description: The connection protocol the over-the-air (OTA) task uses to
            update the device.
        OtaType:
          allOf:
          - $ref: '#/components/schemas/OtaType'
          description: The frequency type for the over-the-air (OTA) task.
        OtaTargetQueryString:
          allOf:
          - $ref: '#/components/schemas/OtaTargetQueryString'
          description: The query string to add things to the thing group.
        OtaMechanism:
          allOf:
          - $ref: '#/components/schemas/OtaMechanism'
          description: The deployment mechanism for the over-the-air (OTA) task.
        Target:
          allOf:
          - $ref: '#/components/schemas/Target'
          description: The device targeted for the over-the-air (OTA) task.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the over-the-air (OTA) task was
            created.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/LastUpdatedAt'
          description: The timestamp value of when the over-the-air (OTA) task was
            last updated at.
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier for the over-the-air (OTA) task configuration.
        TaskProcessingDetails:
          allOf:
          - $ref: '#/components/schemas/TaskProcessingDetails'
          description: The processing details of all over-the-air (OTA) tasks.
        OtaSchedulingConfig:
          $ref: '#/components/schemas/OtaTaskSchedulingConfig'
        OtaTaskExecutionRetryConfig:
          $ref: '#/components/schemas/OtaTaskExecutionRetryConfig'
        Status:
          allOf:
          - $ref: '#/components/schemas/OtaStatus'
          description: The status of the over-the-air (OTA) task.
    GetProvisioningProfileRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileId'
          description: The provisioning template the device uses for the provisioning
            process.
      required:
      - Identifier
    GetProvisioningProfileResponse:
      type: object
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileArn'
          description: The Amazon Resource Name (ARN) of the provisioning template
            used in the provisioning profile.
        Name:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileName'
          description: The name of the provisioning template.
        ProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ProvisioningType'
          description: The type of provisioning workflow the device uses for onboarding
            to IoT managed integrations.
        Id:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileId'
          description: The provisioning profile id..
        ClaimCertificate:
          allOf:
          - $ref: '#/components/schemas/ClaimCertificate'
          description: The id of the claim certificate.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the provisioning
            profile.
    GetRuntimeLogConfigurationRequest:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id for a managed thing.
      required:
      - ManagedThingId
    GetRuntimeLogConfigurationResponse:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id for a managed thing.
        RuntimeLogConfigurations:
          allOf:
          - $ref: '#/components/schemas/RuntimeLogConfigurations'
          description: The runtime log configuration for a managed thing.
    GetSchemaVersionRequest:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionType'
          description: The type of schema version.
        SchemaVersionedId:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionedId'
          description: Schema id with a version specified. If the version is missing,
            it defaults to latest version.
        Format:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionFormat'
          description: The format of the schema version.
      required:
      - Type
      - SchemaVersionedId
    GetSchemaVersionResponse:
      type: object
      properties:
        SchemaId:
          allOf:
          - $ref: '#/components/schemas/SchemaId'
          description: The id of the schema version.
        Type:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionType'
          description: The type of schema version.
        Description:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionDescription'
          description: The description of the schema version.
        Namespace:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionNamespaceName'
          description: The name of the schema version.
        SemanticVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVersion'
          description: The schema version. If this is left blank, it defaults to the
            latest version.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVisibility'
          description: The visibility of the schema version.
        Schema:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionSchema'
          description: The schema of the schema version.
    HubConfigurationUpdatedAt:
      type: string
      format: date-time
    HubNetworkMode:
      type: string
      enum:
      - STANDARD
      - NETWORK_WIDE_EXCLUSION
    HubTokenTimerExpirySettingInSeconds:
      type: integer
      format: int64
      minimum: 1
    InProgressTimeoutInMinutes:
      type: integer
      format: int64
      minimum: 1
      maximum: 10080
    IncrementFactor:
      type: number
      format: double
      minimum: 1.1
      maximum: 5
    InternalFailureException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An unexpected error has occurred.
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Internal error from the service that indicates an unexpected error
        or that the service is unavailable.
    InternationalArticleNumber:
      type: string
      pattern: ^[0-9]+$
      minLength: 8
      maxLength: 13
    KmsKeyArn:
      type: string
      pattern: ^arn:aws:kms:[0-9a-zA-Z-]+:[0-9]+:key/[0-9a-zA-Z-]+$
      minLength: 1
      maxLength: 200
    LastUpdatedAt:
      type: string
      format: date-time
    ListCredentialLockersRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListCredentialLockersResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerListDefinition'
          description: The list of credential lockers.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListDestinationsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListDestinationsResponse:
      type: object
      properties:
        DestinationList:
          allOf:
          - $ref: '#/components/schemas/DestinationListDefinition'
          description: The list of destinations.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListEventLogConfigurationsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListEventLogConfigurationsResponse:
      type: object
      properties:
        EventLogConfigurationList:
          allOf:
          - $ref: '#/components/schemas/EventLogConfigurationListDefinition'
          description: A list of each event log configuration and pertinent information.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListManagedThingSchemasRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The managed thing id.
        EndpointIdFilter:
          allOf:
          - $ref: '#/components/schemas/EndpointId'
          description: Filter on an endpoint id.
        CapabilityIdFilter:
          allOf:
          - $ref: '#/components/schemas/CapabilityId'
          description: Filter on a capability id.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
      required:
      - Identifier
    ListManagedThingSchemasResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ManagedThingSchemaListDefinition'
          description: The list of managed thing schemas.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListManagedThingsRequest:
      type: object
      properties:
        OwnerFilter:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: Filter on device owners when listing managed things.
        CredentialLockerFilter:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: Filter on a credential locker for a managed thing.
        RoleFilter:
          allOf:
          - $ref: '#/components/schemas/Role'
          description: Filter on the type of device used. This will be the Amazon
            Web Services hub controller, cloud device, or IoT device.
        ParentControllerIdentifierFilter:
          allOf:
          - $ref: '#/components/schemas/ParentControllerId'
          description: Filter on a parent controller id for a managed thing.
        ConnectorPolicyIdFilter:
          allOf:
          - $ref: '#/components/schemas/ConnectorPolicyId'
          description: Filter on a connector policy id for a managed thing.
        SerialNumberFilter:
          allOf:
          - $ref: '#/components/schemas/SerialNumber'
          description: Filter on the serial number of the device.
        ProvisioningStatusFilter:
          allOf:
          - $ref: '#/components/schemas/ProvisioningStatus'
          description: Filter on the status of the device.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListManagedThingsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ManagedThingListDefinition'
          description: The list of managed things.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListNotificationConfigurationsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListNotificationConfigurationsResponse:
      type: object
      properties:
        NotificationConfigurationList:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationListDefinition'
          description: The list of notification configurations.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListOtaTaskConfigurationsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListOtaTaskConfigurationsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationListDefinition'
          description: The list of the over-the-air (OTA) task configurations.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListOtaTaskExecutionsRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The over-the-air (OTA) task id.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/OtaNextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
      required:
      - Identifier
    ListOtaTaskExecutionsResponse:
      type: object
      properties:
        ExecutionSummaries:
          allOf:
          - $ref: '#/components/schemas/OtaTaskExecutionSummariesListDefinition'
          description: A list of all of the over-the-air (OTA) task executions.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/OtaNextToken'
          description: A token that can be used to retrieve the next set of results.
    ListOtaTasksRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/OtaNextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListOtaTasksResponse:
      type: object
      properties:
        Tasks:
          allOf:
          - $ref: '#/components/schemas/OtaTaskListDefinition'
          description: A list of all of the over-the-air (OTA) tasks.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/OtaNextToken'
          description: A token that can be used to retrieve the next set of results.
    ListProvisioningProfilesRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
    ListProvisioningProfilesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileListDefinition'
          description: The list of provisioning profiles.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    ListSchemaVersionsRequest:
      type: object
      properties:
        Type:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionType'
          description: Filter on the type of schema version.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
        SchemaId:
          allOf:
          - $ref: '#/components/schemas/SchemaId'
          description: Filter on the id of the schema version.
        Namespace:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionNamespaceName'
          description: Filter on the name of the schema version.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVisibility'
          description: The visibility of the schema version.
        SemanticVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVersion'
          description: The schema version. If this is left blank, it defaults to the
            latest version.
      required:
      - Type
    ListSchemaVersionsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionList'
          description: The list of schema versions.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that can be used to retrieve the next set of results.
    LocalStoreFileRotationMaxBytes:
      type: integer
    LocalStoreFileRotationMaxFiles:
      type: integer
    LocalStoreLocation:
      type: string
    LogConfigurationId:
      type: string
      pattern: ^[A-Za-z0-9]+$
      minLength: 1
      maxLength: 200
    LogLevel:
      type: string
      enum:
      - DEBUG
      - ERROR
      - INFO
      - WARN
    MacAddress:
      type: string
      minLength: 1
      maxLength: 128
    ManagedThingArn:
      type: string
      pattern: ^arn:aws:iotmanagedintegrations:[0-9a-zA-Z-]+:[0-9]+:managed-thing/([0-9a-zA-Z:_-])+$
      minLength: 32
      maxLength: 1011
    ManagedThingId:
      type: string
      pattern: ^[a-zA-Z0-9:_-]*$
      minLength: 1
      maxLength: 64
    ManagedThingListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/ManagedThingSummary'
    ManagedThingSchemaListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/ManagedThingSchemaListItem'
    ManagedThingSchemaListItem:
      type: object
      properties:
        EndpointId:
          allOf:
          - $ref: '#/components/schemas/EndpointId'
          description: The id of the endpoint for a managed thing.
        CapabilityId:
          allOf:
          - $ref: '#/components/schemas/CapabilityId'
          description: The id of the capability for a managed thing.
        Schema:
          allOf:
          - $ref: '#/components/schemas/ValidationSchema'
          description: The validation schema for one schema item associated with a
            managed thing.
      description: Structure representing one schema item associated with a managed
        thing.
    ManagedThingSummary:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the device.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ManagedThingArn'
          description: The Amazon Resource Name (ARN) of the managed thing.
        AdvertisedProductId:
          allOf:
          - $ref: '#/components/schemas/AdvertisedProductId'
          description: The id of the advertised product.
        Brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          description: The brand of the device.
        Classification:
          allOf:
          - $ref: '#/components/schemas/Classification'
          description: The classification of the managed thing such as light bulb
            or thermostat.
        ConnectorDeviceId:
          allOf:
          - $ref: '#/components/schemas/ConnectorDeviceId'
          description: 'The third-party device id as defined by the connector. This
            device id must not contain personal identifiable information (PII).


            This parameter is used for cloud-to-cloud devices only.'
        ConnectorPolicyId:
          allOf:
          - $ref: '#/components/schemas/ConnectorPolicyId'
          description: 'The id of the connector policy.


            This parameter is used for cloud-to-cloud devices only.'
        Model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the device.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the managed thing representing the physical device.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: Owner of the device, usually an indication of whom the device
            belongs to. This value should not contain personal identifiable information.
        CredentialLockerId:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential locker for the managed thing.
        ParentControllerId:
          allOf:
          - $ref: '#/components/schemas/ParentControllerId'
          description: Id of the controller device used for the discovery job.
        ProvisioningStatus:
          allOf:
          - $ref: '#/components/schemas/ProvisioningStatus'
          description: The provisioning status of the device in the provisioning workflow
            for onboarding to IoT managed integrations.
        Role:
          allOf:
          - $ref: '#/components/schemas/Role'
          description: The type of device used. This will be the Amazon Web Services
            hub controller, cloud device, or IoT device.
        SerialNumber:
          allOf:
          - $ref: '#/components/schemas/SerialNumber'
          description: The serial number of the device.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the device creation request occurred.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the managed thing was last updated
            at.
        ActivatedAt:
          allOf:
          - $ref: '#/components/schemas/SetupAt'
          description: The timestampe value of when the managed thing was activated
            at.
      description: Structure representing one managed thing.
    MaxResults:
      type: integer
      minimum: 1
      maximum: 1000
    MaximumPerMinute:
      type: integer
      minimum: 1
    MetaData:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/AttributeValue'
    MinNumberOfExecutedThings:
      type: integer
      minimum: 1
      maximum: 100
    MinNumberOfRetries:
      type: integer
      minimum: 0
      maximum: 10
    Model:
      type: string
      pattern: ^[A-Za-z0-9-_ ]+$
      minLength: 1
      maxLength: 128
    Name:
      type: string
      pattern: ^[\p{L}\p{N} ._-]+$
      minLength: 1
      maxLength: 128
    NextToken:
      type: string
      pattern: ^[a-zA-Z0-9=_-]+$
      minLength: 1
      maxLength: 65535
    NodeId:
      type: string
      pattern: ^[a-zA-Z0-9=_.,@\+\-/]+$
      minLength: 1
      maxLength: 64
    NotificationConfigurationCreatedAt:
      type: string
      format: date-time
    NotificationConfigurationListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/NotificationConfigurationSummary'
    NotificationConfigurationSummary:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
        DestinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the destination for the notification configuration.
      description: Structure describing a notification configuration.
    NotificationConfigurationUpdatedAt:
      type: string
      format: date-time
    NumberOfNotifiedThings:
      type: integer
      minimum: 1
      maximum: 100
    NumberOfSucceededThings:
      type: integer
      minimum: 1
      maximum: 100
    OtaDescription:
      type: string
      pattern: ^[0-9A-Za-z_\- ]+$
      minLength: 1
      maxLength: 256
    OtaMechanism:
      type: string
      enum:
      - PUSH
    OtaNextToken:
      type: string
      pattern: ^[a-zA-Z0-9=_+/-]+$
      minLength: 1
      maxLength: 65535
    OtaProtocol:
      type: string
      enum:
      - HTTP
    OtaStatus:
      type: string
      enum:
      - IN_PROGRESS
      - CANCELED
      - COMPLETED
      - DELETION_IN_PROGRESS
      - SCHEDULED
    OtaTargetQueryString:
      type: string
    OtaTaskAbortConfig:
      type: object
      properties:
        AbortConfigCriteriaList:
          allOf:
          - $ref: '#/components/schemas/AbortConfigCriteriaList'
          description: The list of criteria for the abort config.
      description: Over-the-air (OTA) task abort config.
    OtaTaskArn:
      type: string
      pattern: ^arn:aws:iotmanagedintegrations:[0-9a-zA-Z-]+:[0-9]+:ota-task/[0-9a-zA-Z]+$
      minLength: 0
      maxLength: 1011
    OtaTaskConfigurationId:
      type: string
      pattern: ^[a-zA-Z0-9]*$
      minLength: 1
      maxLength: 64
    OtaTaskConfigurationListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/OtaTaskConfigurationSummary'
    OtaTaskConfigurationName:
      type: string
      pattern: ^[A-Za-z0-9-_ ]+$
      minLength: 1
      maxLength: 128
    OtaTaskConfigurationSummary:
      type: object
      properties:
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The id of the over-the-air (OTA) task configuration
        Name:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationName'
          description: The name of the over-the-air (OTA) task configuration.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the over-the-air (OTA) task configuration
            was created at.
      description: Structure representing one over-the-air (OTA) task configuration.
    OtaTaskExecutionRetryConfig:
      type: object
      properties:
        RetryConfigCriteria:
          allOf:
          - $ref: '#/components/schemas/RetryConfigCriteriaList'
          description: The list of retry config criteria.
      description: Over-the-air (OTA) task retry config.
    OtaTaskExecutionRolloutConfig:
      type: object
      properties:
        ExponentialRolloutRate:
          allOf:
          - $ref: '#/components/schemas/ExponentialRolloutRate'
          description: Structure representing exponential rate of rollout for an over-the-air
            (OTA) task.
        MaximumPerMinute:
          allOf:
          - $ref: '#/components/schemas/MaximumPerMinute'
          description: The maximum number of things that will be notified of a pending
            task, per minute.
      description: Over-the-air (OTA) task rollout config.
    OtaTaskExecutionStatus:
      type: string
      enum:
      - QUEUED
      - IN_PROGRESS
      - SUCCEEDED
      - FAILED
      - TIMED_OUT
      - REJECTED
      - REMOVED
      - CANCELED
    OtaTaskExecutionSummaries:
      type: object
      properties:
        TaskExecutionSummary:
          allOf:
          - $ref: '#/components/schemas/OtaTaskExecutionSummary'
          description: Structure representing one over-the-air (OTA) task execution
            summary
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of a managed thing.
      description: Structure representing one execution summary.
    OtaTaskExecutionSummariesListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/OtaTaskExecutionSummaries'
    OtaTaskExecutionSummary:
      type: object
      properties:
        ExecutionNumber:
          allOf:
          - $ref: '#/components/schemas/ExecutionNumber'
          description: The execution number of the over-the-air (OTA) task execution
            summary.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/LastUpdatedAt'
          description: The timestamp value of when the over-the-air (OTA) task execution
            summary was last updated.
        QueuedAt:
          allOf:
          - $ref: '#/components/schemas/QueuedAt'
          description: The timestamp value of when the over-the-air (OTA) task execution
            summary is targeted to start.
        RetryAttempt:
          allOf:
          - $ref: '#/components/schemas/RetryAttempt'
          description: The number of retry attempts for starting the over-the-air
            (OTA) task execution summary after a failed attempt.
        StartedAt:
          allOf:
          - $ref: '#/components/schemas/StartedAt'
          description: The timestamp value of when the over-the-air (OTA) task execution
            summary started.
        Status:
          allOf:
          - $ref: '#/components/schemas/OtaTaskExecutionStatus'
          description: The status of the over-the-air (OTA) task execution summary.
      description: Structure representing one over-the-air (OTA) task execution summary.
    OtaTaskId:
      type: string
      pattern: ^[A-Za-z0-9]+$
      minLength: 1
      maxLength: 200
    OtaTaskListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/OtaTaskSummary'
    OtaTaskSchedulingConfig:
      type: object
      properties:
        EndBehavior:
          allOf:
          - $ref: '#/components/schemas/SchedulingConfigEndBehavior'
          description: Specifies the end behavior for all task executions after a
            task reaches the selected `endTime`. If `endTime` is not selected when
            creating the task, then `endBehavior` does not apply.
        EndTime:
          allOf:
          - $ref: '#/components/schemas/EndTime'
          description: The time an over-the-air (OTA) task will stop.
        MaintenanceWindows:
          allOf:
          - $ref: '#/components/schemas/ScheduleMaintenanceWindowList'
          description: Maintenance window list for over-the-air (OTA) task scheduling
            config.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/ScheduleStartTime'
          description: The time an over-the-air (OTA) task will start.
      description: Over-the-air (OTA) task scheduling config.
    OtaTaskSummary:
      type: object
      properties:
        TaskId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The id of the over-the-air (OTA) task.
        TaskArn:
          allOf:
          - $ref: '#/components/schemas/OtaTaskArn'
          description: The Amazon Resource Name (ARN) of the over-the-air (OTA) task.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: The timestamp value of when the over-the-air (OTA) task was
            created at.
        LastUpdatedAt:
          allOf:
          - $ref: '#/components/schemas/LastUpdatedAt'
          description: The timestamp value of when the over-the-air (OTA) task was
            last updated at.
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier for the over-the-air (OTA) task configuration.
        Status:
          allOf:
          - $ref: '#/components/schemas/OtaStatus'
          description: The status of the over-the-air (OTA) task summary.
      description: Structure representing one over-the-air (OTA) task.
    OtaTaskTimeoutConfig:
      type: object
      properties:
        InProgressTimeoutInMinutes:
          allOf:
          - $ref: '#/components/schemas/InProgressTimeoutInMinutes'
          description: Specifies the amount of time the device has to finish execution
            of this task. The timeout interval can be anywhere between 1 minute and
            7 days.
      description: Over-the-air (OTA) task timeout config.
    OtaType:
      type: string
      enum:
      - ONE_TIME
      - CONTINUOUS
    Owner:
      type: string
      pattern: ^[a-zA-Z0-9_.,@-]+$
      minLength: 1
      maxLength: 64
    ParentControllerId:
      type: string
      pattern: ^[A-Za-z0-9]+$
      minLength: 1
      maxLength: 64
    PropertyName:
      type: string
      pattern: ^[/a-zA-Z0-9\._ ]+$
      minLength: 1
      maxLength: 128
    ProvisioningProfileArn:
      type: string
      pattern: ^arn:aws:iotmanagedintegrations:[0-9a-zA-Z-]+:[0-9]+:provisioning-profile/[0-9a-zA-Z]+$
      minLength: 32
      maxLength: 64
    ProvisioningProfileId:
      type: string
      pattern: ^[A-Za-z0-9-_]+$
      minLength: 1
      maxLength: 64
    ProvisioningProfileListDefinition:
      type: array
      items:
        $ref: '#/components/schemas/ProvisioningProfileSummary'
    ProvisioningProfileName:
      type: string
      pattern: ^[0-9A-Za-z_-]+$
      minLength: 1
      maxLength: 36
    ProvisioningProfileSummary:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileName'
          description: The name of the provisioning template.
        Id:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileId'
          description: The identifier of the provisioning profile.
        Arn:
          allOf:
          - $ref: '#/components/schemas/ProvisioningProfileArn'
          description: The Amazon Resource Name (ARN) of the provisioning template
            used in the provisioning profile.
        ProvisioningType:
          allOf:
          - $ref: '#/components/schemas/ProvisioningType'
          description: The type of provisioning workflow the device uses for onboarding
            to IoT managed integrations.
      description: Structure describing a provisioning profile.
    ProvisioningStatus:
      type: string
      enum:
      - UNASSOCIATED
      - PRE_ASSOCIATED
      - DISCOVERED
      - ACTIVATED
      - DELETION_FAILED
      - DELETE_IN_PROGRESS
      - ISOLATED
      - DELETED
    ProvisioningType:
      type: string
      enum:
      - FLEET_PROVISIONING
      - JITR
    PushConfig:
      type: object
      properties:
        AbortConfig:
          allOf:
          - $ref: '#/components/schemas/OtaTaskAbortConfig'
          description: Structure representing one abort config.
        RolloutConfig:
          allOf:
          - $ref: '#/components/schemas/OtaTaskExecutionRolloutConfig'
          description: Structure representing one rollout config.
        TimeoutConfig:
          allOf:
          - $ref: '#/components/schemas/OtaTaskTimeoutConfig'
          description: Structure representing one timeout config.
      description: Structure representing a push config.
    PutDefaultEncryptionConfigurationRequest:
      type: object
      properties:
        encryptionType:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          description: The type of encryption used for the encryption configuration.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Key Amazon Resource Name (ARN) of the AWS KMS key used
            for KMS encryption if you use `KMS_BASED_ENCRYPTION`.
      required:
      - encryptionType
    PutDefaultEncryptionConfigurationResponse:
      type: object
      properties:
        configurationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfigurationStatus'
          description: Provides the status of the default encryption configuration
            for an Amazon Web Services account.
        encryptionType:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          description: The type of encryption used for the encryption configuration.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Key Amazon Resource Name (ARN) of the AWS KMS key used
            for KMS encryption if you use `KMS_BASED_ENCRYPTION`.
      required:
      - configurationStatus
      - encryptionType
    PutHubConfigurationRequest:
      type: object
      properties:
        HubTokenTimerExpirySettingInSeconds:
          allOf:
          - $ref: '#/components/schemas/HubTokenTimerExpirySettingInSeconds'
          description: A user-defined integer value that represents the hub token
            timer expiry setting in seconds.
      required:
      - HubTokenTimerExpirySettingInSeconds
    PutHubConfigurationResponse:
      type: object
      properties:
        HubTokenTimerExpirySettingInSeconds:
          allOf:
          - $ref: '#/components/schemas/HubTokenTimerExpirySettingInSeconds'
          description: A user-defined integer value that represents the hub token
            timer expiry setting in seconds.
    PutRuntimeLogConfigurationRequest:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id for a managed thing.
        RuntimeLogConfigurations:
          allOf:
          - $ref: '#/components/schemas/RuntimeLogConfigurations'
          description: The runtime log configuration for a managed thing.
      required:
      - ManagedThingId
      - RuntimeLogConfigurations
    QueuedAt:
      type: string
      format: date-time
    RegisterCustomEndpointRequest:
      type: object
      properties: {}
    RegisterCustomEndpointResponse:
      type: object
      properties:
        EndpointAddress:
          allOf:
          - $ref: '#/components/schemas/EndpointAddress'
          description: The IoT managed integrations dedicated, custom endpoint for
            the device to route traffic through.
      required:
      - EndpointAddress
    ResetRuntimeLogConfigurationRequest:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of a managed thing.
      required:
      - ManagedThingId
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The specified resource does not exist.
    RetryAttempt:
      type: integer
    RetryConfigCriteria:
      type: object
      properties:
        FailureType:
          allOf:
          - $ref: '#/components/schemas/RetryCriteriaFailureType'
          description: Over-the-air (OTA) retry criteria failure type.
        MinNumberOfRetries:
          allOf:
          - $ref: '#/components/schemas/MinNumberOfRetries'
          description: The number of retries allowed for a failure type for the over-the-air
            (OTA) task.
      description: Structure representing one retry config criteria.
    RetryConfigCriteriaList:
      type: array
      items:
        $ref: '#/components/schemas/RetryConfigCriteria'
    RetryCriteriaFailureType:
      type: string
      enum:
      - FAILED
      - TIMED_OUT
      - ALL
    Role:
      type: string
      enum:
      - CONTROLLER
      - DEVICE
    RolloutRateIncreaseCriteria:
      type: object
      properties:
        numberOfNotifiedThings:
          allOf:
          - $ref: '#/components/schemas/NumberOfNotifiedThings'
          description: The threshold for number of notified things that will initiate
            the increase in rate of rollout.
        numberOfSucceededThings:
          allOf:
          - $ref: '#/components/schemas/NumberOfSucceededThings'
          description: The threshold for number of succeeded things that will initiate
            the increase in rate of rollout.
      description: Structure representing rollout config criteria.
    RuntimeLogConfigurations:
      type: object
      properties:
        LogLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The different log levels available for configuration.
        LogFlushLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The different log levels available for configuration.
        LocalStoreLocation:
          allOf:
          - $ref: '#/components/schemas/LocalStoreLocation'
          description: Configuration of where to store runtime logs in the device.
        LocalStoreFileRotationMaxFiles:
          allOf:
          - $ref: '#/components/schemas/LocalStoreFileRotationMaxFiles'
          description: Configuration to set the maximum number of runtime log files
            that can be stored on the device before the oldest files are deleted or
            overwritten.
        LocalStoreFileRotationMaxBytes:
          allOf:
          - $ref: '#/components/schemas/LocalStoreFileRotationMaxBytes'
          description: Configuration to set the maximum bytes of runtime logs that
            can be stored on the device before the oldest logs are deleted or overwritten.
        UploadLog:
          allOf:
          - $ref: '#/components/schemas/UploadLog'
          description: Configuration to enable or disable uploading of runtime logs
            to the cloud.
        UploadPeriodMinutes:
          allOf:
          - $ref: '#/components/schemas/UploadPeriodMinutes'
          description: Configuration to set the time interval in minutes between each
            batch of runtime logs that the device uploads to the cloud.
        DeleteLocalStoreAfterUpload:
          allOf:
          - $ref: '#/components/schemas/DeleteLocalStoreAfterUpload'
          description: Configuration to enable or disable deleting of runtime logs
            in the device once uploaded to the cloud.
      description: The different configurations for runtime logs.
    S3Url:
      type: string
      minLength: 1
      maxLength: 1000
    ScheduleMaintenanceWindow:
      type: object
      properties:
        DurationInMinutes:
          allOf:
          - $ref: '#/components/schemas/DurationInMinutes'
          description: Displays the duration of the next maintenance window.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/StartTime'
          description: Displays the start time of the next maintenance window.
      description: Structure representing scheduling maintenance window.
    ScheduleMaintenanceWindowList:
      type: array
      items:
        $ref: '#/components/schemas/ScheduleMaintenanceWindow'
    ScheduleStartTime:
      type: string
    SchedulingConfigEndBehavior:
      type: string
      enum:
      - STOP_ROLLOUT
      - CANCEL
      - FORCE_CANCEL
    SchemaId:
      type: string
      pattern: ^[a-zA-Z0-9./]+$
      minLength: 1
      maxLength: 128
    SchemaVersionDescription:
      type: string
      pattern: ^[a-zA-Z0-9., ]+$
      minLength: 1
      maxLength: 256
    SchemaVersionFormat:
      type: string
      enum:
      - AWS
      - ZCL
      - CONNECTOR
    SchemaVersionList:
      type: array
      items:
        $ref: '#/components/schemas/SchemaVersionListItem'
    SchemaVersionListItem:
      type: object
      properties:
        SchemaId:
          allOf:
          - $ref: '#/components/schemas/SchemaId'
          description: The identifier of the schema version.
        Type:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionType'
          description: The type of schema version.
        Description:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionDescription'
          description: A description of the schema version.
        Namespace:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionNamespaceName'
          description: The name of the schema version.
        SemanticVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVersion'
          description: The schema version. If this is left blank, it defaults to the
            latest version.
        Visibility:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionVisibility'
          description: The visibility of the schema version.
      description: List item describing a schema version.
    SchemaVersionNamespaceName:
      type: string
      pattern: ^[a-z]+$
      minLength: 1
      maxLength: 256
    SchemaVersionSchema:
      type: object
      additionalProperties: true
    SchemaVersionType:
      type: string
      enum:
      - capability
      - definition
    SchemaVersionVersion:
      type: string
      pattern: ^(\d+\.\d+|\$latest)$
      minLength: 1
      maxLength: 256
    SchemaVersionVisibility:
      type: string
      enum:
      - PUBLIC
      - PRIVATE
    SchemaVersionedId:
      type: string
      pattern: ^[a-zA-Z0-9.\/]+(@(\d+\.\d+|\$latest))?$
      minLength: 1
      maxLength: 128
    SendManagedThingCommandRequest:
      type: object
      properties:
        ManagedThingId:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the device.
        Endpoints:
          allOf:
          - $ref: '#/components/schemas/CommandEndpoints'
          description: The device endpoint.
        ConnectorAssociationId:
          allOf:
          - $ref: '#/components/schemas/ConnectorAssociationId'
          description: The ID tracking the current discovery process for one connector
            association.
      required:
      - ManagedThingId
      - Endpoints
    SendManagedThingCommandResponse:
      type: object
      properties:
        TraceId:
          allOf:
          - $ref: '#/components/schemas/TraceId'
          description: The trace request identifier. This is specified by the device
            owner, but will be generated by IoT managed integrations if not provided
            by the device owner.
    SerialNumber:
      type: string
      pattern: ^[A-Za-z0-9-_ ]+$
      minLength: 1
      maxLength: 128
    ServiceQuotaExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The service quota has been exceeded for this request.
    ServiceUnavailableException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The service is temporarily unavailable.
    SetupAt:
      type: string
      format: date-time
    SmartHomeResourceId:
      type: string
      pattern: ^[a-zA-Z0-9+*]*$
      minLength: 1
      maxLength: 200
    SmartHomeResourceType:
      type: string
      pattern: ^[*]$|^(managed-thing|credential-locker|provisioning-profile|ota-task)$
    StartDeviceDiscoveryRequest:
      type: object
      properties:
        DiscoveryType:
          allOf:
          - $ref: '#/components/schemas/DiscoveryType'
          description: The discovery type supporting the type of device to be discovered
            in the device discovery job request.
        ControllerIdentifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the end-user's IoT hub.
        ConnectorAssociationIdentifier:
          allOf:
          - $ref: '#/components/schemas/ConnectorAssociationId'
          description: The id of the connector association.
        AuthenticationMaterial:
          allOf:
          - $ref: '#/components/schemas/DiscoveryAuthMaterialString'
          description: The authentication material required to start the local device
            discovery job request.
        AuthenticationMaterialType:
          allOf:
          - $ref: '#/components/schemas/DiscoveryAuthMaterialType'
          description: The type of authentication material used for device discovery
            jobs.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token. If you retry a request that completed
            successfully initially using the same client token and parameters, then
            the retry attempt will succeed without performing any further actions.
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          description: A set of key/value pairs that are used to manage the device
            discovery request.
      required:
      - DiscoveryType
    StartDeviceDiscoveryResponse:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/DeviceDiscoveryId'
          description: The id of the device discovery job request.
        StartedAt:
          allOf:
          - $ref: '#/components/schemas/DiscoveryStartedAt'
          description: The timestamp value for the start time of the device discovery.
    StartTime:
      type: string
    StartedAt:
      type: string
      format: date-time
    StateCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/StateCapability'
    StateCapability:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SchemaVersionedId'
          description: The id of the managed thing in the capability report.
        name:
          allOf:
          - $ref: '#/components/schemas/CapabilityName'
          description: Name for the Amazon Web Services capability.
        version:
          allOf:
          - $ref: '#/components/schemas/CapabilityVersion'
          description: Version for the Amazon Web Services capability.
        properties:
          allOf:
          - $ref: '#/components/schemas/CapabilityProperties'
          description: Describe the command capability with the properties it supports.
      required:
      - id
      - name
      - version
      description: State capabilities added for the managed thing.
    StateEndpoint:
      type: object
      properties:
        endpointId:
          allOf:
          - $ref: '#/components/schemas/EndpointId'
          description: Numeric identifier of the endpoint
        capabilities:
          allOf:
          - $ref: '#/components/schemas/StateCapabilities'
          description: Describe the endpoint with an id, a name, and the relevant
            capabilities for the reporting state.
      required:
      - endpointId
      - capabilities
      description: Describe the endpoint with an Id, a name, and the relevant capabilities
        for reporting state
    StateEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/StateEndpoint'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TagsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    Target:
      type: array
      items:
        type: string
    TaskProcessingDetails:
      type: object
      properties:
        NumberOfCanceledThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of canceled things in an over-the-air (OTA) task.
        NumberOfFailedThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of failed things in an over-the-air (OTA) task.
        NumberOfInProgressThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of in progress things in an over-the-air (OTA) task.
        numberOfQueuedThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of queued things in an over-the-air (OTA) task.
        numberOfRejectedThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of rejected things in an over-the-air (OTA) task.
        numberOfRemovedThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of removed things in an over-the-air (OTA) task.
        numberOfSucceededThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of succeeded things in an over-the-air (OTA) task.
        numberOfTimedOutThings:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of timed out things in an over-the-air (OTA) task.
        processingTargets:
          allOf:
          - $ref: '#/components/schemas/Target'
          description: The targets of the over-the-air (OTA) task.
      description: Details about the over-the-air (OTA) task process.
    ThresholdPercentage:
      type: number
      format: double
      maximum: 100
    ThrottlingException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The rate exceeds the limit.
    TraceId:
      type: string
      pattern: ^[a-zA-Z0-9:=_-]+$
      minLength: 1
      maxLength: 128
    UnauthorizedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You are not authorized to perform this operation.
    UniversalProductCode:
      type: string
      pattern: ^[0-9]+$
      minLength: 12
      maxLength: 12
    UpdateDestinationRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the customer-managed destination.
        DeliveryDestinationArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationArn'
          description: The Amazon Resource Name (ARN) of the customer-managed destination.
        DeliveryDestinationType:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationType'
          description: The destination type for the customer-managed destination.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/DeliveryDestinationRoleArn'
          description: The Amazon Resource Name (ARN) of the delivery destination
            role.
        Description:
          allOf:
          - $ref: '#/components/schemas/DestinationDescription'
          description: The description of the customer-managed destination.
      required:
      - Name
    UpdateEventLogConfigurationRequest:
      type: object
      properties:
        Id:
          allOf:
          - $ref: '#/components/schemas/LogConfigurationId'
          description: The log configuration id.
        EventLogLevel:
          allOf:
          - $ref: '#/components/schemas/LogLevel'
          description: The log level for the event in terms of severity.
      required:
      - Id
      - EventLogLevel
    UpdateManagedThingRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/ManagedThingId'
          description: The id of the managed thing.
        Owner:
          allOf:
          - $ref: '#/components/schemas/Owner'
          description: Owner of the device, usually an indication of whom the device
            belongs to. This value should not contain personal identifiable information.
        CredentialLockerId:
          allOf:
          - $ref: '#/components/schemas/CredentialLockerId'
          description: The identifier of the credential for the managed thing.
        SerialNumber:
          allOf:
          - $ref: '#/components/schemas/SerialNumber'
          description: The serial number of the device.
        Brand:
          allOf:
          - $ref: '#/components/schemas/Brand'
          description: The brand of the device.
        Model:
          allOf:
          - $ref: '#/components/schemas/Model'
          description: The model of the device.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the managed thing representing the physical device.
        CapabilityReport:
          allOf:
          - $ref: '#/components/schemas/CapabilityReport'
          description: A report of the capabilities for the managed thing.
        Capabilities:
          allOf:
          - $ref: '#/components/schemas/Capabilities'
          description: The capabilities of the device such as light bulb.
        Classification:
          allOf:
          - $ref: '#/components/schemas/Classification'
          description: The classification of the managed thing such as light bulb
            or thermostat.
        HubNetworkMode:
          allOf:
          - $ref: '#/components/schemas/HubNetworkMode'
          description: The network mode for the hub-connected device.
        MetaData:
          allOf:
          - $ref: '#/components/schemas/MetaData'
          description: The metadata for the managed thing.
      required:
      - Identifier
    UpdateNotificationConfigurationRequest:
      type: object
      properties:
        EventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The type of event triggering a device notification to the customer-managed
            destination.
        DestinationName:
          allOf:
          - $ref: '#/components/schemas/DestinationName'
          description: The name of the destination for the notification configuration.
      required:
      - EventType
      - DestinationName
    UpdateOtaTaskRequest:
      type: object
      properties:
        Identifier:
          allOf:
          - $ref: '#/components/schemas/OtaTaskId'
          description: The over-the-air (OTA) task id.
        Description:
          allOf:
          - $ref: '#/components/schemas/OtaDescription'
          description: The description of the over-the-air (OTA) task.
        TaskConfigurationId:
          allOf:
          - $ref: '#/components/schemas/OtaTaskConfigurationId'
          description: The identifier for the over-the-air (OTA) task configuration.
      required:
      - Identifier
    UpdatedAt:
      type: string
      format: date-time
    UploadLog:
      type: boolean
    UploadPeriodMinutes:
      type: integer
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: A validation error occurred when performing the API request.
    ValidationSchema:
      type: object
      additionalProperties: true
