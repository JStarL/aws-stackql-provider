openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: ebs
  x-aws-serviceName: ebs
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2019-11-02'
  title: Amazon Elastic Block Store
  description: |-
    You can use the Amazon Elastic Block Store (Amazon EBS) direct APIs to create Amazon EBS snapshots, write data directly to your snapshots, read data on your snapshots, and identify the differences or changes between two snapshots. If youâ€™re an independent software vendor (ISV) who offers backup services for Amazon EBS, the EBS direct APIs make it more efficient and cost-effective to track incremental changes on your Amazon EBS volumes through snapshots. This can be done without having to create new volumes from snapshots, and then use Amazon Elastic Compute Cloud (Amazon EC2) instances to compare the differences.

    You can create incremental snapshots directly from data on-premises into volumes and the cloud to use for quick disaster recovery. With the ability to write and read snapshots, you can write your on-premises data to an snapshot during a disaster. Then after recovery, you can restore it back to Amazon Web Services or on-premises from the snapshot. You no longer need to build and maintain complex mechanisms to copy data to and from Amazon EBS.

    This API reference provides detailed information about the actions, data types, parameters, and errors of the EBS direct APIs. For more information about the elements that make up the EBS direct APIs, and examples of how to use them effectively, see [Accessing the Contents of an Amazon EBS Snapshot](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html) in the _Amazon Elastic Compute Cloud User Guide_. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas for the EBS direct APIs, see [Amazon Elastic Block Store Endpoints and Quotas](https://docs.aws.amazon.com/general/latest/gr/ebs-service.html) in the _Amazon Web Services General Reference_.
servers:
- description: The Amazon Elastic Block Store regional endpoint
  url: https://ebs.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /snapshots/completion/{SnapshotId}:
    post:
      operationId: CompleteSnapshot
      description: |-
        Seals and completes the snapshot after all of the required blocks of data have been written to it. Completing the snapshot changes the status to `completed`. You cannot write new blocks to a snapshot after it has been completed.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters:
      - name: SnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: x-amz-ChangedBlocksCount
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/ChangedBlocksCount'
      - name: x-amz-Checksum
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/Checksum'
      - name: x-amz-Checksum-Algorithm
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ChecksumAlgorithm'
      - name: x-amz-Checksum-Aggregation-Method
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/ChecksumAggregationMethod'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /snapshots/{SnapshotId}/blocks/{BlockIndex}:
    get:
      operationId: GetSnapshotBlock
      description: |-
        Returns the data in a block in an Amazon Elastic Block Store snapshot.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters:
      - name: SnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: BlockIndex
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BlockIndex'
      - name: blockToken
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/BlockToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
    put:
      operationId: PutSnapshotBlock
      description: |-
        Writes a block of data to a snapshot. If the specified block contains data, the existing data is overwritten. The target snapshot must be in the `pending` state.

        Data written to a snapshot must be aligned with 512-KiB sectors.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters:
      - name: SnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: BlockIndex
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BlockIndex'
      - name: x-amz-Data-Length
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/DataLength'
      - name: x-amz-Progress
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/Progress'
      - name: x-amz-Checksum
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/Checksum'
      - name: x-amz-Checksum-Algorithm
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/ChecksumAlgorithm'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                BlockData:
                  $ref: '#/components/schemas/BlockData'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /snapshots/{SecondSnapshotId}/changedblocks:
    get:
      operationId: ListChangedBlocks
      description: |-
        Returns information about the blocks that are different between two Amazon Elastic Block Store snapshots of the same volume/snapshot lineage.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters:
      - name: firstSnapshotId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: SecondSnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: startingBlockIndex
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BlockIndex'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /snapshots/{SnapshotId}/blocks:
    get:
      operationId: ListSnapshotBlocks
      description: |-
        Returns information about the blocks in an Amazon Elastic Block Store snapshot.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters:
      - name: SnapshotId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SnapshotId'
      - name: pageToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PageToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: startingBlockIndex
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BlockIndex'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
  /snapshots:
    post:
      operationId: StartSnapshot
      description: |-
        Creates a new Amazon EBS snapshot. The new snapshot enters the `pending` state after the request completes.

        After creating the snapshot, use [ PutSnapshotBlock](https://docs.aws.amazon.com/ebs/latest/APIReference/API_PutSnapshotBlock.html) to write blocks of data to the snapshot.

        You should always retry requests that receive server (`5xx`) error responses, and `ThrottlingException` and `RequestThrottledException` client error responses. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html) in the _Amazon Elastic Compute Cloud User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VolumeSize:
                  $ref: '#/components/schemas/VolumeSize'
                ParentSnapshotId:
                  $ref: '#/components/schemas/SnapshotId'
                Tags:
                  $ref: '#/components/schemas/Tags'
                Description:
                  $ref: '#/components/schemas/Description'
                ClientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
                Encrypted:
                  $ref: '#/components/schemas/Boolean'
                KmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
                Timeout:
                  $ref: '#/components/schemas/Timeout'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The input fails to satisfy the constraints of the EBS direct APIs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            The request uses the same client token as a previous, but non-identical request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal error has occurred. For more information see [Error retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Your current service quotas do not allow you to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
        Reason:
          allOf:
          - $ref: '#/components/schemas/AccessDeniedExceptionReason'
          description: The reason for the exception.
      required:
      - Reason
      description: You do not have sufficient access to perform this action.
    AccessDeniedExceptionReason:
      type: string
      enum:
      - UNAUTHORIZED_ACCOUNT
      - DEPENDENCY_ACCESS_DENIED
    Block:
      type: object
      properties:
        BlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: The block index.
        BlockToken:
          allOf:
          - $ref: '#/components/schemas/BlockToken'
          description: The block token for the block index.
      description: A block of data in an Amazon Elastic Block Store snapshot.
    BlockData:
      type: string
      format: byte
      x-sensitive: true
    BlockIndex:
      type: integer
      minimum: 0
    BlockSize:
      type: integer
    BlockToken:
      type: string
      pattern: ^[A-Za-z0-9+/=]+$
      minLength: 0
      maxLength: 256
    Blocks:
      type: array
      items:
        $ref: '#/components/schemas/Block'
      x-sensitive: true
    Boolean:
      type: boolean
    ChangedBlock:
      type: object
      properties:
        BlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: The block index.
        FirstBlockToken:
          allOf:
          - $ref: '#/components/schemas/BlockToken'
          description: The block token for the block index of the `FirstSnapshotId`
            specified in the `ListChangedBlocks` operation. This value is absent if
            the first snapshot does not have the changed block that is on the second
            snapshot.
        SecondBlockToken:
          allOf:
          - $ref: '#/components/schemas/BlockToken'
          description: The block token for the block index of the `SecondSnapshotId`
            specified in the `ListChangedBlocks` operation.
      description: A block of data in an Amazon Elastic Block Store snapshot that
        is different from another snapshot of the same volume/snapshot lineage.
    ChangedBlocks:
      type: array
      items:
        $ref: '#/components/schemas/ChangedBlock'
    ChangedBlocksCount:
      type: integer
      minimum: 0
    Checksum:
      type: string
      pattern: ^[A-Za-z0-9+/=]+$
      minLength: 0
      maxLength: 64
    ChecksumAggregationMethod:
      type: string
      enum:
      - LINEAR
    ChecksumAlgorithm:
      type: string
      enum:
      - SHA256
    CompleteSnapshotRequest:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot.
        ChangedBlocksCount:
          allOf:
          - $ref: '#/components/schemas/ChangedBlocksCount'
          description: The number of blocks that were written to the snapshot.
        Checksum:
          allOf:
          - $ref: '#/components/schemas/Checksum'
          description: 'An aggregated Base-64 SHA256 checksum based on the checksums
            of each written block.


            To generate the aggregated checksum using the linear aggregation method,
            arrange the checksums for each written block in ascending order of their
            block index, concatenate them to form a single string, and then generate
            the checksum on the entire string using the SHA256 algorithm.'
        ChecksumAlgorithm:
          allOf:
          - $ref: '#/components/schemas/ChecksumAlgorithm'
          description: The algorithm used to generate the checksum. Currently, the
            only supported algorithm is `SHA256`.
        ChecksumAggregationMethod:
          allOf:
          - $ref: '#/components/schemas/ChecksumAggregationMethod'
          description: The aggregation method used to generate the checksum. Currently,
            the only supported aggregation method is `LINEAR`.
      required:
      - SnapshotId
      - ChangedBlocksCount
    CompleteSnapshotResponse:
      type: object
      properties:
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the snapshot.
    ConcurrentLimitExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: You have reached the limit for concurrent API requests. For more
        information, see [Optimizing performance of the EBS direct APIs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapi-performance)
        in the _Amazon Elastic Compute Cloud User Guide_.
    ConflictException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The request uses the same client token as a previous, but non-identical
        request.
    DataLength:
      type: integer
    Description:
      type: string
      pattern: ^[\S\s]+$
      minLength: 0
      maxLength: 255
    ErrorMessage:
      type: string
      minLength: 0
      maxLength: 256
    GetSnapshotBlockRequest:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: 'The ID of the snapshot containing the block from which to
            get data.


            If the specified snapshot is encrypted, you must have permission to use
            the KMS key that was used to encrypt the snapshot. For more information,
            see [ Using encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        BlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: The block index of the block in which to read the data. A block
            index is a logical index in units of `512` KiB blocks. To identify the
            block index, divide the logical offset of the data in the logical volume
            by the block size (logical offset of data/`524288`). The logical offset
            of the data must be `512` KiB aligned.
        BlockToken:
          allOf:
          - $ref: '#/components/schemas/BlockToken'
          description: The block token of the block from which to get data. You can
            obtain the `BlockToken` by running the `ListChangedBlocks` or `ListSnapshotBlocks`
            operations.
      required:
      - SnapshotId
      - BlockIndex
      - BlockToken
    GetSnapshotBlockResponse:
      type: object
      properties:
        DataLength:
          allOf:
          - $ref: '#/components/schemas/DataLength'
          description: The size of the data in the block.
        BlockData:
          allOf:
          - $ref: '#/components/schemas/BlockData'
          description: The data content of the block.
        Checksum:
          allOf:
          - $ref: '#/components/schemas/Checksum'
          description: The checksum generated for the block, which is Base64 encoded.
        ChecksumAlgorithm:
          allOf:
          - $ref: '#/components/schemas/ChecksumAlgorithm'
          description: The algorithm used to generate the checksum for the block,
            such as SHA256.
    IdempotencyToken:
      type: string
      pattern: ^[\S]+$
      minLength: 0
      maxLength: 255
    InternalServerException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An internal error has occurred. For more information see [Error
        retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
    KmsKeyArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:kms:.*:[0-9]{12}:key/
      minLength: 1
      maxLength: 2048
    ListChangedBlocksRequest:
      type: object
      properties:
        FirstSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: 'The ID of the first snapshot to use for the comparison.


            The `FirstSnapshotID` parameter must be specified with a `SecondSnapshotId`
            parameter; otherwise, an error occurs.'
        SecondSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: 'The ID of the second snapshot to use for the comparison.


            The `SecondSnapshotId` parameter must be specified with a `FirstSnapshotID`
            parameter; otherwise, an error occurs.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PageToken'
          description: 'The token to request the next page of results.


            If you specify **NextToken** , then **StartingBlockIndex** is ignored.'
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of blocks to be returned by the request.


            Even if additional blocks can be retrieved from the snapshot, the request
            can return less blocks than **MaxResults** or an empty array of blocks.


            To retrieve the next set of blocks from the snapshot, make another request
            with the returned **NextToken** value. The value of **NextToken** is `null`
            when there are no more blocks to return.'
        StartingBlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: 'The block index from which the comparison should start.


            The list in the response will start from this block index or the next
            valid block index in the snapshots.


            If you specify **NextToken** , then **StartingBlockIndex** is ignored.'
      required:
      - SecondSnapshotId
    ListChangedBlocksResponse:
      type: object
      properties:
        ChangedBlocks:
          allOf:
          - $ref: '#/components/schemas/ChangedBlocks'
          description: An array of objects containing information about the changed
            blocks.
        ExpiryTime:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time when the `BlockToken` expires.
        VolumeSize:
          allOf:
          - $ref: '#/components/schemas/VolumeSize'
          description: The size of the volume in GB.
        BlockSize:
          allOf:
          - $ref: '#/components/schemas/BlockSize'
          description: The size of the blocks in the snapshot, in bytes.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PageToken'
          description: The token to use to retrieve the next page of results. This
            value is null when there are no more results to return.
    ListSnapshotBlocksRequest:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot from which to get block indexes and
            block tokens.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PageToken'
          description: 'The token to request the next page of results.


            If you specify **NextToken** , then **StartingBlockIndex** is ignored.'
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of blocks to be returned by the request.


            Even if additional blocks can be retrieved from the snapshot, the request
            can return less blocks than **MaxResults** or an empty array of blocks.


            To retrieve the next set of blocks from the snapshot, make another request
            with the returned **NextToken** value. The value of **NextToken** is `null`
            when there are no more blocks to return.'
        StartingBlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: 'The block index from which the list should start. The list
            in the response will start from this block index or the next valid block
            index in the snapshot.


            If you specify **NextToken** , then **StartingBlockIndex** is ignored.'
      required:
      - SnapshotId
    ListSnapshotBlocksResponse:
      type: object
      properties:
        Blocks:
          allOf:
          - $ref: '#/components/schemas/Blocks'
          description: An array of objects containing information about the blocks.
        ExpiryTime:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The time when the `BlockToken` expires.
        VolumeSize:
          allOf:
          - $ref: '#/components/schemas/VolumeSize'
          description: The size of the volume in GB.
        BlockSize:
          allOf:
          - $ref: '#/components/schemas/BlockSize'
          description: The size of the blocks in the snapshot, in bytes.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PageToken'
          description: The token to use to retrieve the next page of results. This
            value is null when there are no more results to return.
    MaxResults:
      type: integer
      minimum: 100
      maximum: 10000
    OwnerId:
      type: string
      pattern: ^\S+$
      minLength: 1
      maxLength: 24
    PageToken:
      type: string
      pattern: ^[A-Za-z0-9+/=]+$
      minLength: 0
      maxLength: 256
    Progress:
      type: integer
      minimum: 0
      maximum: 100
    PutSnapshotBlockRequest:
      type: object
      properties:
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: 'The ID of the snapshot.


            If the specified snapshot is encrypted, you must have permission to use
            the KMS key that was used to encrypt the snapshot. For more information,
            see [ Using encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html)
            in the _Amazon Elastic Compute Cloud User Guide_..'
        BlockIndex:
          allOf:
          - $ref: '#/components/schemas/BlockIndex'
          description: The block index of the block in which to write the data. A
            block index is a logical index in units of `512` KiB blocks. To identify
            the block index, divide the logical offset of the data in the logical
            volume by the block size (logical offset of data/`524288`). The logical
            offset of the data must be `512` KiB aligned.
        BlockData:
          allOf:
          - $ref: '#/components/schemas/BlockData'
          description: 'The data to write to the block.


            The block data is not signed as part of the Signature Version 4 signing
            process. As a result, you must generate and provide a Base64-encoded SHA256
            checksum for the block data using the **x-amz-Checksum** header. Also,
            you must specify the checksum algorithm using the **x-amz-Checksum-Algorithm**
            header. The checksum that you provide is part of the Signature Version
            4 signing process. It is validated against a checksum generated by Amazon
            EBS to ensure the validity and authenticity of the data. If the checksums
            do not correspond, the request fails. For more information, see [ Using
            checksums with the EBS direct APIs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapis-using-checksums)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        DataLength:
          allOf:
          - $ref: '#/components/schemas/DataLength'
          description: 'The size of the data to write to the block, in bytes. Currently,
            the only supported size is `524288` bytes.


            Valid values: `524288`'
        Progress:
          allOf:
          - $ref: '#/components/schemas/Progress'
          description: The progress of the write process, as a percentage.
        Checksum:
          allOf:
          - $ref: '#/components/schemas/Checksum'
          description: A Base64-encoded SHA256 checksum of the data. Only SHA256 checksums
            are supported.
        ChecksumAlgorithm:
          allOf:
          - $ref: '#/components/schemas/ChecksumAlgorithm'
          description: The algorithm used to generate the checksum. Currently, the
            only supported algorithm is `SHA256`.
      required:
      - SnapshotId
      - BlockIndex
      - BlockData
      - DataLength
      - Checksum
      - ChecksumAlgorithm
    PutSnapshotBlockResponse:
      type: object
      properties:
        Checksum:
          allOf:
          - $ref: '#/components/schemas/Checksum'
          description: The SHA256 checksum generated for the block data by Amazon
            EBS.
        ChecksumAlgorithm:
          allOf:
          - $ref: '#/components/schemas/ChecksumAlgorithm'
          description: The algorithm used by Amazon EBS to generate the checksum.
    RequestThrottledException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
        Reason:
          allOf:
          - $ref: '#/components/schemas/RequestThrottledExceptionReason'
          description: The reason for the exception.
      description: The number of API requests has exceeded the maximum allowed API
        request throttling limit for the snapshot. For more information see [Error
        retries](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/error-retries.html).
    RequestThrottledExceptionReason:
      type: string
      enum:
      - ACCOUNT_THROTTLED
      - DEPENDENCY_REQUEST_THROTTLED
      - RESOURCE_LEVEL_THROTTLE
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
        Reason:
          allOf:
          - $ref: '#/components/schemas/ResourceNotFoundExceptionReason'
          description: The reason for the exception.
      description: The specified resource does not exist.
    ResourceNotFoundExceptionReason:
      type: string
      enum:
      - SNAPSHOT_NOT_FOUND
      - GRANT_NOT_FOUND
      - DEPENDENCY_RESOURCE_NOT_FOUND
      - IMAGE_NOT_FOUND
    SSEType:
      type: string
      enum:
      - sse-ebs
      - sse-kms
      - none
    ServiceQuotaExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
        Reason:
          allOf:
          - $ref: '#/components/schemas/ServiceQuotaExceededExceptionReason'
          description: The reason for the exception.
      description: Your current service quotas do not allow you to perform this action.
    ServiceQuotaExceededExceptionReason:
      type: string
      enum:
      - DEPENDENCY_SERVICE_QUOTA_EXCEEDED
    SnapshotId:
      type: string
      pattern: ^snap-[0-9a-f]+$
      minLength: 1
      maxLength: 64
    StartSnapshotRequest:
      type: object
      properties:
        VolumeSize:
          allOf:
          - $ref: '#/components/schemas/VolumeSize'
          description: The size of the volume, in GiB. The maximum size is `65536`
            GiB (64 TiB).
        ParentSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: 'The ID of the parent snapshot. If there is no parent snapshot,
            or if you are creating the first snapshot for an on-premises volume, omit
            this parameter.


            You can''t specify **ParentSnapshotId** and **Encrypted** in the same
            request. If you specify both parameters, the request fails with `ValidationException`.


            The encryption status of the snapshot depends on the values that you specify
            for **Encrypted** , **KmsKeyArn** , and **ParentSnapshotId** , and whether
            your Amazon Web Services account is enabled for [ encryption by default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default).
            For more information, see [ Using encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html)
            in the _Amazon Elastic Compute Cloud User Guide_.


            If you specify an encrypted parent snapshot, you must have permission
            to use the KMS key that was used to encrypt the parent snapshot. For more
            information, see [ Permissions to use Key Management Service keys](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags to apply to the snapshot.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the snapshot.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: 'A unique, case-sensitive identifier that you provide to ensure
            the idempotency of the request. Idempotency ensures that an API request
            completes only once. With an idempotent request, if the original request
            completes successfully. The subsequent retries with the same client token
            return the result from the original successful request and they have no
            additional effect.


            If you do not specify a client token, one is automatically generated by
            the Amazon Web Services SDK.


            For more information, see [ Idempotency for StartSnapshot API](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-direct-api-idempotency.html)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        Encrypted:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Indicates whether to encrypt the snapshot.


            You can''t specify **Encrypted** and **ParentSnapshotId** in the same
            request. If you specify both parameters, the request fails with `ValidationException`.


            The encryption status of the snapshot depends on the values that you specify
            for **Encrypted** , **KmsKeyArn** , and **ParentSnapshotId** , and whether
            your Amazon Web Services account is enabled for [ encryption by default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default).
            For more information, see [ Using encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html)
            in the _Amazon Elastic Compute Cloud User Guide_.


            To create an encrypted snapshot, you must have permission to use the KMS
            key. For more information, see [ Permissions to use Key Management Service
            keys](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: 'The Amazon Resource Name (ARN) of the Key Management Service
            (KMS) key to be used to encrypt the snapshot.


            The encryption status of the snapshot depends on the values that you specify
            for **Encrypted** , **KmsKeyArn** , and **ParentSnapshotId** , and whether
            your Amazon Web Services account is enabled for [ encryption by default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default).
            For more information, see [ Using encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapis-using-encryption.html)
            in the _Amazon Elastic Compute Cloud User Guide_.


            To create an encrypted snapshot, you must have permission to use the KMS
            key. For more information, see [ Permissions to use Key Management Service
            keys](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebsapi-permissions.html#ebsapi-kms-permissions)
            in the _Amazon Elastic Compute Cloud User Guide_.'
        Timeout:
          allOf:
          - $ref: '#/components/schemas/Timeout'
          description: "The amount of time (in minutes) after which the snapshot is\
            \ automatically cancelled if:\n\n  * No blocks are written to the snapshot.\n\
            \n  * The snapshot is not completed after writing the last block of data.\n\
            \nIf no value is specified, the timeout defaults to `60` minutes."
      required:
      - VolumeSize
    StartSnapshotResponse:
      type: object
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the snapshot.
        SnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the snapshot.
        OwnerId:
          allOf:
          - $ref: '#/components/schemas/OwnerId'
          description: The Amazon Web Services account ID of the snapshot owner.
        Status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the snapshot.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          description: The timestamp when the snapshot was created.
        VolumeSize:
          allOf:
          - $ref: '#/components/schemas/VolumeSize'
          description: The size of the volume, in GiB.
        BlockSize:
          allOf:
          - $ref: '#/components/schemas/BlockSize'
          description: The size of the blocks in the snapshot, in bytes.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The tags applied to the snapshot. You can specify up to 50
            tags per snapshot. For more information, see [ Tagging your Amazon EC2
            resources](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html)
            in the _Amazon Elastic Compute Cloud User Guide_.
        ParentSnapshotId:
          allOf:
          - $ref: '#/components/schemas/SnapshotId'
          description: The ID of the parent snapshot.
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the Key Management Service
            (KMS) key used to encrypt the snapshot.
        SseType:
          allOf:
          - $ref: '#/components/schemas/SSEType'
          description: Reserved for future use.
    Status:
      type: string
      enum:
      - completed
      - pending
      - error
    Tag:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The key of the tag.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value of the tag.
      description: Describes a tag.
    TagKey:
      type: string
      pattern: ^[\S\s]+$
      minLength: 0
      maxLength: 127
    TagValue:
      type: string
      pattern: ^[\S\s]*$
      minLength: 0
      maxLength: 255
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TimeStamp:
      type: string
      format: date-time
    Timeout:
      type: integer
      minimum: 10
      maximum: 4320
    ValidationException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
        Reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason for the validation exception.
      description: The input fails to satisfy the constraints of the EBS direct APIs.
    ValidationExceptionReason:
      type: string
      enum:
      - INVALID_CUSTOMER_KEY
      - INVALID_PAGE_TOKEN
      - INVALID_BLOCK_TOKEN
      - INVALID_GRANT_TOKEN
      - INVALID_SNAPSHOT_ID
      - UNRELATED_SNAPSHOTS
      - INVALID_BLOCK
      - INVALID_CONTENT_ENCODING
      - INVALID_TAG
      - INVALID_DEPENDENCY_REQUEST
      - INVALID_PARAMETER_VALUE
      - INVALID_VOLUME_SIZE
      - CONFLICTING_BLOCK_UPDATE
      - INVALID_IMAGE_ID
      - WRITE_REQUEST_TIMEOUT
    VolumeSize:
      type: integer
      format: int64
      minimum: 1
