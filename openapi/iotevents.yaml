openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: iot_events
  x-aws-serviceName: iotevents
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-07-27'
  title: AWS IoT Events
  description: |-
    AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
servers:
- description: The AWS IoT Events regional endpoint
  url: https://iotevents.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /alarm-models:
    post:
      operationId: CreateAlarmModel
      description: |-
        Creates an alarm model to monitor an AWS IoT Events input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see [Create an alarm model](https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html) in the _AWS IoT Events Developer Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alarmModelName:
                  $ref: '#/components/schemas/AlarmModelName'
                alarmModelDescription:
                  $ref: '#/components/schemas/AlarmModelDescription'
                roleArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                tags:
                  $ref: '#/components/schemas/Tags'
                key:
                  $ref: '#/components/schemas/AttributeJsonPath'
                severity:
                  $ref: '#/components/schemas/Severity'
                alarmRule:
                  $ref: '#/components/schemas/AlarmRule'
                alarmNotification:
                  $ref: '#/components/schemas/AlarmNotification'
                alarmEventActions:
                  $ref: '#/components/schemas/AlarmEventActions'
                alarmCapabilities:
                  $ref: '#/components/schemas/AlarmCapabilities'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '410':
          description: |-
            A limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListAlarmModels
      description: |-
        Lists the alarm models that you created. The operation returns only the metadata associated with each alarm model.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detector-models:
    post:
      operationId: CreateDetectorModel
      description: |-
        Creates a detector model.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detectorModelName:
                  $ref: '#/components/schemas/DetectorModelName'
                detectorModelDefinition:
                  $ref: '#/components/schemas/DetectorModelDefinition'
                detectorModelDescription:
                  $ref: '#/components/schemas/DetectorModelDescription'
                key:
                  $ref: '#/components/schemas/AttributeJsonPath'
                roleArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                tags:
                  $ref: '#/components/schemas/Tags'
                evaluationMethod:
                  $ref: '#/components/schemas/EvaluationMethod'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '410':
          description: |-
            A limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListDetectorModels
      description: |-
        Lists the detector models you have created. Only the metadata associated with each detector model is returned.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /inputs:
    post:
      operationId: CreateInput
      description: |-
        Creates an input.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inputName:
                  $ref: '#/components/schemas/InputName'
                inputDescription:
                  $ref: '#/components/schemas/InputDescription'
                inputDefinition:
                  $ref: '#/components/schemas/InputDefinition'
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: ListInputs
      description: |-
        Lists the inputs you have created.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarm-models/{alarmModelName}:
    delete:
      operationId: DeleteAlarmModel
      description: |-
        Deletes an alarm model. Any alarm instances that were created based on this alarm model are also deleted. This action can't be undone.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      responses:
        '204': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: DescribeAlarmModel
      description: |-
        Retrieves information about an alarm model. If you don't specify a value for the `alarmModelVersion` parameter, the latest version is returned.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      - name: version
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AlarmModelVersion'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: UpdateAlarmModel
      description: |-
        Updates an alarm model. Any alarms that were created based on the previous version are deleted and then created again as new data arrives.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alarmModelDescription:
                  $ref: '#/components/schemas/AlarmModelDescription'
                roleArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                severity:
                  $ref: '#/components/schemas/Severity'
                alarmRule:
                  $ref: '#/components/schemas/AlarmRule'
                alarmNotification:
                  $ref: '#/components/schemas/AlarmNotification'
                alarmEventActions:
                  $ref: '#/components/schemas/AlarmEventActions'
                alarmCapabilities:
                  $ref: '#/components/schemas/AlarmCapabilities'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detector-models/{detectorModelName}:
    delete:
      operationId: DeleteDetectorModel
      description: |-
        Deletes a detector model. Any active instances of the detector model are also deleted.
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      responses:
        '204': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: DescribeDetectorModel
      description: |-
        Describes a detector model. If the `version` parameter is not specified, information about the latest version is returned.
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      - name: version
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DetectorModelVersion'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: UpdateDetectorModel
      description: |-
        Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detectorModelDefinition:
                  $ref: '#/components/schemas/DetectorModelDefinition'
                detectorModelDescription:
                  $ref: '#/components/schemas/DetectorModelDescription'
                roleArn:
                  $ref: '#/components/schemas/AmazonResourceName'
                evaluationMethod:
                  $ref: '#/components/schemas/EvaluationMethod'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /inputs/{inputName}:
    delete:
      operationId: DeleteInput
      description: |-
        Deletes an input.
      parameters:
      - name: inputName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InputName'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    get:
      operationId: DescribeInput
      description: |-
        Describes an input.
      parameters:
      - name: inputName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InputName'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    put:
      operationId: UpdateInput
      description: |-
        Updates an input.
      parameters:
      - name: inputName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InputName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inputDescription:
                  $ref: '#/components/schemas/InputDescription'
                inputDefinition:
                  $ref: '#/components/schemas/InputDefinition'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /analysis/detector-models/{analysisId}:
    get:
      operationId: DescribeDetectorModelAnalysis
      description: |-
        Retrieves runtime information about a detector model analysis.

        After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.
      parameters:
      - name: analysisId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AnalysisId'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /logging:
    get:
      operationId: DescribeLoggingOptions
      description: |-
        Retrieves the current settings of the AWS IoT Events logging options.
      parameters: []
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '501':
          description: |-
            The requested operation is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedOperationException'
    put:
      operationId: PutLoggingOptions
      description: |-
        Sets or updates the AWS IoT Events logging options.

        If you update the value of any `loggingOptions` field, it takes up to one minute for the change to take effect. If you change the policy attached to the role you specified in the `roleArn` field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loggingOptions:
                  $ref: '#/components/schemas/LoggingOptions'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '501':
          description: |-
            The requested operation is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedOperationException'
  /analysis/detector-models/{analysisId}/results:
    get:
      operationId: GetDetectorModelAnalysisResults
      description: |-
        Retrieves one or more analysis results of the detector model.

        After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.
      parameters:
      - name: analysisId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AnalysisId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxAnalysisResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /alarm-models/{alarmModelName}/versions:
    get:
      operationId: ListAlarmModelVersions
      description: |-
        Lists all the versions of an alarm model. The operation returns only the metadata associated with each alarm model version.
      parameters:
      - name: alarmModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AlarmModelName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /detector-models/{detectorModelName}/versions:
    get:
      operationId: ListDetectorModelVersions
      description: |-
        Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
      parameters:
      - name: detectorModelName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DetectorModelName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /input-routings:
    post:
      operationId: ListInputRoutings
      description: |-
        Lists one or more input routings.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inputIdentifier:
                  $ref: '#/components/schemas/InputIdentifier'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /tags:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists the tags (metadata) you have assigned to the resource.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    post:
      operationId: TagResource
      description: |-
        Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '410':
          description: |-
            A limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
    delete:
      operationId: UntagResource
      description: |-
        Removes the given tags (metadata) from the resource.
      parameters:
      - name: resourceArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '409':
          description: |-
            The resource is in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /analysis/detector-models:
    post:
      operationId: StartDetectorModelAnalysis
      description: |-
        Performs an analysis of your detector model. For more information, see [Troubleshooting a detector model](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html) in the _AWS IoT Events Developer Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                detectorModelDefinition:
                  $ref: '#/components/schemas/DetectorModelDefinition'
      responses:
        '200': {}
        '500':
          description: |-
            An internal failure occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '400':
          description: |-
            The request was invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequestException'
        '410':
          description: |-
            A limit was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '503':
          description: |-
            The service is currently unavailable.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
        '429':
          description: |-
            The request could not be completed due to throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
components:
  schemas:
    AcknowledgeFlow:
      type: object
      properties:
        enabled:
          allOf:
          - $ref: '#/components/schemas/AcknowledgeFlowEnabled'
          description: The value must be `TRUE` or `FALSE`. If `TRUE`, you receive
            a notification when the alarm state changes. You must choose to acknowledge
            the notification before the alarm state can return to `NORMAL`. If `FALSE`,
            you won't receive notifications. The alarm automatically changes to the
            `NORMAL` state when the input property value returns to the specified
            range.
      required:
      - enabled
      description: Specifies whether to get notified for alarm state changes.
    AcknowledgeFlowEnabled:
      type: boolean
    Action:
      type: object
      properties:
        setVariable:
          allOf:
          - $ref: '#/components/schemas/SetVariableAction'
          description: Sets a variable to a specified value.
        sns:
          allOf:
          - $ref: '#/components/schemas/SNSTopicPublishAction'
          description: Sends an Amazon SNS message.
        iotTopicPublish:
          allOf:
          - $ref: '#/components/schemas/IotTopicPublishAction'
          description: Publishes an MQTT message with the given topic to the AWS IoT
            message broker.
        setTimer:
          allOf:
          - $ref: '#/components/schemas/SetTimerAction'
          description: Information needed to set the timer.
        clearTimer:
          allOf:
          - $ref: '#/components/schemas/ClearTimerAction'
          description: Information needed to clear the timer.
        resetTimer:
          allOf:
          - $ref: '#/components/schemas/ResetTimerAction'
          description: Information needed to reset the timer.
        lambda:
          allOf:
          - $ref: '#/components/schemas/LambdaAction'
          description: Calls a Lambda function, passing in information about the detector
            model instance and the event that triggered the action.
        iotEvents:
          allOf:
          - $ref: '#/components/schemas/IotEventsAction'
          description: Sends AWS IoT Events input, which passes information about
            the detector model instance and the event that triggered the action.
        sqs:
          allOf:
          - $ref: '#/components/schemas/SqsAction'
          description: Sends information about the detector model instance and the
            event that triggered the action to an Amazon SQS queue.
        firehose:
          allOf:
          - $ref: '#/components/schemas/FirehoseAction'
          description: Sends information about the detector model instance and the
            event that triggered the action to an Amazon Kinesis Data Firehose delivery
            stream.
        dynamoDB:
          allOf:
          - $ref: '#/components/schemas/DynamoDBAction'
          description: Writes to the DynamoDB table that you created. The default
            action payload contains all attribute-value pairs that have the information
            about the detector model instance and the event that triggered the action.
            You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).
            One column of the DynamoDB table receives all attribute-value pairs in
            the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html)
            in _AWS IoT Events Developer Guide_.
        dynamoDBv2:
          allOf:
          - $ref: '#/components/schemas/DynamoDBv2Action'
          description: Writes to the DynamoDB table that you created. The default
            action payload contains all attribute-value pairs that have the information
            about the detector model instance and the event that triggered the action.
            You can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).
            A separate column of the DynamoDB table receives one attribute-value pair
            in the payload that you specify. For more information, see [Actions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html)
            in _AWS IoT Events Developer Guide_.
        iotSiteWise:
          allOf:
          - $ref: '#/components/schemas/IotSiteWiseAction'
          description: Sends information about the detector model instance and the
            event that triggered the action to an asset property in AWS IoT SiteWise
            .
      description: An action to be performed when the `condition` is TRUE.
    Actions:
      type: array
      items:
        $ref: '#/components/schemas/Action'
    AlarmAction:
      type: object
      properties:
        sns:
          $ref: '#/components/schemas/SNSTopicPublishAction'
        iotTopicPublish:
          $ref: '#/components/schemas/IotTopicPublishAction'
        lambda:
          $ref: '#/components/schemas/LambdaAction'
        iotEvents:
          $ref: '#/components/schemas/IotEventsAction'
        sqs:
          $ref: '#/components/schemas/SqsAction'
        firehose:
          $ref: '#/components/schemas/FirehoseAction'
        dynamoDB:
          $ref: '#/components/schemas/DynamoDBAction'
        dynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2Action'
        iotSiteWise:
          $ref: '#/components/schemas/IotSiteWiseAction'
      description: Specifies one of the following actions to receive notifications
        when the alarm state changes.
    AlarmActions:
      type: array
      items:
        $ref: '#/components/schemas/AlarmAction'
    AlarmCapabilities:
      type: object
      properties:
        initializationConfiguration:
          allOf:
          - $ref: '#/components/schemas/InitializationConfiguration'
          description: Specifies the default alarm state. The configuration applies
            to all alarms that were created based on this alarm model.
        acknowledgeFlow:
          allOf:
          - $ref: '#/components/schemas/AcknowledgeFlow'
          description: Specifies whether to get notified for alarm state changes.
      description: Contains the configuration information of alarm state changes.
    AlarmEventActions:
      type: object
      properties:
        alarmActions:
          allOf:
          - $ref: '#/components/schemas/AlarmActions'
          description: Specifies one or more supported actions to receive notifications
            when the alarm state changes.
      description: Contains information about one or more alarm actions.
    AlarmModelArn:
      type: string
    AlarmModelDescription:
      type: string
      minLength: 0
      maxLength: 1024
    AlarmModelName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 128
    AlarmModelSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AlarmModelSummary'
    AlarmModelSummary:
      type: object
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was created, in the Unix epoch format.
        alarmModelDescription:
          allOf:
          - $ref: '#/components/schemas/AlarmModelDescription'
          description: The description of the alarm model.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
      description: Contains a summary of an alarm model.
    AlarmModelVersion:
      type: string
      minLength: 1
      maxLength: 128
    AlarmModelVersionStatus:
      type: string
      enum:
      - ACTIVE
      - ACTIVATING
      - INACTIVE
      - FAILED
    AlarmModelVersionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/AlarmModelVersionSummary'
    AlarmModelVersionSummary:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelArn:
          allOf:
          - $ref: '#/components/schemas/AlarmModelArn'
          description: The ARN of the alarm model. For more information, see [Amazon
            Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the IAM role that allows the alarm to perform actions
            and access AWS resources. For more information, see [Amazon Resource Names
            (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was created, in the Unix epoch format.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was last updated, in the Unix epoch
            format.
        status:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersionStatus'
          description: "The status of the alarm model. The status can be one of the\
            \ following values:\n\n  * `ACTIVE` \\- The alarm model is active and\
            \ it's ready to evaluate data.\n\n  * `ACTIVATING` \\- AWS IoT Events\
            \ is activating your alarm model. Activating an alarm model can take up\
            \ to a few minutes.\n\n  * `INACTIVE` \\- The alarm model is inactive,\
            \ so it isn't ready to evaluate data. Check your alarm model information\
            \ and update the alarm model.\n\n  * `FAILED` \\- You couldn't create\
            \ or update the alarm model. Check your alarm model information and try\
            \ again."
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: Contains information about the status of the alarm model version.
      description: Contains a summary of an alarm model version.
    AlarmNotification:
      type: object
      properties:
        notificationActions:
          allOf:
          - $ref: '#/components/schemas/NotificationActions'
          description: Contains the notification settings of an alarm model. The settings
            apply to all alarms that were created based on this alarm model.
      description: Contains information about one or more notification actions.
    AlarmRule:
      type: object
      properties:
        simpleRule:
          allOf:
          - $ref: '#/components/schemas/SimpleRule'
          description: A rule that compares an input property value to a threshold
            value with a comparison operator.
      description: Defines when your alarm is invoked.
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 2048
    AnalysisId:
      type: string
    AnalysisMessage:
      type: string
    AnalysisResult:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/AnalysisType'
          description: "The type of the analysis result. Analyses fall into the following\
            \ types based on the validators used to generate the analysis result:\n\
            \n  * `supported-actions` \\- You must specify AWS IoT Events supported\
            \ actions that work with other AWS services in a supported AWS Region.\n\
            \n  * `service-limits` \\- Resources or API operations can't exceed service\
            \ quotas (also known as limits). Update your detector model or request\
            \ a quota increase.\n\n  * `structure` \\- The detector model must follow\
            \ a structure that AWS IoT Events supports. \n\n  * `expression-syntax`\
            \ \\- Your expression must follow the required syntax.\n\n  * `data-type`\
            \ \\- Data types referenced in the detector model must be compatible.\n\
            \n  * `referenced-data` \\- You must define the data referenced in your\
            \ detector model before you can use the data.\n\n  * `referenced-resource`\
            \ \\- Resources that the detector model uses must be available.\n\nFor\
            \ more information, see [Running detector model analyses](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html)\
            \ in the _AWS IoT Events Developer Guide_."
        level:
          allOf:
          - $ref: '#/components/schemas/AnalysisResultLevel'
          description: "The severity level of the analysis result. Based on the severity\
            \ level, analysis results fall into three general categories:\n\n  * `INFO`\
            \ \\- An information result tells you about a significant field in your\
            \ detector model. This type of result usually doesn't require immediate\
            \ action.\n\n  * `WARNING` \\- A warning result draws special attention\
            \ to fields that might cause issues for your detector model. We recommend\
            \ that you review warnings and take necessary actions before you use your\
            \ detector model in production environments. Otherwise, the detector model\
            \ might not work as expected.\n\n  * `ERROR` \\- An error result notifies\
            \ you about a problem found in your detector model. You must fix all errors\
            \ before you can publish your detector model."
        message:
          allOf:
          - $ref: '#/components/schemas/AnalysisMessage'
          description: Contains additional information about the analysis result.
        locations:
          allOf:
          - $ref: '#/components/schemas/AnalysisResultLocations'
          description: Contains one or more locations that you can use to locate the
            fields in your detector model that the analysis result references.
      description: Contains the result of the analysis.
    AnalysisResultLevel:
      type: string
      enum:
      - INFO
      - WARNING
      - ERROR
    AnalysisResultLocation:
      type: object
      properties:
        path:
          allOf:
          - $ref: '#/components/schemas/AnalysisResultLocationPath'
          description: A [JsonPath](https://github.com/json-path/JsonPath) expression
            that identifies the error field in your detector model.
      description: Contains information that you can use to locate the field in your
        detector model that the analysis result references.
    AnalysisResultLocationPath:
      type: string
    AnalysisResultLocations:
      type: array
      items:
        $ref: '#/components/schemas/AnalysisResultLocation'
    AnalysisResults:
      type: array
      items:
        $ref: '#/components/schemas/AnalysisResult'
    AnalysisStatus:
      type: string
      enum:
      - RUNNING
      - COMPLETE
      - FAILED
    AnalysisType:
      type: string
    AssetId:
      type: string
    AssetModelId:
      type: string
    AssetPropertyAlias:
      type: string
    AssetPropertyBooleanValue:
      type: string
    AssetPropertyDoubleValue:
      type: string
    AssetPropertyEntryId:
      type: string
    AssetPropertyId:
      type: string
    AssetPropertyIntegerValue:
      type: string
    AssetPropertyOffsetInNanos:
      type: string
    AssetPropertyQuality:
      type: string
    AssetPropertyStringValue:
      type: string
    AssetPropertyTimeInSeconds:
      type: string
    AssetPropertyTimestamp:
      type: object
      properties:
        timeInSeconds:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyTimeInSeconds'
          description: The timestamp, in seconds, in the Unix epoch format. The valid
            range is between 1-31556889864403199.
        offsetInNanos:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyOffsetInNanos'
          description: The nanosecond offset converted from `timeInSeconds`. The valid
            range is between 0-999999999.
      required:
      - timeInSeconds
      description: "A structure that contains timestamp information. For more information,\
        \ see [TimeInNanos](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html)\
        \ in the _AWS IoT SiteWise API Reference_.\n\nYou must use expressions for\
        \ all parameters in `AssetPropertyTimestamp`. The expressions accept literals,\
        \ operators, functions, references, and substitution templates.\n\n**Examples**\n\
        \n  * For literal values, the expressions must contain single quotes. For\
        \ example, the value for the `timeInSeconds` parameter can be `'1586400675'`.\n\
        \n  * For references, you must specify either variables or input values. For\
        \ example, the value for the `offsetInNanos` parameter can be `$variable.time`.\n\
        \n  * For a substitution template, you must use `${}`, and the template must\
        \ be in single quotes. A substitution template can also contain a combination\
        \ of literals, operators, functions, references, and substitution templates.\n\
        \nIn the following example, the value for the `timeInSeconds` parameter uses\
        \ a substitution template.\n\n`'${$input.TemperatureInput.sensorData.timestamp\
        \ / 1000}'`\n\nFor more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_."
    AssetPropertyValue:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyVariant'
          description: The value to send to an asset property.
        timestamp:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyTimestamp'
          description: The timestamp associated with the asset property value. The
            default is the current event time.
        quality:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyQuality'
          description: The quality of the asset property value. The value must be
            `'GOOD'`, `'BAD'`, or `'UNCERTAIN'`.
      description: "A structure that contains value information. For more information,\
        \ see [AssetPropertyValue](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html)\
        \ in the _AWS IoT SiteWise API Reference_.\n\nYou must use expressions for\
        \ all parameters in `AssetPropertyValue`. The expressions accept literals,\
        \ operators, functions, references, and substitution templates.\n\n**Examples**\n\
        \n  * For literal values, the expressions must contain single quotes. For\
        \ example, the value for the `quality` parameter can be `'GOOD'`.\n\n  * For\
        \ references, you must specify either variables or input values. For example,\
        \ the value for the `quality` parameter can be `$input.TemperatureInput.sensorData.quality`.\n\
        \nFor more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_."
    AssetPropertyVariant:
      type: object
      properties:
        stringValue:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyStringValue'
          description: The asset property value is a string. You must use an expression,
            and the evaluated result should be a string.
        integerValue:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyIntegerValue'
          description: The asset property value is an integer. You must use an expression,
            and the evaluated result should be an integer.
        doubleValue:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyDoubleValue'
          description: The asset property value is a double. You must use an expression,
            and the evaluated result should be a double.
        booleanValue:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyBooleanValue'
          description: The asset property value is a Boolean value that must be `'TRUE'`
            or `'FALSE'`. You must use an expression, and the evaluated result should
            be a Boolean value.
      description: "A structure that contains an asset property value. For more information,\
        \ see [Variant](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html)\
        \ in the _AWS IoT SiteWise API Reference_.\n\nYou must use expressions for\
        \ all parameters in `AssetPropertyVariant`. The expressions accept literals,\
        \ operators, functions, references, and substitution templates.\n\n**Examples**\n\
        \n  * For literal values, the expressions must contain single quotes. For\
        \ example, the value for the `integerValue` parameter can be `'100'`.\n\n\
        \  * For references, you must specify either variables or parameters. For\
        \ example, the value for the `booleanValue` parameter can be `$variable.offline`.\n\
        \n  * For a substitution template, you must use `${}`, and the template must\
        \ be in single quotes. A substitution template can also contain a combination\
        \ of literals, operators, functions, references, and substitution templates.\
        \ \n\nIn the following example, the value for the `doubleValue` parameter\
        \ uses a substitution template.\n\n`'${$input.TemperatureInput.sensorData.temperature\
        \ * 6 / 5 + 32}'`\n\nFor more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_.\n\nYou must specify one of the\
        \ following value types, depending on the `dataType` of the specified asset\
        \ property. For more information, see [AssetProperty](https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html)\
        \ in the _AWS IoT SiteWise API Reference_."
    Attribute:
      type: object
      properties:
        jsonPath:
          allOf:
          - $ref: '#/components/schemas/AttributeJsonPath'
          description: 'An expression that specifies an attribute-value pair in a
            JSON structure. Use this to specify an attribute from the JSON payload
            that is made available by the input. Inputs are derived from messages
            sent to AWS IoT Events (`BatchPutMessage`). Each such message contains
            a JSON payload. The attribute (and its paired value) specified here are
            available for use in the `condition` expressions used by detectors.


            Syntax: `....`'
      required:
      - jsonPath
      description: The attributes from the JSON payload that are made available by
        the input. Inputs are derived from messages sent to the AWS IoT Events system
        using `BatchPutMessage`. Each such message contains a JSON payload. Those
        attributes (and their paired values) specified here are available for use
        in the `condition` expressions used by detectors.
    AttributeJsonPath:
      type: string
      pattern: ^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$
      minLength: 1
      maxLength: 128
    Attributes:
      type: array
      items:
        $ref: '#/components/schemas/Attribute'
    ClearTimerAction:
      type: object
      properties:
        timerName:
          allOf:
          - $ref: '#/components/schemas/TimerName'
          description: The name of the timer to clear.
      required:
      - timerName
      description: Information needed to clear the timer.
    ComparisonOperator:
      type: string
      enum:
      - GREATER
      - GREATER_OR_EQUAL
      - LESS
      - LESS_OR_EQUAL
      - EQUAL
      - NOT_EQUAL
    Condition:
      type: string
      minLength: 0
      maxLength: 512
    ContentExpression:
      type: string
      minLength: 1
    CreateAlarmModelRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: A unique name that helps you identify the alarm model. You
            can't change this name after you create the alarm model.
        alarmModelDescription:
          allOf:
          - $ref: '#/components/schemas/AlarmModelDescription'
          description: A description that tells you what the alarm model detects.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the IAM role that allows the alarm to perform actions
            and access AWS resources. For more information, see [Amazon Resource Names
            (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: 'A list of key-value pairs that contain metadata for the alarm
            model. The tags help you manage the alarm model. For more information,
            see [Tagging your AWS IoT Events resources](https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html)
            in the _AWS IoT Events Developer Guide_.


            You can create up to 50 tags for one alarm model.'
        key:
          allOf:
          - $ref: '#/components/schemas/AttributeJsonPath'
          description: An input attribute used as a key to create an alarm. AWS IoT
            Events routes [inputs](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html)
            associated with this key to the alarm.
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: A non-negative integer that reflects the severity level of
            the alarm.
        alarmRule:
          allOf:
          - $ref: '#/components/schemas/AlarmRule'
          description: Defines when your alarm is invoked.
        alarmNotification:
          allOf:
          - $ref: '#/components/schemas/AlarmNotification'
          description: Contains information about one or more notification actions.
        alarmEventActions:
          allOf:
          - $ref: '#/components/schemas/AlarmEventActions'
          description: Contains information about one or more alarm actions.
        alarmCapabilities:
          allOf:
          - $ref: '#/components/schemas/AlarmCapabilities'
          description: Contains the configuration information of alarm state changes.
      required:
      - alarmModelName
      - roleArn
      - alarmRule
    CreateAlarmModelResponse:
      type: object
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was created, in the Unix epoch format.
        alarmModelArn:
          allOf:
          - $ref: '#/components/schemas/AlarmModelArn'
          description: The ARN of the alarm model. For more information, see [Amazon
            Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was last updated, in the Unix epoch
            format.
        status:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersionStatus'
          description: "The status of the alarm model. The status can be one of the\
            \ following values:\n\n  * `ACTIVE` \\- The alarm model is active and\
            \ it's ready to evaluate data.\n\n  * `ACTIVATING` \\- AWS IoT Events\
            \ is activating your alarm model. Activating an alarm model can take up\
            \ to a few minutes.\n\n  * `INACTIVE` \\- The alarm model is inactive,\
            \ so it isn't ready to evaluate data. Check your alarm model information\
            \ and update the alarm model.\n\n  * `FAILED` \\- You couldn't create\
            \ or update the alarm model. Check your alarm model information and try\
            \ again."
    CreateDetectorModelRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        detectorModelDefinition:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDefinition'
          description: Information that defines how the detectors operate.
        detectorModelDescription:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDescription'
          description: A brief description of the detector model.
        key:
          allOf:
          - $ref: '#/components/schemas/AttributeJsonPath'
          description: The input attribute key used to identify a device or system
            to create a detector (an instance of the detector model) and then to route
            each input received to the appropriate detector (instance). This parameter
            uses a JSON-path expression in the message payload of each input to specify
            the attribute-value pair that is used to identify the device associated
            with the input.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the role that grants permission to AWS IoT Events
            to perform its operations.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Metadata that can be used to manage the detector model.
        evaluationMethod:
          allOf:
          - $ref: '#/components/schemas/EvaluationMethod'
          description: Information about the order in which events are evaluated and
            how actions are executed.
      required:
      - detectorModelName
      - detectorModelDefinition
      - roleArn
    CreateDetectorModelResponse:
      type: object
      properties:
        detectorModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/DetectorModelConfiguration'
          description: Information about how the detector model is configured.
    CreateInputRequest:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name you want to give to the input.
        inputDescription:
          allOf:
          - $ref: '#/components/schemas/InputDescription'
          description: A brief description of the input.
        inputDefinition:
          allOf:
          - $ref: '#/components/schemas/InputDefinition'
          description: The definition of the input.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Metadata that can be used to manage the input.
      required:
      - inputName
      - inputDefinition
    CreateInputResponse:
      type: object
      properties:
        inputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InputConfiguration'
          description: Information about the configuration of the input.
    DeleteAlarmModelRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
      required:
      - alarmModelName
    DeleteAlarmModelResponse:
      type: object
      properties: {}
    DeleteDetectorModelRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model to be deleted.
      required:
      - detectorModelName
    DeleteDetectorModelResponse:
      type: object
      properties: {}
    DeleteInputRequest:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input to delete.
      required:
      - inputName
    DeleteInputResponse:
      type: object
      properties: {}
    DeliveryStreamName:
      type: string
    DescribeAlarmModelRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
      required:
      - alarmModelName
    DescribeAlarmModelResponse:
      type: object
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was created, in the Unix epoch format.
        alarmModelArn:
          allOf:
          - $ref: '#/components/schemas/AlarmModelArn'
          description: The ARN of the alarm model. For more information, see [Amazon
            Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was last updated, in the Unix epoch
            format.
        status:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersionStatus'
          description: "The status of the alarm model. The status can be one of the\
            \ following values:\n\n  * `ACTIVE` \\- The alarm model is active and\
            \ it's ready to evaluate data.\n\n  * `ACTIVATING` \\- AWS IoT Events\
            \ is activating your alarm model. Activating an alarm model can take up\
            \ to a few minutes.\n\n  * `INACTIVE` \\- The alarm model is inactive,\
            \ so it isn't ready to evaluate data. Check your alarm model information\
            \ and update the alarm model.\n\n  * `FAILED` \\- You couldn't create\
            \ or update the alarm model. Check your alarm model information and try\
            \ again."
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: Contains information about the status of the alarm model.
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelDescription:
          allOf:
          - $ref: '#/components/schemas/AlarmModelDescription'
          description: The description of the alarm model.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the IAM role that allows the alarm to perform actions
            and access AWS resources. For more information, see [Amazon Resource Names
            (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        key:
          allOf:
          - $ref: '#/components/schemas/AttributeJsonPath'
          description: An input attribute used as a key to create an alarm. AWS IoT
            Events routes [inputs](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html)
            associated with this key to the alarm.
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: A non-negative integer that reflects the severity level of
            the alarm.
        alarmRule:
          allOf:
          - $ref: '#/components/schemas/AlarmRule'
          description: Defines when your alarm is invoked.
        alarmNotification:
          allOf:
          - $ref: '#/components/schemas/AlarmNotification'
          description: Contains information about one or more notification actions.
        alarmEventActions:
          allOf:
          - $ref: '#/components/schemas/AlarmEventActions'
          description: Contains information about one or more alarm actions.
        alarmCapabilities:
          allOf:
          - $ref: '#/components/schemas/AlarmCapabilities'
          description: Contains the configuration information of alarm state changes.
    DescribeDetectorModelAnalysisRequest:
      type: object
      properties:
        analysisId:
          allOf:
          - $ref: '#/components/schemas/AnalysisId'
          description: The ID of the analysis result that you want to retrieve.
      required:
      - analysisId
    DescribeDetectorModelAnalysisResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/AnalysisStatus'
          description: "The status of the analysis activity. The status can be one\
            \ of the following values:\n\n  * `RUNNING` \\- AWS IoT Events is analyzing\
            \ your detector model. This process can take several minutes to complete.\n\
            \n  * `COMPLETE` \\- AWS IoT Events finished analyzing your detector model.\n\
            \n  * `FAILED` \\- AWS IoT Events couldn't analyze your detector model.\
            \ Try again later."
    DescribeDetectorModelRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        detectorModelVersion:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersion'
          description: The version of the detector model.
      required:
      - detectorModelName
    DescribeDetectorModelResponse:
      type: object
      properties:
        detectorModel:
          allOf:
          - $ref: '#/components/schemas/DetectorModel'
          description: Information about the detector model.
    DescribeInputRequest:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input.
      required:
      - inputName
    DescribeInputResponse:
      type: object
      properties:
        input:
          allOf:
          - $ref: '#/components/schemas/Input'
          description: Information about the input.
    DescribeLoggingOptionsRequest:
      type: object
      properties: {}
    DescribeLoggingOptionsResponse:
      type: object
      properties:
        loggingOptions:
          allOf:
          - $ref: '#/components/schemas/LoggingOptions'
          description: The current settings of the AWS IoT Events logging options.
    DetectorDebugOption:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        keyValue:
          allOf:
          - $ref: '#/components/schemas/KeyValue'
          description: The value of the input attribute key used to create the detector
            (the instance of the detector model).
      required:
      - detectorModelName
      description: The detector model and the specific detectors (instances) for which
        the logging level is given.
    DetectorDebugOptions:
      type: array
      items:
        $ref: '#/components/schemas/DetectorDebugOption'
    DetectorModel:
      type: object
      properties:
        detectorModelDefinition:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDefinition'
          description: Information that defines how a detector operates.
        detectorModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/DetectorModelConfiguration'
          description: Information about how the detector is configured.
      description: Information about the detector model.
    DetectorModelArn:
      type: string
    DetectorModelConfiguration:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        detectorModelVersion:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersion'
          description: The version of the detector model.
        detectorModelDescription:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDescription'
          description: A brief description of the detector model.
        detectorModelArn:
          allOf:
          - $ref: '#/components/schemas/DetectorModelArn'
          description: The ARN of the detector model.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the role that grants permission to AWS IoT Events
            to perform its operations.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector model was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector model was last updated.
        status:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersionStatus'
          description: The status of the detector model.
        key:
          allOf:
          - $ref: '#/components/schemas/AttributeJsonPath'
          description: 'The value used to identify a detector instance. When a device
            or system sends input, a new detector instance with a unique key value
            is created. AWS IoT Events can continue to route input to its corresponding
            detector instance based on this identifying information.


            This parameter uses a JSON-path expression to select the attribute-value
            pair in the message payload that is used for identification. To route
            the message to the correct detector instance, the device must send a message
            payload that contains the same attribute-value.'
        evaluationMethod:
          allOf:
          - $ref: '#/components/schemas/EvaluationMethod'
          description: Information about the order in which events are evaluated and
            how actions are executed.
      description: Information about how the detector model is configured.
    DetectorModelDefinition:
      type: object
      properties:
        states:
          allOf:
          - $ref: '#/components/schemas/States'
          description: Information about the states of the detector.
        initialStateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The state that is entered at the creation of each detector
            (instance).
      required:
      - states
      - initialStateName
      description: Information that defines how a detector operates.
    DetectorModelDescription:
      type: string
      minLength: 0
      maxLength: 1024
    DetectorModelName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 128
    DetectorModelSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DetectorModelSummary'
    DetectorModelSummary:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        detectorModelDescription:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDescription'
          description: A brief description of the detector model.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector model was created.
      description: Information about the detector model.
    DetectorModelVersion:
      type: string
      minLength: 1
      maxLength: 128
    DetectorModelVersionStatus:
      type: string
      enum:
      - ACTIVE
      - ACTIVATING
      - INACTIVE
      - DEPRECATED
      - DRAFT
      - PAUSED
      - FAILED
    DetectorModelVersionSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DetectorModelVersionSummary'
    DetectorModelVersionSummary:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model.
        detectorModelVersion:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersion'
          description: The ID of the detector model version.
        detectorModelArn:
          allOf:
          - $ref: '#/components/schemas/DetectorModelArn'
          description: The ARN of the detector model version.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the role that grants the detector model permission
            to perform its tasks.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the detector model version was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time the detector model version was updated.
        status:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersionStatus'
          description: The status of the detector model version.
        evaluationMethod:
          allOf:
          - $ref: '#/components/schemas/EvaluationMethod'
          description: Information about the order in which events are evaluated and
            how actions are executed.
      description: Information about the detector model version.
    DisabledOnInitialization:
      type: boolean
    DynamoDBAction:
      type: object
      properties:
        hashKeyType:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyType'
          description: "The data type for the hash key (also called the partition\
            \ key). You can specify the following values:\n\n  * `'STRING'` \\- The\
            \ hash key is a string.\n\n  * `'NUMBER'` \\- The hash key is a number.\n\
            \nIf you don't specify `hashKeyType`, the default value is `'STRING'`."
        hashKeyField:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyField'
          description: The name of the hash key (also called the partition key). The
            `hashKeyField` value must match the partition key of the target DynamoDB
            table.
        hashKeyValue:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyValue'
          description: The value of the hash key (also called the partition key).
        rangeKeyType:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyType'
          description: "The data type for the range key (also called the sort key),\
            \ You can specify the following values:\n\n  * `'STRING'` \\- The range\
            \ key is a string.\n\n  * `'NUMBER'` \\- The range key is number.\n\n\
            If you don't specify `rangeKeyField`, the default value is `'STRING'`."
        rangeKeyField:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyField'
          description: The name of the range key (also called the sort key). The `rangeKeyField`
            value must match the sort key of the target DynamoDB table.
        rangeKeyValue:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyValue'
          description: The value of the range key (also called the sort key).
        operation:
          allOf:
          - $ref: '#/components/schemas/DynamoOperation'
          description: "The type of operation to perform. You can specify the following\
            \ values:\n\n  * `'INSERT'` \\- Insert data as a new item into the DynamoDB\
            \ table. This item uses the specified hash key as a partition key. If\
            \ you specified a range key, the item uses the range key as a sort key.\n\
            \n  * `'UPDATE'` \\- Update an existing item of the DynamoDB table with\
            \ new data. This item's partition key must match the specified hash key.\
            \ If you specified a range key, the range key must match the item's sort\
            \ key.\n\n  * `'DELETE'` \\- Delete an existing item of the DynamoDB table.\
            \ This item's partition key must match the specified hash key. If you\
            \ specified a range key, the range key must match the item's sort key.\n\
            \nIf you don't specify this parameter, AWS IoT Events triggers the `'INSERT'`\
            \ operation."
        payloadField:
          allOf:
          - $ref: '#/components/schemas/DynamoKeyField'
          description: 'The name of the DynamoDB column that receives the action payload.


            If you don''t specify this parameter, the name of the DynamoDB column
            is `payload`.'
        tableName:
          allOf:
          - $ref: '#/components/schemas/DynamoTableName'
          description: The name of the DynamoDB table. The `tableName` value must
            match the table name of the target DynamoDB table.
        payload:
          $ref: '#/components/schemas/Payload'
      required:
      - hashKeyField
      - hashKeyValue
      - tableName
      description: "Defines an action to write to the Amazon DynamoDB table that you\
        \ created. The standard action payload contains all the information about\
        \ the detector model instance and the event that triggered the action. You\
        \ can customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).\
        \ One column of the DynamoDB table receives all attribute-value pairs in the\
        \ payload that you specify.\n\nYou must use expressions for all parameters\
        \ in `DynamoDBAction`. The expressions accept literals, operators, functions,\
        \ references, and substitution templates.\n\n**Examples**\n\n  * For literal\
        \ values, the expressions must contain single quotes. For example, the value\
        \ for the `hashKeyType` parameter can be `'STRING'`.\n\n  * For references,\
        \ you must specify either variables or input values. For example, the value\
        \ for the `hashKeyField` parameter can be `$input.GreenhouseInput.name`.\n\
        \n  * For a substitution template, you must use `${}`, and the template must\
        \ be in single quotes. A substitution template can also contain a combination\
        \ of literals, operators, functions, references, and substitution templates.\n\
        \nIn the following example, the value for the `hashKeyValue` parameter uses\
        \ a substitution template.\n\n`'${$input.GreenhouseInput.temperature * 6 /\
        \ 5 + 32} in Fahrenheit'`\n\n  * For a string concatenation, you must use\
        \ `+`. A string concatenation can also contain a combination of literals,\
        \ operators, functions, references, and substitution templates.\n\nIn the\
        \ following example, the value for the `tableName` parameter uses a string\
        \ concatenation.\n\n`'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`\n\
        \nFor more information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_.\n\nIf the defined payload type\
        \ is a string, `DynamoDBAction` writes non-JSON data to the DynamoDB table\
        \ as binary data. The DynamoDB console displays the data as Base64-encoded\
        \ text. The value for the `payloadField` parameter is `_raw`."
    DynamoDBv2Action:
      type: object
      properties:
        tableName:
          allOf:
          - $ref: '#/components/schemas/DynamoTableName'
          description: The name of the DynamoDB table.
        payload:
          $ref: '#/components/schemas/Payload'
      required:
      - tableName
      description: "Defines an action to write to the Amazon DynamoDB table that you\
        \ created. The default action payload contains all the information about the\
        \ detector model instance and the event that triggered the action. You can\
        \ customize the [payload](https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html).\
        \ A separate column of the DynamoDB table receives one attribute-value pair\
        \ in the payload that you specify.\n\nYou must use expressions for all parameters\
        \ in `DynamoDBv2Action`. The expressions accept literals, operators, functions,\
        \ references, and substitution templates.\n\n**Examples**\n\n  * For literal\
        \ values, the expressions must contain single quotes. For example, the value\
        \ for the `tableName` parameter can be `'GreenhouseTemperatureTable'`.\n\n\
        \  * For references, you must specify either variables or input values. For\
        \ example, the value for the `tableName` parameter can be `$variable.ddbtableName`.\n\
        \n  * For a substitution template, you must use `${}`, and the template must\
        \ be in single quotes. A substitution template can also contain a combination\
        \ of literals, operators, functions, references, and substitution templates.\n\
        \nIn the following example, the value for the `contentExpression` parameter\
        \ in `Payload` uses a substitution template.\n\n`'{\\\"sensorID\\\": \\\"\
        ${$input.GreenhouseInput.sensor_id}\\\", \\\"temperature\\\": \\\"${$input.GreenhouseInput.temperature\
        \ * 9 / 5 + 32}\\\"}'`\n\n  * For a string concatenation, you must use `+`.\
        \ A string concatenation can also contain a combination of literals, operators,\
        \ functions, references, and substitution templates.\n\nIn the following example,\
        \ the value for the `tableName` parameter uses a string concatenation.\n\n\
        `'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date`\n\nFor more\
        \ information, see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_.\n\nThe value for the `type` parameter\
        \ in `Payload` must be `JSON`."
    DynamoKeyField:
      type: string
    DynamoKeyType:
      type: string
    DynamoKeyValue:
      type: string
    DynamoOperation:
      type: string
    DynamoTableName:
      type: string
    EmailConfiguration:
      type: object
      properties:
        from:
          allOf:
          - $ref: '#/components/schemas/FromEmail'
          description: 'The email address that sends emails.


            If you use the AWS IoT Events managed AWS Lambda function to manage your
            emails, you must [verify the email address that sends emails in Amazon
            SES](https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html).'
        content:
          allOf:
          - $ref: '#/components/schemas/EmailContent'
          description: Contains the subject and message of an email.
        recipients:
          allOf:
          - $ref: '#/components/schemas/EmailRecipients'
          description: 'Contains the information of one or more recipients who receive
            the emails.


            You must [add the users that receive emails to your AWS SSO store](https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html).'
      required:
      - from
      - recipients
      description: Contains the configuration information of email notifications.
    EmailConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/EmailConfiguration'
    EmailContent:
      type: object
      properties:
        subject:
          allOf:
          - $ref: '#/components/schemas/EmailSubject'
          description: The subject of the email.
        additionalMessage:
          allOf:
          - $ref: '#/components/schemas/NotificationAdditionalMessage'
          description: The message that you want to send. The message can be up to
            200 characters.
      description: Contains the subject and message of an email.
    EmailRecipients:
      type: object
      properties:
        to:
          allOf:
          - $ref: '#/components/schemas/RecipientDetails'
          description: Specifies one or more recipients who receive the email.
      description: 'Contains the information of one or more recipients who receive
        the emails.


        You must [add the users that receive emails to your AWS SSO store](https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html).'
    EmailSubject:
      type: string
    EvaluationMethod:
      type: string
      enum:
      - BATCH
      - SERIAL
    Event:
      type: object
      properties:
        eventName:
          allOf:
          - $ref: '#/components/schemas/EventName'
          description: The name of the event.
        condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          description: Optional. The Boolean expression that, when TRUE, causes the
            `actions` to be performed. If not present, the actions are performed (=TRUE).
            If the expression result is not a Boolean value, the actions are not performed
            (=FALSE).
        actions:
          allOf:
          - $ref: '#/components/schemas/Actions'
          description: The actions to be performed.
      required:
      - eventName
      description: Specifies the `actions` to be performed when the `condition` evaluates
        to TRUE.
    EventName:
      type: string
      minLength: 0
      maxLength: 128
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    FirehoseAction:
      type: object
      properties:
        deliveryStreamName:
          allOf:
          - $ref: '#/components/schemas/DeliveryStreamName'
          description: The name of the Kinesis Data Firehose delivery stream where
            the data is written.
        separator:
          allOf:
          - $ref: '#/components/schemas/FirehoseSeparator'
          description: 'A character separator that is used to separate records written
            to the Kinesis Data Firehose delivery stream. Valid values are: ''\n''
            (newline), ''\t'' (tab), ''\r\n'' (Windows newline), '','' (comma).'
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message
            to an Amazon Kinesis Data Firehose delivery stream.
      required:
      - deliveryStreamName
      description: Sends information about the detector model instance and the event
        that triggered the action to an Amazon Kinesis Data Firehose delivery stream.
    FirehoseSeparator:
      type: string
      pattern: ^([\n\t])|(\r\n)|(,)$
    FromEmail:
      type: string
    GetDetectorModelAnalysisResultsRequest:
      type: object
      properties:
        analysisId:
          allOf:
          - $ref: '#/components/schemas/AnalysisId'
          description: The ID of the analysis result that you want to retrieve.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxAnalysisResults'
          description: The maximum number of results to be returned per request.
      required:
      - analysisId
    GetDetectorModelAnalysisResultsResponse:
      type: object
      properties:
        analysisResults:
          allOf:
          - $ref: '#/components/schemas/AnalysisResults'
          description: Contains information about one or more analysis results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    IdentityStoreId:
      type: string
    InitializationConfiguration:
      type: object
      properties:
        disabledOnInitialization:
          allOf:
          - $ref: '#/components/schemas/DisabledOnInitialization'
          description: The value must be `TRUE` or `FALSE`. If `FALSE`, all alarm
            instances created based on the alarm model are activated. The default
            value is `TRUE`.
      required:
      - disabledOnInitialization
      description: Specifies the default alarm state. The configuration applies to
        all alarms that were created based on this alarm model.
    Input:
      type: object
      properties:
        inputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InputConfiguration'
          description: Information about the configuration of an input.
        inputDefinition:
          allOf:
          - $ref: '#/components/schemas/InputDefinition'
          description: The definition of the input.
      description: Information about the input.
    InputArn:
      type: string
    InputConfiguration:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input.
        inputDescription:
          allOf:
          - $ref: '#/components/schemas/InputDescription'
          description: A brief description of the input.
        inputArn:
          allOf:
          - $ref: '#/components/schemas/InputArn'
          description: The ARN of the input.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the input was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time the input was updated.
        status:
          allOf:
          - $ref: '#/components/schemas/InputStatus'
          description: The status of the input.
      required:
      - inputName
      - inputArn
      - creationTime
      - lastUpdateTime
      - status
      description: Information about the configuration of an input.
    InputDefinition:
      type: object
      properties:
        attributes:
          allOf:
          - $ref: '#/components/schemas/Attributes'
          description: The attributes from the JSON payload that are made available
            by the input. Inputs are derived from messages sent to the AWS IoT Events
            system using `BatchPutMessage`. Each such message contains a JSON payload,
            and those attributes (and their paired values) specified here are available
            for use in the `condition` expressions used by detectors that monitor
            this input.
      required:
      - attributes
      description: The definition of the input.
    InputDescription:
      type: string
      minLength: 0
      maxLength: 1024
    InputIdentifier:
      type: object
      properties:
        iotEventsInputIdentifier:
          allOf:
          - $ref: '#/components/schemas/IotEventsInputIdentifier'
          description: The identifier of the input routed to AWS IoT Events.
        iotSiteWiseInputIdentifier:
          allOf:
          - $ref: '#/components/schemas/IotSiteWiseInputIdentifier'
          description: The identifer of the input routed from AWS IoT SiteWise.
      description: The identifer of the input.
    InputName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    InputProperty:
      type: string
      minLength: 1
      maxLength: 512
    InputStatus:
      type: string
      enum:
      - CREATING
      - UPDATING
      - ACTIVE
      - DELETING
    InputSummaries:
      type: array
      items:
        $ref: '#/components/schemas/InputSummary'
    InputSummary:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input.
        inputDescription:
          allOf:
          - $ref: '#/components/schemas/InputDescription'
          description: A brief description of the input.
        inputArn:
          allOf:
          - $ref: '#/components/schemas/InputArn'
          description: The ARN of the input.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the input was created.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last time the input was updated.
        status:
          allOf:
          - $ref: '#/components/schemas/InputStatus'
          description: The status of the input.
      description: Information about the input.
    InternalFailureException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: An internal failure occurred.
    InvalidRequestException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The request was invalid.
    IotEventsAction:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the AWS IoT Events input where the data is sent.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message
            to an AWS IoT Events input.
      required:
      - inputName
      description: Sends an AWS IoT Events input, passing in information about the
        detector model instance and the event that triggered the action.
    IotEventsInputIdentifier:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input routed to AWS IoT Events.
      required:
      - inputName
      description: The identifier of the input routed to AWS IoT Events.
    IotSiteWiseAction:
      type: object
      properties:
        entryId:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyEntryId'
          description: A unique identifier for this entry. You can use the entry ID
            to track which data entry causes an error in case of failure. The default
            is a new unique identifier.
        assetId:
          allOf:
          - $ref: '#/components/schemas/AssetId'
          description: The ID of the asset that has the specified property.
        propertyId:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyId'
          description: The ID of the asset property.
        propertyAlias:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyAlias'
          description: The alias of the asset property.
        propertyValue:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyValue'
          description: The value to send to the asset property. This value contains
            timestamp, quality, and value (TQV) information.
      description: "Sends information about the detector model instance and the event\
        \ that triggered the action to a specified asset property in AWS IoT SiteWise.\n\
        \nYou must use expressions for all parameters in `IotSiteWiseAction`. The\
        \ expressions accept literals, operators, functions, references, and substitutions\
        \ templates.\n\n**Examples**\n\n  * For literal values, the expressions must\
        \ contain single quotes. For example, the value for the `propertyAlias` parameter\
        \ can be `'/company/windfarm/3/turbine/7/temperature'`.\n\n  * For references,\
        \ you must specify either variables or input values. For example, the value\
        \ for the `assetId` parameter can be `$input.TurbineInput.assetId1`.\n\n \
        \ * For a substitution template, you must use `${}`, and the template must\
        \ be in single quotes. A substitution template can also contain a combination\
        \ of literals, operators, functions, references, and substitution templates.\n\
        \nIn the following example, the value for the `propertyAlias` parameter uses\
        \ a substitution template.\n\n`'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/\
        \ ${$input.TemperatureInput.sensorData.turbineID}/temperature'`\n\nYou must\
        \ specify either `propertyAlias` or both `assetId` and `propertyId` to identify\
        \ the target asset property in AWS IoT SiteWise.\n\nFor more information,\
        \ see [Expressions](https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html)\
        \ in the _AWS IoT Events Developer Guide_."
    IotSiteWiseAssetModelPropertyIdentifier:
      type: object
      properties:
        assetModelId:
          allOf:
          - $ref: '#/components/schemas/AssetModelId'
          description: The ID of the AWS IoT SiteWise asset model.
        propertyId:
          allOf:
          - $ref: '#/components/schemas/AssetPropertyId'
          description: The ID of the AWS IoT SiteWise asset property.
      required:
      - assetModelId
      - propertyId
      description: The asset model property identifer of the input routed from AWS
        IoT SiteWise.
    IotSiteWiseInputIdentifier:
      type: object
      properties:
        iotSiteWiseAssetModelPropertyIdentifier:
          allOf:
          - $ref: '#/components/schemas/IotSiteWiseAssetModelPropertyIdentifier'
          description: The identifier of the AWS IoT SiteWise asset model property.
      description: The identifer of the input routed from AWS IoT SiteWise.
    IotTopicPublishAction:
      type: object
      properties:
        mqttTopic:
          allOf:
          - $ref: '#/components/schemas/MQTTTopic'
          description: The MQTT topic of the message. You can use a string expression
            that includes variables (`$variable.`) and input values (`$input..`) as
            the topic string.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you publish a message
            to an AWS IoT Core topic.
      required:
      - mqttTopic
      description: Information required to publish the MQTT message through the AWS
        IoT message broker.
    KeyValue:
      type: string
      pattern: ^[a-zA-Z0-9\-_:]+$
      minLength: 1
      maxLength: 128
    LambdaAction:
      type: object
      properties:
        functionArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the Lambda function that is executed.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message
            to a Lambda function.
      required:
      - functionArn
      description: Calls a Lambda function, passing in information about the detector
        model instance and the event that triggered the action.
    LimitExceededException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: A limit was exceeded.
    ListAlarmModelVersionsRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
      required:
      - alarmModelName
    ListAlarmModelVersionsResponse:
      type: object
      properties:
        alarmModelVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersionSummaries'
          description: A list that summarizes each alarm model version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListAlarmModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
    ListAlarmModelsResponse:
      type: object
      properties:
        alarmModelSummaries:
          allOf:
          - $ref: '#/components/schemas/AlarmModelSummaries'
          description: A list that summarizes each alarm model.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListDetectorModelVersionsRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model whose versions are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
      required:
      - detectorModelName
    ListDetectorModelVersionsResponse:
      type: object
      properties:
        detectorModelVersionSummaries:
          allOf:
          - $ref: '#/components/schemas/DetectorModelVersionSummaries'
          description: Summary information about the detector model versions.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListDetectorModelsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
    ListDetectorModelsResponse:
      type: object
      properties:
        detectorModelSummaries:
          allOf:
          - $ref: '#/components/schemas/DetectorModelSummaries'
          description: Summary information about the detector models.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListInputRoutingsRequest:
      type: object
      properties:
        inputIdentifier:
          allOf:
          - $ref: '#/components/schemas/InputIdentifier'
          description: The identifer of the routed input.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
      required:
      - inputIdentifier
    ListInputRoutingsResponse:
      type: object
      properties:
        routedResources:
          allOf:
          - $ref: '#/components/schemas/RoutedResources'
          description: Summary information about the routed resources.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListInputsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to be returned per request.
    ListInputsResponse:
      type: object
      properties:
        inputSummaries:
          allOf:
          - $ref: '#/components/schemas/InputSummaries'
          description: Summary information about the inputs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The token that you can use to return the next set of results,
            or `null` if there are no more results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the resource.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The list of tags assigned to the resource.
    LoggingEnabled:
      type: boolean
      default: false
    LoggingLevel:
      type: string
      enum:
      - ERROR
      - INFO
      - DEBUG
    LoggingOptions:
      type: object
      properties:
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the role that grants permission to AWS IoT Events
            to perform logging.
        level:
          allOf:
          - $ref: '#/components/schemas/LoggingLevel'
          description: The logging level.
        enabled:
          allOf:
          - $ref: '#/components/schemas/LoggingEnabled'
          description: If TRUE, logging is enabled for AWS IoT Events.
        detectorDebugOptions:
          allOf:
          - $ref: '#/components/schemas/DetectorDebugOptions'
          description: Information that identifies those detector models and their
            detectors (instances) for which the logging level is given.
      required:
      - roleArn
      - level
      - enabled
      description: The values of the AWS IoT Events logging options.
    MQTTTopic:
      type: string
      minLength: 1
      maxLength: 128
    MaxAnalysisResults:
      type: integer
    MaxResults:
      type: integer
      minimum: 1
      maximum: 250
    NextToken:
      type: string
    NotificationAction:
      type: object
      properties:
        action:
          allOf:
          - $ref: '#/components/schemas/NotificationTargetActions'
          description: Specifies an AWS Lambda function to manage alarm notifications.
            You can create one or use the [AWS Lambda function provided by AWS IoT
            Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html).
        smsConfigurations:
          allOf:
          - $ref: '#/components/schemas/SMSConfigurations'
          description: Contains the configuration information of SMS notifications.
        emailConfigurations:
          allOf:
          - $ref: '#/components/schemas/EmailConfigurations'
          description: Contains the configuration information of email notifications.
      required:
      - action
      description: Contains the notification settings of an alarm model. The settings
        apply to all alarms that were created based on this alarm model.
    NotificationActions:
      type: array
      items:
        $ref: '#/components/schemas/NotificationAction'
    NotificationAdditionalMessage:
      type: string
    NotificationTargetActions:
      type: object
      properties:
        lambdaAction:
          $ref: '#/components/schemas/LambdaAction'
      description: Specifies an AWS Lambda function to manage alarm notifications.
        You can create one or use the [AWS Lambda function provided by AWS IoT Events](https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html).
    OnEnterLifecycle:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/Events'
          description: Specifies the actions that are performed when the state is
            entered and the `condition` is `TRUE`.
      description: When entering this state, perform these `actions` if the `condition`
        is TRUE.
    OnExitLifecycle:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/Events'
          description: Specifies the `actions` that are performed when the state is
            exited and the `condition` is `TRUE`.
      description: When exiting this state, perform these `actions` if the specified
        `condition` is `TRUE`.
    OnInputLifecycle:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/Events'
          description: Specifies the actions performed when the `condition` evaluates
            to TRUE.
        transitionEvents:
          allOf:
          - $ref: '#/components/schemas/TransitionEvents'
          description: Specifies the actions performed, and the next state entered,
            when a `condition` evaluates to TRUE.
      description: Specifies the actions performed when the `condition` evaluates
        to TRUE.
    Payload:
      type: object
      properties:
        contentExpression:
          allOf:
          - $ref: '#/components/schemas/ContentExpression'
          description: The content of the payload. You can use a string expression
            that includes quoted strings (`''`), variables (`$variable.`), input values
            (`$input..`), string concatenations, and quoted strings that contain `${}`
            as the content. The recommended maximum size of a content expression is
            1 KB.
        type:
          allOf:
          - $ref: '#/components/schemas/PayloadType'
          description: The value of the payload type can be either `STRING` or `JSON`.
      required:
      - contentExpression
      - type
      description: 'Information needed to configure the payload.


        By default, AWS IoT Events generates a standard payload in JSON for any action.
        This action payload contains all attribute-value pairs that have the information
        about the detector model instance and the event triggered the action. To configure
        the action payload, you can use `contentExpression`.'
    PayloadType:
      type: string
      enum:
      - STRING
      - JSON
    PutLoggingOptionsRequest:
      type: object
      properties:
        loggingOptions:
          allOf:
          - $ref: '#/components/schemas/LoggingOptions'
          description: The new values of the AWS IoT Events logging options.
      required:
      - loggingOptions
    QueueUrl:
      type: string
    RecipientDetail:
      type: object
      properties:
        ssoIdentity:
          allOf:
          - $ref: '#/components/schemas/SSOIdentity'
          description: The AWS Single Sign-On (AWS SSO) authentication information.
      description: The information that identifies the recipient.
    RecipientDetails:
      type: array
      items:
        $ref: '#/components/schemas/RecipientDetail'
    ResetTimerAction:
      type: object
      properties:
        timerName:
          allOf:
          - $ref: '#/components/schemas/TimerName'
          description: The name of the timer to reset.
      required:
      - timerName
      description: Information required to reset the timer. The timer is reset to
        the previously evaluated result of the duration. The duration expression isn't
        reevaluated when you reset the timer.
    ResourceAlreadyExistsException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/resourceId'
          description: The ID of the resource.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/resourceArn'
          description: The ARN of the resource.
      description: The resource already exists.
    ResourceInUseException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The resource is in use.
    ResourceName:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The resource was not found.
    RoutedResource:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ResourceName'
          description: The name of the routed resource.
        arn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the routed resource. For more information, see [Amazon
            Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
      description: Contains information about the routed resource.
    RoutedResources:
      type: array
      items:
        $ref: '#/components/schemas/RoutedResource'
    SMSConfiguration:
      type: object
      properties:
        senderId:
          allOf:
          - $ref: '#/components/schemas/SMSSenderId'
          description: The sender ID.
        additionalMessage:
          allOf:
          - $ref: '#/components/schemas/NotificationAdditionalMessage'
          description: The message that you want to send. The message can be up to
            200 characters.
        recipients:
          allOf:
          - $ref: '#/components/schemas/RecipientDetails'
          description: 'Specifies one or more recipients who receive the message.


            You must [add the users that receive SMS messages to your AWS SSO store](https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html).'
      required:
      - recipients
      description: Contains the configuration information of SMS notifications.
    SMSConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/SMSConfiguration'
    SMSSenderId:
      type: string
    SNSTopicPublishAction:
      type: object
      properties:
        targetArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the Amazon SNS target where the message is sent.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message
            as an Amazon SNS push notification.
      required:
      - targetArn
      description: Information required to publish the Amazon SNS message.
    SSOIdentity:
      type: object
      properties:
        identityStoreId:
          allOf:
          - $ref: '#/components/schemas/IdentityStoreId'
          description: The ID of the AWS SSO identity store.
        userId:
          allOf:
          - $ref: '#/components/schemas/SSOReferenceId'
          description: The user ID.
      required:
      - identityStoreId
      description: Contains information about your identity source in AWS Single Sign-On.
        For more information, see the [AWS Single Sign-On User Guide](https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html).
    SSOReferenceId:
      type: string
    Seconds:
      type: integer
      minimum: 1
      maximum: 31622400
    ServiceUnavailableException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The service is currently unavailable.
    SetTimerAction:
      type: object
      properties:
        timerName:
          allOf:
          - $ref: '#/components/schemas/TimerName'
          description: The name of the timer.
        seconds:
          allOf:
          - $ref: '#/components/schemas/Seconds'
          description: The number of seconds until the timer expires. The minimum
            value is 60 seconds to ensure accuracy. The maximum value is 31622400
            seconds.
        durationExpression:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The duration of the timer, in seconds. You can use a string
            expression that includes numbers, variables (`$variable.`), and input
            values (`$input..`) as the duration. The range of the duration is 1-31622400
            seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated
            result of the duration is rounded down to the nearest whole number.
      required:
      - timerName
      description: Information needed to set the timer.
    SetVariableAction:
      type: object
      properties:
        variableName:
          allOf:
          - $ref: '#/components/schemas/VariableName'
          description: The name of the variable.
        value:
          allOf:
          - $ref: '#/components/schemas/VariableValue'
          description: The new value of the variable.
      required:
      - variableName
      - value
      description: Information about the variable and its new value.
    Severity:
      type: integer
      minimum: 0
      maximum: 2147483647
    SimpleRule:
      type: object
      properties:
        inputProperty:
          allOf:
          - $ref: '#/components/schemas/InputProperty'
          description: The value on the left side of the comparison operator. You
            can specify an AWS IoT Events input attribute as an input property.
        comparisonOperator:
          allOf:
          - $ref: '#/components/schemas/ComparisonOperator'
          description: The comparison operator.
        threshold:
          allOf:
          - $ref: '#/components/schemas/Threshold'
          description: The value on the right side of the comparison operator. You
            can enter a number or specify an AWS IoT Events input attribute.
      required:
      - inputProperty
      - comparisonOperator
      - threshold
      description: A rule that compares an input property value to a threshold value
        with a comparison operator.
    SqsAction:
      type: object
      properties:
        queueUrl:
          allOf:
          - $ref: '#/components/schemas/QueueUrl'
          description: The URL of the SQS queue where the data is written.
        useBase64:
          allOf:
          - $ref: '#/components/schemas/UseBase64'
          description: Set this to TRUE if you want the data to be base-64 encoded
            before it is written to the queue. Otherwise, set this to FALSE.
        payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: You can configure the action payload when you send a message
            to an Amazon SQS queue.
      required:
      - queueUrl
      description: Sends information about the detector model instance and the event
        that triggered the action to an Amazon SQS queue.
    StartDetectorModelAnalysisRequest:
      type: object
      properties:
        detectorModelDefinition:
          $ref: '#/components/schemas/DetectorModelDefinition'
      required:
      - detectorModelDefinition
    StartDetectorModelAnalysisResponse:
      type: object
      properties:
        analysisId:
          allOf:
          - $ref: '#/components/schemas/AnalysisId'
          description: The ID that you can use to retrieve the analysis result.
    State:
      type: object
      properties:
        stateName:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The name of the state.
        onInput:
          allOf:
          - $ref: '#/components/schemas/OnInputLifecycle'
          description: When an input is received and the `condition` is TRUE, perform
            the specified `actions`.
        onEnter:
          allOf:
          - $ref: '#/components/schemas/OnEnterLifecycle'
          description: When entering this state, perform these `actions` if the `condition`
            is TRUE.
        onExit:
          allOf:
          - $ref: '#/components/schemas/OnExitLifecycle'
          description: When exiting this state, perform these `actions` if the specified
            `condition` is `TRUE`.
      required:
      - stateName
      description: Information that defines a state of a detector.
    StateName:
      type: string
      minLength: 1
      maxLength: 128
    States:
      type: array
      items:
        $ref: '#/components/schemas/State'
    StatusMessage:
      type: string
    Tag:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The tag's key.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The tag's value.
      required:
      - key
      - value
      description: Metadata that can be used to manage the resource.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The new or modified tags for the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Threshold:
      type: string
      minLength: 1
      maxLength: 512
    ThrottlingException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The request could not be completed due to throttling.
    TimerName:
      type: string
      minLength: 1
      maxLength: 128
    Timestamp:
      type: string
      format: date-time
    TransitionEvent:
      type: object
      properties:
        eventName:
          allOf:
          - $ref: '#/components/schemas/EventName'
          description: The name of the transition event.
        condition:
          allOf:
          - $ref: '#/components/schemas/Condition'
          description: Required. A Boolean expression that when TRUE causes the actions
            to be performed and the `nextState` to be entered.
        actions:
          allOf:
          - $ref: '#/components/schemas/Actions'
          description: The actions to be performed.
        nextState:
          allOf:
          - $ref: '#/components/schemas/StateName'
          description: The next state to enter.
      required:
      - eventName
      - condition
      - nextState
      description: Specifies the actions performed and the next state entered when
        a `condition` evaluates to TRUE.
    TransitionEvents:
      type: array
      items:
        $ref: '#/components/schemas/TransitionEvent'
    UnsupportedOperationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/errorMessage'
          description: The message for the exception.
      description: The requested operation is not supported.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the resource.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: A list of the keys of the tags to be removed from the resource.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAlarmModelRequest:
      type: object
      properties:
        alarmModelName:
          allOf:
          - $ref: '#/components/schemas/AlarmModelName'
          description: The name of the alarm model.
        alarmModelDescription:
          allOf:
          - $ref: '#/components/schemas/AlarmModelDescription'
          description: The description of the alarm model.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the IAM role that allows the alarm to perform actions
            and access AWS resources. For more information, see [Amazon Resource Names
            (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        severity:
          allOf:
          - $ref: '#/components/schemas/Severity'
          description: A non-negative integer that reflects the severity level of
            the alarm.
        alarmRule:
          allOf:
          - $ref: '#/components/schemas/AlarmRule'
          description: Defines when your alarm is invoked.
        alarmNotification:
          allOf:
          - $ref: '#/components/schemas/AlarmNotification'
          description: Contains information about one or more notification actions.
        alarmEventActions:
          allOf:
          - $ref: '#/components/schemas/AlarmEventActions'
          description: Contains information about one or more alarm actions.
        alarmCapabilities:
          allOf:
          - $ref: '#/components/schemas/AlarmCapabilities'
          description: Contains the configuration information of alarm state changes.
      required:
      - alarmModelName
      - roleArn
      - alarmRule
    UpdateAlarmModelResponse:
      type: object
      properties:
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was created, in the Unix epoch format.
        alarmModelArn:
          allOf:
          - $ref: '#/components/schemas/AlarmModelArn'
          description: The ARN of the alarm model. For more information, see [Amazon
            Resource Names (ARNs)](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)
            in the _AWS General Reference_.
        alarmModelVersion:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersion'
          description: The version of the alarm model.
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time the alarm model was last updated, in the Unix epoch
            format.
        status:
          allOf:
          - $ref: '#/components/schemas/AlarmModelVersionStatus'
          description: "The status of the alarm model. The status can be one of the\
            \ following values:\n\n  * `ACTIVE` \\- The alarm model is active and\
            \ it's ready to evaluate data.\n\n  * `ACTIVATING` \\- AWS IoT Events\
            \ is activating your alarm model. Activating an alarm model can take up\
            \ to a few minutes.\n\n  * `INACTIVE` \\- The alarm model is inactive,\
            \ so it isn't ready to evaluate data. Check your alarm model information\
            \ and update the alarm model.\n\n  * `FAILED` \\- You couldn't create\
            \ or update the alarm model. Check your alarm model information and try\
            \ again."
    UpdateDetectorModelRequest:
      type: object
      properties:
        detectorModelName:
          allOf:
          - $ref: '#/components/schemas/DetectorModelName'
          description: The name of the detector model that is updated.
        detectorModelDefinition:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDefinition'
          description: Information that defines how a detector operates.
        detectorModelDescription:
          allOf:
          - $ref: '#/components/schemas/DetectorModelDescription'
          description: A brief description of the detector model.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The ARN of the role that grants permission to AWS IoT Events
            to perform its operations.
        evaluationMethod:
          allOf:
          - $ref: '#/components/schemas/EvaluationMethod'
          description: Information about the order in which events are evaluated and
            how actions are executed.
      required:
      - detectorModelName
      - detectorModelDefinition
      - roleArn
    UpdateDetectorModelResponse:
      type: object
      properties:
        detectorModelConfiguration:
          allOf:
          - $ref: '#/components/schemas/DetectorModelConfiguration'
          description: Information about how the detector model is configured.
    UpdateInputRequest:
      type: object
      properties:
        inputName:
          allOf:
          - $ref: '#/components/schemas/InputName'
          description: The name of the input you want to update.
        inputDescription:
          allOf:
          - $ref: '#/components/schemas/InputDescription'
          description: A brief description of the input.
        inputDefinition:
          allOf:
          - $ref: '#/components/schemas/InputDefinition'
          description: The definition of the input.
      required:
      - inputName
      - inputDefinition
    UpdateInputResponse:
      type: object
      properties:
        inputConfiguration:
          allOf:
          - $ref: '#/components/schemas/InputConfiguration'
          description: Information about the configuration of the input.
    UseBase64:
      type: boolean
    VariableName:
      type: string
      pattern: ^[a-zA-Z][a-zA-Z0-9_]*$
      minLength: 1
      maxLength: 128
    VariableValue:
      type: string
      minLength: 1
      maxLength: 1024
    errorMessage:
      type: string
    resourceArn:
      type: string
    resourceId:
      type: string
