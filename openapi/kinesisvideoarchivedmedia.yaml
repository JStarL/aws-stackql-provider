openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: kinesis_video_archived_media
  x-aws-serviceName: kinesisvideoarchivedmedia
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-09-30'
  title: Amazon Kinesis Video Streams Archived Media
  description: ""
servers:
- description: The Amazon Kinesis Video Streams Archived Media regional endpoint
  url: https://kinesisvideo.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /getClip:
    post:
      operationId: GetClip
      description: |-
        Downloads an MP4 file (clip) containing the archived, on-demand media from the specified video stream over the specified time range.

        Both the StreamName and the StreamARN parameters are optional, but you must specify either the StreamName or the StreamARN when invoking this API operation.

        As a prerequisite to using GetCLip API, you must obtain an endpoint using `GetDataEndpoint`, specifying GET_CLIP for`` the `APIName` parameter.

        An Amazon Kinesis video stream has the following requirements for providing data through MP4:

          * The media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711 encoded audio. Specifically, the codec ID of track 1 should be `V_MPEG/ISO/AVC` (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec ID of track 2 should be `A_AAC` (for AAC) or A_MS/ACM (for G.711).

          * Data retention must be greater than 0.

          * The video track of each fragment must contain codec private data in the Advanced Video Coding (AVC) for H.264 format and HEVC for H.265 format. For more information, see [MPEG-4 specification ISO/IEC 14496-15](https://www.iso.org/standard/55980.html). For information about adapting stream data to a given format, see [NAL Adaptation Flags](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html).

          * The audio track (if present) of each fragment must contain codec private data in the AAC format ([AAC specification ISO/IEC 13818-7](https://www.iso.org/standard/43345.html)) or the [MS Wave format](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html).

        You can monitor the amount of outgoing data by monitoring the `GetClip.OutgoingBytes` Amazon CloudWatch metric. For information about using CloudWatch to monitor Kinesis Video Streams, see [Monitoring Kinesis Video Streams](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html). For pricing information, see [Amazon Kinesis Video Streams Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/) and [ Amazon Web Services Pricing](https://aws.amazon.com/pricing/). Charges for outgoing Amazon Web Services data apply.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                ClipFragmentSelector:
                  $ref: '#/components/schemas/ClipFragmentSelector'
      responses:
        '200': {}
        '400':
          description: |-
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could not be determined from the codec IDs of the tracks in the first fragment for a playback session. The codec ID for track 1 should be `V_MPEG/ISO/AVC` and, optionally, the codec ID for track 2 should be `A_AAC`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /getDASHStreamingSessionURL:
    post:
      operationId: GetDASHStreamingSessionURL
      description: "Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH)\
        \ URL for the stream. You can then open the URL in a media player to view\
        \ the stream contents.\n\nBoth the `StreamName` and the `StreamARN` parameters\
        \ are optional, but you must specify either the `StreamName` or the `StreamARN`\
        \ when invoking this API operation.\n\nAn Amazon Kinesis video stream has\
        \ the following requirements for providing data through MPEG-DASH:\n\n  *\
        \ The media must contain h.264 or h.265 encoded video and, optionally, AAC\
        \ or G.711 encoded audio. Specifically, the codec ID of track 1 should be\
        \ `V_MPEG/ISO/AVC` (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally,\
        \ the codec ID of track 2 should be `A_AAC` (for AAC) or A_MS/ACM (for G.711).\n\
        \n  * Data retention must be greater than 0.\n\n  * The video track of each\
        \ fragment must contain codec private data in the Advanced Video Coding (AVC)\
        \ for H.264 format and HEVC for H.265 format. For more information, see [MPEG-4\
        \ specification ISO/IEC 14496-15](https://www.iso.org/standard/55980.html).\
        \ For information about adapting stream data to a given format, see [NAL Adaptation\
        \ Flags](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html).\n\
        \n  * The audio track (if present) of each fragment must contain codec private\
        \ data in the AAC format ([AAC specification ISO/IEC 13818-7](https://www.iso.org/standard/43345.html))\
        \ or the [MS Wave format](http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html).\n\
        \nThe following procedure shows how to use MPEG-DASH with Kinesis Video Streams:\n\
        \n  1. Get an endpoint using [GetDataEndpoint](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html),\
        \ specifying `GET_DASH_STREAMING_SESSION_URL` for the `APIName` parameter.\n\
        \n  2. Retrieve the MPEG-DASH URL using `GetDASHStreamingSessionURL`. Kinesis\
        \ Video Streams creates an MPEG-DASH streaming session to be used for accessing\
        \ content in a stream using the MPEG-DASH protocol. `GetDASHStreamingSessionURL`\
        \ returns an authenticated URL (that includes an encrypted session token)\
        \ for the session's MPEG-DASH _manifest_ (the root resource needed for streaming\
        \ with MPEG-DASH).\n\nDon't share or store this token where an unauthorized\
        \ entity can access it. The token provides access to the content of the stream.\
        \ Safeguard the token with the same measures that you use with your Amazon\
        \ Web Services credentials.\n\nThe media that is made available through the\
        \ manifest consists only of the requested stream, time range, and format.\
        \ No other media data (such as frames outside the requested window or alternate\
        \ bitrates) is made available.\n\n  3. Provide the URL (containing the encrypted\
        \ session token) for the MPEG-DASH manifest to a media player that supports\
        \ the MPEG-DASH protocol. Kinesis Video Streams makes the initialization fragment\
        \ and media fragments available through the manifest URL. The initialization\
        \ fragment contains the codec private data for the stream, and other data\
        \ needed to set up the video or audio decoder and renderer. The media fragments\
        \ contain encoded video frames or encoded audio samples.\n\n  4. The media\
        \ player receives the authenticated URL and requests stream metadata and media\
        \ data normally. When the media player requests data, it calls the following\
        \ actions:\n\n     * **GetDASHManifest:** Retrieves an MPEG DASH manifest,\
        \ which contains the metadata for the media that you want to playback.\n\n\
        \     * **GetMP4InitFragment:** Retrieves the MP4 initialization fragment.\
        \ The media player typically loads the initialization fragment before loading\
        \ any media fragments. This fragment contains the \"`fytp`\" and \"`moov`\"\
        \ MP4 atoms, and the child atoms that are needed to initialize the media player\
        \ decoder.\n\nThe initialization fragment does not correspond to a fragment\
        \ in a Kinesis video stream. It contains only the codec private data for the\
        \ stream and respective track, which the media player needs to decode the\
        \ media frames.\n\n     * **GetMP4MediaFragment:** Retrieves MP4 media fragments.\
        \ These fragments contain the \"`moof`\" and \"`mdat`\" MP4 atoms and their\
        \ child atoms, containing the encoded fragment's media frames and their timestamps.\
        \ \n\nAfter the first media fragment is made available in a streaming session,\
        \ any fragments that don't contain the same codec private data cause an error\
        \ to be returned when those different media fragments are loaded. Therefore,\
        \ the codec private data should not change between fragments in a session.\
        \ This also means that the session fails if the fragments in a stream change\
        \ from having only video to having both audio and video.\n\nData retrieved\
        \ with this action is billable. See [Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/)\
        \ for details.\n\nFor restrictions that apply to MPEG-DASH sessions, see [Kinesis\
        \ Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).\n\
        \nYou can monitor the amount of data that the media player consumes by monitoring\
        \ the `GetMP4MediaFragment.OutgoingBytes` Amazon CloudWatch metric. For information\
        \ about using CloudWatch to monitor Kinesis Video Streams, see [Monitoring\
        \ Kinesis Video Streams](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html).\
        \ For pricing information, see [Amazon Kinesis Video Streams Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/)\
        \ and [Amazon Web Services Pricing](https://aws.amazon.com/pricing/). Charges\
        \ for both HLS sessions and outgoing Amazon Web Services data apply.\n\nFor\
        \ more information about HLS, see [HTTP Live Streaming](https://developer.apple.com/streaming/)\
        \ on the [Apple Developer site](https://developer.apple.com).\n\nIf an error\
        \ is thrown after invoking a Kinesis Video Streams archived media API, in\
        \ addition to the HTTP status code and the response body, it includes the\
        \ following pieces of information:\n\n  * `x-amz-ErrorType` HTTP header –\
        \ contains a more specific error type in addition to what the HTTP status\
        \ code provides. \n\n  * `x-amz-RequestId` HTTP header – if you want to report\
        \ an issue to Amazon Web Services the support team can better diagnose the\
        \ problem if given the Request Id.\n\nBoth the HTTP status code and the ErrorType\
        \ header can be utilized to make programmatic decisions about whether errors\
        \ are retry-able and under what conditions, as well as provide information\
        \ on what actions the client programmer might need to take in order to successfully\
        \ try again.\n\nFor more information, see the **Errors** section at the bottom\
        \ of this topic, as well as [Common Errors](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html)."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                PlaybackMode:
                  $ref: '#/components/schemas/DASHPlaybackMode'
                DisplayFragmentTimestamp:
                  $ref: '#/components/schemas/DASHDisplayFragmentTimestamp'
                DisplayFragmentNumber:
                  $ref: '#/components/schemas/DASHDisplayFragmentNumber'
                DASHFragmentSelector:
                  $ref: '#/components/schemas/DASHFragmentSelector'
                Expires:
                  $ref: '#/components/schemas/Expires'
                MaxManifestFragmentResults:
                  $ref: '#/components/schemas/DASHMaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could not be determined from the codec IDs of the tracks in the first fragment for a playback session. The codec ID for track 1 should be `V_MPEG/ISO/AVC` and, optionally, the codec ID for track 2 should be `A_AAC`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /getHLSStreamingSessionURL:
    post:
      operationId: GetHLSStreamingSessionURL
      description: "Retrieves an HTTP Live Streaming (HLS) URL for the stream. You\
        \ can then open the URL in a browser or media player to view the stream contents.\n\
        \nBoth the `StreamName` and the `StreamARN` parameters are optional, but you\
        \ must specify either the `StreamName` or the `StreamARN` when invoking this\
        \ API operation.\n\nAn Amazon Kinesis video stream has the following requirements\
        \ for providing data through HLS:\n\n  * For streaming video, the media must\
        \ contain H.264 or H.265 encoded video and, optionally, AAC encoded audio.\
        \ Specifically, the codec ID of track 1 should be `V_MPEG/ISO/AVC` (for H.264)\
        \ or `V_MPEG/ISO/HEVC` (for H.265). Optionally, the codec ID of track 2 should\
        \ be `A_AAC`. For audio only streaming, the codec ID of track 1 should be\
        \ `A_AAC`.\n\n  * Data retention must be greater than 0.\n\n  * The video\
        \ track of each fragment must contain codec private data in the Advanced Video\
        \ Coding (AVC) for H.264 format or HEVC for H.265 format ([MPEG-4 specification\
        \ ISO/IEC 14496-15](https://www.iso.org/standard/55980.html)). For information\
        \ about adapting stream data to a given format, see [NAL Adaptation Flags](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html).\n\
        \n  * The audio track (if present) of each fragment must contain codec private\
        \ data in the AAC format ([AAC specification ISO/IEC 13818-7](https://www.iso.org/standard/43345.html)).\n\
        \nKinesis Video Streams HLS sessions contain fragments in the fragmented MPEG-4\
        \ form (also called fMP4 or CMAF) or the MPEG-2 form (also called TS chunks,\
        \ which the HLS specification also supports). For more information about HLS\
        \ fragment types, see the [HLS specification](https://tools.ietf.org/html/draft-pantos-http-live-streaming-23).\n\
        \nThe following procedure shows how to use HLS with Kinesis Video Streams:\n\
        \n  1. Get an endpoint using [GetDataEndpoint](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html),\
        \ specifying `GET_HLS_STREAMING_SESSION_URL` for the `APIName` parameter.\n\
        \n  2. Retrieve the HLS URL using `GetHLSStreamingSessionURL`. Kinesis Video\
        \ Streams creates an HLS streaming session to be used for accessing content\
        \ in a stream using the HLS protocol. `GetHLSStreamingSessionURL` returns\
        \ an authenticated URL (that includes an encrypted session token) for the\
        \ session's HLS _master playlist_ (the root resource needed for streaming\
        \ with HLS).\n\nDon't share or store this token where an unauthorized entity\
        \ could access it. The token provides access to the content of the stream.\
        \ Safeguard the token with the same measures that you would use with your\
        \ Amazon Web Services credentials.\n\nThe media that is made available through\
        \ the playlist consists only of the requested stream, time range, and format.\
        \ No other media data (such as frames outside the requested window or alternate\
        \ bitrates) is made available.\n\n  3. Provide the URL (containing the encrypted\
        \ session token) for the HLS master playlist to a media player that supports\
        \ the HLS protocol. Kinesis Video Streams makes the HLS media playlist, initialization\
        \ fragment, and media fragments available through the master playlist URL.\
        \ The initialization fragment contains the codec private data for the stream,\
        \ and other data needed to set up the video or audio decoder and renderer.\
        \ The media fragments contain H.264-encoded video frames or AAC-encoded audio\
        \ samples.\n\n  4. The media player receives the authenticated URL and requests\
        \ stream metadata and media data normally. When the media player requests\
        \ data, it calls the following actions:\n\n     * **GetHLSMasterPlaylist:**\
        \ Retrieves an HLS master playlist, which contains a URL for the `GetHLSMediaPlaylist`\
        \ action for each track, and additional metadata for the media player, including\
        \ estimated bitrate and resolution.\n\n     * **GetHLSMediaPlaylist:** Retrieves\
        \ an HLS media playlist, which contains a URL to access the MP4 initialization\
        \ fragment with the `GetMP4InitFragment` action, and URLs to access the MP4\
        \ media fragments with the `GetMP4MediaFragment` actions. The HLS media playlist\
        \ also contains metadata about the stream that the player needs to play it,\
        \ such as whether the `PlaybackMode` is `LIVE` or `ON_DEMAND`. The HLS media\
        \ playlist is typically static for sessions with a `PlaybackType` of `ON_DEMAND`.\
        \ The HLS media playlist is continually updated with new fragments for sessions\
        \ with a `PlaybackType` of `LIVE`. There is a distinct HLS media playlist\
        \ for the video track and the audio track (if applicable) that contains MP4\
        \ media URLs for the specific track. \n\n     * **GetMP4InitFragment:** Retrieves\
        \ the MP4 initialization fragment. The media player typically loads the initialization\
        \ fragment before loading any media fragments. This fragment contains the\
        \ \"`fytp`\" and \"`moov`\" MP4 atoms, and the child atoms that are needed\
        \ to initialize the media player decoder.\n\nThe initialization fragment does\
        \ not correspond to a fragment in a Kinesis video stream. It contains only\
        \ the codec private data for the stream and respective track, which the media\
        \ player needs to decode the media frames.\n\n     * **GetMP4MediaFragment:**\
        \ Retrieves MP4 media fragments. These fragments contain the \"`moof`\" and\
        \ \"`mdat`\" MP4 atoms and their child atoms, containing the encoded fragment's\
        \ media frames and their timestamps. \n\nFor the HLS streaming session, in-track\
        \ codec private data (CPD) changes are supported. After the first media fragment\
        \ is made available in a streaming session, fragments can contain CPD changes\
        \ for each track. Therefore, the fragments in a session can have a different\
        \ resolution, bit rate, or other information in the CPD without interrupting\
        \ playback. However, any change made in the track number or track codec format\
        \ can return an error when those different media fragments are loaded. For\
        \ example, streaming will fail if the fragments in the stream change from\
        \ having only video to having both audio and video, or if an AAC audio track\
        \ is changed to an ALAW audio track. For each streaming session, only 500\
        \ CPD changes are allowed.\n\nData retrieved with this action is billable.\
        \ For information, see [Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/).\n\
        \n     * **GetTSFragment:** Retrieves MPEG TS fragments containing both initialization\
        \ and media data for all tracks in the stream.\n\nIf the `ContainerFormat`\
        \ is `MPEG_TS`, this API is used instead of `GetMP4InitFragment` and `GetMP4MediaFragment`\
        \ to retrieve stream media.\n\nData retrieved with this action is billable.\
        \ For more information, see [Kinesis Video Streams pricing](https://aws.amazon.com/kinesis/video-streams/pricing/).\n\
        \nA streaming session URL must not be shared between players. The service\
        \ might throttle a session if multiple media players are sharing it. For connection\
        \ limits, see [Kinesis Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).\n\
        \nYou can monitor the amount of data that the media player consumes by monitoring\
        \ the `GetMP4MediaFragment.OutgoingBytes` Amazon CloudWatch metric. For information\
        \ about using CloudWatch to monitor Kinesis Video Streams, see [Monitoring\
        \ Kinesis Video Streams](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html).\
        \ For pricing information, see [Amazon Kinesis Video Streams Pricing](https://aws.amazon.com/kinesis/video-streams/pricing/)\
        \ and [Amazon Web Services Pricing](https://aws.amazon.com/pricing/). Charges\
        \ for both HLS sessions and outgoing Amazon Web Services data apply.\n\nFor\
        \ more information about HLS, see [HTTP Live Streaming](https://developer.apple.com/streaming/)\
        \ on the [Apple Developer site](https://developer.apple.com).\n\nIf an error\
        \ is thrown after invoking a Kinesis Video Streams archived media API, in\
        \ addition to the HTTP status code and the response body, it includes the\
        \ following pieces of information:\n\n  * `x-amz-ErrorType` HTTP header –\
        \ contains a more specific error type in addition to what the HTTP status\
        \ code provides. \n\n  * `x-amz-RequestId` HTTP header – if you want to report\
        \ an issue to Amazon Web Services, the support team can better diagnose the\
        \ problem if given the Request Id.\n\nBoth the HTTP status code and the ErrorType\
        \ header can be utilized to make programmatic decisions about whether errors\
        \ are retry-able and under what conditions, as well as provide information\
        \ on what actions the client programmer might need to take in order to successfully\
        \ try again.\n\nFor more information, see the **Errors** section at the bottom\
        \ of this topic, as well as [Common Errors](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html)."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                PlaybackMode:
                  $ref: '#/components/schemas/HLSPlaybackMode'
                HLSFragmentSelector:
                  $ref: '#/components/schemas/HLSFragmentSelector'
                ContainerFormat:
                  $ref: '#/components/schemas/ContainerFormat'
                DiscontinuityMode:
                  $ref: '#/components/schemas/HLSDiscontinuityMode'
                DisplayFragmentTimestamp:
                  $ref: '#/components/schemas/HLSDisplayFragmentTimestamp'
                Expires:
                  $ref: '#/components/schemas/Expires'
                MaxMediaPlaylistFragmentResults:
                  $ref: '#/components/schemas/HLSMaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could not be determined from the codec IDs of the tracks in the first fragment for a playback session. The codec ID for track 1 should be `V_MPEG/ISO/AVC` and, optionally, the codec ID for track 2 should be `A_AAC`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /getImages:
    post:
      operationId: GetImages
      description: |-
        Retrieves a list of images corresponding to each timestamp for a given time range, sampling interval, and image format configuration.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                ImageSelectorType:
                  $ref: '#/components/schemas/ImageSelectorType'
                StartTimestamp:
                  $ref: '#/components/schemas/Timestamp'
                EndTimestamp:
                  $ref: '#/components/schemas/Timestamp'
                SamplingInterval:
                  $ref: '#/components/schemas/SamplingInterval'
                Format:
                  $ref: '#/components/schemas/Format'
                FormatConfig:
                  $ref: '#/components/schemas/FormatConfig'
                WidthPixels:
                  $ref: '#/components/schemas/WidthPixels'
                HeightPixels:
                  $ref: '#/components/schemas/HeightPixels'
                MaxResults:
                  $ref: '#/components/schemas/GetImagesMaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            `GetImages` was requested for a stream that does not retain data (that is, has a `DataRetentionInHours` of 0).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataRetentionException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /getMediaForFragmentList:
    post:
      operationId: GetMediaForFragmentList
      description: "Gets media for a list of fragments (specified by fragment number)\
        \ from the archived data in an Amazon Kinesis video stream.\n\nYou must first\
        \ call the `GetDataEndpoint` API to get an endpoint. Then send the `GetMediaForFragmentList`\
        \ requests to this endpoint using the [\\--endpoint-url parameter](https://docs.aws.amazon.com/cli/latest/reference/).\n\
        \nFor limits, see [Kinesis Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).\n\
        \nIf an error is thrown after invoking a Kinesis Video Streams archived media\
        \ API, in addition to the HTTP status code and the response body, it includes\
        \ the following pieces of information:\n\n  * `x-amz-ErrorType` HTTP header\
        \ – contains a more specific error type in addition to what the HTTP status\
        \ code provides. \n\n  * `x-amz-RequestId` HTTP header – if you want to report\
        \ an issue to Amazon Web Services, the support team can better diagnose the\
        \ problem if given the Request Id.\n\nBoth the HTTP status code and the ErrorType\
        \ header can be utilized to make programmatic decisions about whether errors\
        \ are retry-able and under what conditions, as well as provide information\
        \ on what actions the client programmer might need to take in order to successfully\
        \ try again.\n\nFor more information, see the **Errors** section at the bottom\
        \ of this topic, as well as [Common Errors](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html)."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                Fragments:
                  $ref: '#/components/schemas/FragmentNumberList'
      responses:
        '200': {}
        '400':
          description: |-
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /listFragments:
    post:
      operationId: ListFragments
      description: "Returns a list of Fragment objects from the specified stream and\
        \ timestamp range within the archived data.\n\nListing fragments is eventually\
        \ consistent. This means that even if the producer receives an acknowledgment\
        \ that a fragment is persisted, the result might not be returned immediately\
        \ from a request to `ListFragments`. However, results are typically available\
        \ in less than one second.\n\nYou must first call the `GetDataEndpoint` API\
        \ to get an endpoint. Then send the `ListFragments` requests to this endpoint\
        \ using the [\\--endpoint-url parameter](https://docs.aws.amazon.com/cli/latest/reference/).\n\
        \nIf an error is thrown after invoking a Kinesis Video Streams archived media\
        \ API, in addition to the HTTP status code and the response body, it includes\
        \ the following pieces of information:\n\n  * `x-amz-ErrorType` HTTP header\
        \ – contains a more specific error type in addition to what the HTTP status\
        \ code provides. \n\n  * `x-amz-RequestId` HTTP header – if you want to report\
        \ an issue to Amazon Web Services, the support team can better diagnose the\
        \ problem if given the Request Id.\n\nBoth the HTTP status code and the ErrorType\
        \ header can be utilized to make programmatic decisions about whether errors\
        \ are retry-able and under what conditions, as well as provide information\
        \ on what actions the client programmer might need to take in order to successfully\
        \ try again.\n\nFor more information, see the **Errors** section at the bottom\
        \ of this topic, as well as [Common Errors](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html)."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                StreamName:
                  $ref: '#/components/schemas/StreamName'
                StreamARN:
                  $ref: '#/components/schemas/ResourceARN'
                MaxResults:
                  $ref: '#/components/schemas/ListFragmentsMaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
                FragmentSelector:
                  $ref: '#/components/schemas/FragmentSelector'
      responses:
        '200': {}
        '400':
          description: |-
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
        '401':
          description: |-
            Status Code: 403, The caller is not authorized to perform an operation on the given stream, or the token has expired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '404':
          description: |-
            `GetImages` will throw this error when Kinesis Video Streams can't find the stream that you specified.

            `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested for a stream that has no fragments within the requested time range, or if a session with a `PlaybackMode` of `LIVE` is requested for a stream that has no fragments within the last 30 seconds.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
components:
  schemas:
    ClientLimitExceededException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Kinesis Video Streams has throttled the request because you have
        exceeded a limit. Try making the call later. For information about limits,
        see [Kinesis Video Streams Limits](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).
    ClipFragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/ClipFragmentSelectorType'
          description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          allOf:
          - $ref: '#/components/schemas/ClipTimestampRange'
          description: The range of timestamps to return.
      required:
      - FragmentSelectorType
      - TimestampRange
      description: 'Describes the timestamp range and timestamp origin of a range
        of fragments.


        Fragments that have duplicate producer timestamps are deduplicated. This means
        that if producers are producing a stream of fragments with producer timestamps
        that are approximately equal to the true clock time, the clip will contain
        all of the fragments within the requested timestamp range. If some fragments
        are ingested within the same time range and very different points in time,
        only the oldest ingested collection of fragments are returned.'
    ClipFragmentSelectorType:
      type: string
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
    ClipTimestampRange:
      type: object
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The starting timestamp in the range of timestamps for which
            to return fragments.


            Only fragments that start exactly at or after `StartTimestamp` are included
            in the session. Fragments that start before `StartTimestamp` and continue
            past it aren''t included in the session. If `FragmentSelectorType` is
            `SERVER_TIMESTAMP`, the `StartTimestamp` must be later than the stream
            head.'
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the timestamp range for the requested media.


            This value must be within 24 hours of the specified `StartTimestamp`,
            and it must be later than the `StartTimestamp` value. If `FragmentSelectorType`
            for the request is `SERVER_TIMESTAMP`, this value must be in the past.


            This value is inclusive. The `EndTimestamp` is compared to the (starting)
            timestamp of the fragment. Fragments that start before the `EndTimestamp`
            value and continue past it are included in the session.'
      required:
      - StartTimestamp
      - EndTimestamp
      description: The range of timestamps for which to return fragments.
    ContainerFormat:
      type: string
      enum:
      - FRAGMENTED_MP4
      - MPEG_TS
    ContentType:
      type: string
      pattern: ^[a-zA-Z0-9_\.\-]+$
      minLength: 1
      maxLength: 128
    DASHDisplayFragmentNumber:
      type: string
      enum:
      - ALWAYS
      - NEVER
    DASHDisplayFragmentTimestamp:
      type: string
      enum:
      - ALWAYS
      - NEVER
    DASHFragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/DASHFragmentSelectorType'
          description: 'The source of the timestamps for the requested media.


            When `FragmentSelectorType` is set to `PRODUCER_TIMESTAMP` and GetDASHStreamingSessionURLInput$PlaybackMode
            is `ON_DEMAND` or `LIVE_REPLAY`, the first fragment ingested with a producer
            timestamp within the specified FragmentSelector$TimestampRange is included
            in the media playlist. In addition, the fragments with producer timestamps
            within the `TimestampRange` ingested immediately following the first fragment
            (up to the GetDASHStreamingSessionURLInput$MaxManifestFragmentResults
            value) are included.


            Fragments that have duplicate producer timestamps are deduplicated. This
            means that if producers are producing a stream of fragments with producer
            timestamps that are approximately equal to the true clock time, the MPEG-DASH
            manifest will contain all of the fragments within the requested timestamp
            range. If some fragments are ingested within the same time range and very
            different points in time, only the oldest ingested collection of fragments
            are returned.


            When `FragmentSelectorType` is set to `PRODUCER_TIMESTAMP` and GetDASHStreamingSessionURLInput$PlaybackMode
            is `LIVE`, the producer timestamps are used in the MP4 fragments and for
            deduplication. But the most recently ingested fragments based on server
            timestamps are included in the MPEG-DASH manifest. This means that even
            if fragments ingested in the past have producer timestamps with values
            now, they are not included in the HLS media playlist.


            The default is `SERVER_TIMESTAMP`.'
        TimestampRange:
          allOf:
          - $ref: '#/components/schemas/DASHTimestampRange'
          description: 'The start and end of the timestamp range for the requested
            media.


            This value should not be present if `PlaybackType` is `LIVE`.'
      description: Contains the range of timestamps for the requested media, and the
        source of the timestamps.
    DASHFragmentSelectorType:
      type: string
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
    DASHMaxResults:
      type: integer
      format: int64
      minimum: 1
      maximum: 5000
    DASHPlaybackMode:
      type: string
      enum:
      - LIVE
      - LIVE_REPLAY
      - ON_DEMAND
    DASHStreamingSessionURL:
      type: string
    DASHTimestampRange:
      type: object
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the timestamp range for the requested media.


            If the `DASHTimestampRange` value is specified, the `StartTimestamp` value
            is required.


            Only fragments that start exactly at or after `StartTimestamp` are included
            in the session. Fragments that start before `StartTimestamp` and continue
            past it aren''t included in the session. If `FragmentSelectorType` is
            `SERVER_TIMESTAMP`, the `StartTimestamp` must be later than the stream
            head.'
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the timestamp range for the requested media. This
            value must be within 24 hours of the specified `StartTimestamp`, and it
            must be later than the `StartTimestamp` value.


            If `FragmentSelectorType` for the request is `SERVER_TIMESTAMP`, this
            value must be in the past.


            The `EndTimestamp` value is required for `ON_DEMAND` mode, but optional
            for `LIVE_REPLAY` mode. If the `EndTimestamp` is not set for `LIVE_REPLAY`
            mode then the session will continue to include newly ingested fragments
            until the session expires.


            This value is inclusive. The `EndTimestamp` is compared to the (starting)
            timestamp of the fragment. Fragments that start before the `EndTimestamp`
            value and continue past it are included in the session.'
      description: 'The start and end of the timestamp range for the requested media.


        This value should not be present if `PlaybackType` is `LIVE`.


        The values in `DASHimestampRange` are inclusive. Fragments that start exactly
        at or after the start time are included in the session. Fragments that start
        before the start time and continue past it are not included in the session.'
    ErrorMessage:
      type: string
    Expires:
      type: integer
      minimum: 300
      maximum: 43200
    Format:
      type: string
      enum:
      - JPEG
      - PNG
    FormatConfig:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FormatConfigValue'
    FormatConfigKey:
      type: string
      enum:
      - JPEGQuality
    FormatConfigValue:
      type: string
      pattern: ^[a-zA-Z_0-9]+$
      minLength: 0
      maxLength: 256
    Fragment:
      type: object
      properties:
        FragmentNumber:
          allOf:
          - $ref: '#/components/schemas/FragmentNumberString'
          description: The unique identifier of the fragment. This value monotonically
            increases based on the ingestion order.
        FragmentSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The total fragment size, including information about the fragment
            and contained media data.
        ProducerTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp from the producer corresponding to the fragment.
        ServerTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp from the Amazon Web Services server corresponding
            to the fragment.
        FragmentLengthInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The playback duration or other time value associated with the
            fragment.
      description: Represents a segment of video or other time-delimited data.
    FragmentList:
      type: array
      items:
        $ref: '#/components/schemas/Fragment'
    FragmentNumberList:
      type: array
      items:
        $ref: '#/components/schemas/FragmentNumberString'
    FragmentNumberString:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 128
    FragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/FragmentSelectorType'
          description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          allOf:
          - $ref: '#/components/schemas/TimestampRange'
          description: The range of timestamps to return.
      required:
      - FragmentSelectorType
      - TimestampRange
      description: "Describes the timestamp range and timestamp origin of a range\
        \ of fragments.\n\nOnly fragments with a start timestamp greater than or equal\
        \ to the given start time and less than or equal to the end time are returned.\
        \ For example, if a stream contains fragments with the following start timestamps:\n\
        \n  * 00:00:00\n\n  * 00:00:02\n\n  * 00:00:04\n\n  * 00:00:06\n\nA fragment\
        \ selector range with a start time of 00:00:01 and end time of 00:00:04 would\
        \ return the fragments with start times of 00:00:02 and 00:00:04."
    FragmentSelectorType:
      type: string
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
    GetClipInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: 'The name of the stream for which to retrieve the media clip.


            You must specify either the StreamName or the StreamARN.'
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: 'The Amazon Resource Name (ARN) of the stream for which to
            retrieve the media clip.


            You must specify either the StreamName or the StreamARN.'
        ClipFragmentSelector:
          allOf:
          - $ref: '#/components/schemas/ClipFragmentSelector'
          description: The time range of the requested clip and the source of the
            timestamps.
      required:
      - ClipFragmentSelector
    GetClipOutput:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the media in the requested clip.
        Payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: Traditional MP4 file that contains the media clip from the
            specified video stream. The output will contain the first 100 MB or the
            first 200 fragments from the specified start timestamp. For more information,
            see [Kinesis Video Streams Limits](https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html).
    GetDASHStreamingSessionURLInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: 'The name of the stream for which to retrieve the MPEG-DASH
            manifest URL.


            You must specify either the `StreamName` or the `StreamARN`.'
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: 'The Amazon Resource Name (ARN) of the stream for which to
            retrieve the MPEG-DASH manifest URL.


            You must specify either the `StreamName` or the `StreamARN`.'
        PlaybackMode:
          allOf:
          - $ref: '#/components/schemas/DASHPlaybackMode'
          description: "Whether to retrieve live, live replay, or archived, on-demand\
            \ data.\n\nFeatures of the three types of sessions include the following:\n\
            \n  * **`LIVE` **: For sessions of this type, the MPEG-DASH manifest is\
            \ continually updated with the latest fragments as they become available.\
            \ We recommend that the media player retrieve a new manifest on a one-second\
            \ interval. When this type of session is played in a media player, the\
            \ user interface typically displays a \"live\" notification, with no scrubber\
            \ control for choosing the position in the playback window to display.\n\
            \nIn `LIVE` mode, the newest available fragments are included in an MPEG-DASH\
            \ manifest, even if there is a gap between fragments (that is, if a fragment\
            \ is missing). A gap like this might cause a media player to halt or cause\
            \ a jump in playback. In this mode, fragments are not added to the MPEG-DASH\
            \ manifest if they are older than the newest fragment in the playlist.\
            \ If the missing fragment becomes available after a subsequent fragment\
            \ is added to the manifest, the older fragment is not added, and the gap\
            \ is not filled.\n\n  * **`LIVE_REPLAY` **: For sessions of this type,\
            \ the MPEG-DASH manifest is updated similarly to how it is updated for\
            \ `LIVE` mode except that it starts by including fragments from a given\
            \ start time. Instead of fragments being added as they are ingested, fragments\
            \ are added as the duration of the next fragment elapses. For example,\
            \ if the fragments in the session are two seconds long, then a new fragment\
            \ is added to the manifest every two seconds. This mode is useful to be\
            \ able to start playback from when an event is detected and continue live\
            \ streaming media that has not yet been ingested as of the time of the\
            \ session creation. This mode is also useful to stream previously archived\
            \ media without being limited by the 1,000 fragment limit in the `ON_DEMAND`\
            \ mode. \n\n  * **`ON_DEMAND` **: For sessions of this type, the MPEG-DASH\
            \ manifest contains all the fragments for the session, up to the number\
            \ that is specified in `MaxManifestFragmentResults`. The manifest must\
            \ be retrieved only once for each session. When this type of session is\
            \ played in a media player, the user interface typically displays a scrubber\
            \ control for choosing the position in the playback window to display.\n\
            \nIn all playback modes, if `FragmentSelectorType` is `PRODUCER_TIMESTAMP`,\
            \ and if there are multiple fragments with the same start timestamp, the\
            \ fragment that has the larger fragment number (that is, the newer fragment)\
            \ is included in the MPEG-DASH manifest. The other fragments are not included.\
            \ Fragments that have different timestamps but have overlapping durations\
            \ are still included in the MPEG-DASH manifest. This can lead to unexpected\
            \ behavior in the media player.\n\nThe default is `LIVE`."
        DisplayFragmentTimestamp:
          allOf:
          - $ref: '#/components/schemas/DASHDisplayFragmentTimestamp'
          description: 'Per the MPEG-DASH specification, the wall-clock time of fragments
            in the manifest file can be derived using attributes in the manifest itself.
            However, typically, MPEG-DASH compatible media players do not properly
            handle gaps in the media timeline. Kinesis Video Streams adjusts the media
            timeline in the manifest file to enable playback of media with discontinuities.
            Therefore, the wall-clock time derived from the manifest file may be inaccurate.
            If DisplayFragmentTimestamp is set to `ALWAYS`, the accurate fragment
            timestamp is added to each S element in the manifest file with the attribute
            name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage
            this custom attribute.


            The default value is `NEVER`. When DASHFragmentSelector is `SERVER_TIMESTAMP`,
            the timestamps will be the server start timestamps. Similarly, when DASHFragmentSelector
            is `PRODUCER_TIMESTAMP`, the timestamps will be the producer start timestamps.'
        DisplayFragmentNumber:
          allOf:
          - $ref: '#/components/schemas/DASHDisplayFragmentNumber'
          description: 'Fragments are identified in the manifest file based on their
            sequence number in the session. If DisplayFragmentNumber is set to `ALWAYS`,
            the Kinesis Video Streams fragment number is added to each S element in
            the manifest file with the attribute name “kvs:fn”. These fragment numbers
            can be used for logging or for use with other APIs (e.g. `GetMedia` and
            `GetMediaForFragmentList`). A custom MPEG-DASH media player is necessary
            to leverage these this custom attribute.


            The default value is `NEVER`.'
        DASHFragmentSelector:
          allOf:
          - $ref: '#/components/schemas/DASHFragmentSelector'
          description: 'The time range of the requested fragment and the source of
            the timestamps.


            This parameter is required if `PlaybackMode` is `ON_DEMAND` or `LIVE_REPLAY`.
            This parameter is optional if PlaybackMode is`` `LIVE`. If `PlaybackMode`
            is `LIVE`, the `FragmentSelectorType` can be set, but the `TimestampRange`
            should not be set. If `PlaybackMode` is `ON_DEMAND` or `LIVE_REPLAY`,
            both `FragmentSelectorType` and `TimestampRange` must be set.'
        Expires:
          allOf:
          - $ref: '#/components/schemas/Expires'
          description: 'The time in seconds until the requested session expires. This
            value can be between 300 (5 minutes) and 43200 (12 hours).


            When a session expires, no new calls to `GetDashManifest`, `GetMP4InitFragment`,
            or `GetMP4MediaFragment` can be made for that session.


            The default is 300 (5 minutes).'
        MaxManifestFragmentResults:
          allOf:
          - $ref: '#/components/schemas/DASHMaxResults'
          description: 'The maximum number of fragments that are returned in the MPEG-DASH
            manifest.


            When the `PlaybackMode` is `LIVE`, the most recent fragments are returned
            up to this value. When the `PlaybackMode` is `ON_DEMAND`, the oldest fragments
            are returned, up to this maximum number.


            When there are a higher number of fragments available in a live MPEG-DASH
            manifest, video players often buffer content before starting playback.
            Increasing the buffer size increases the playback latency, but it decreases
            the likelihood that rebuffering will occur during playback. We recommend
            that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum
            of 10 fragments.


            The default is 5 fragments if `PlaybackMode` is `LIVE` or `LIVE_REPLAY`,
            and 1,000 if `PlaybackMode` is `ON_DEMAND`.


            The maximum value of 1,000 fragments corresponds to more than 16 minutes
            of video on streams with 1-second fragments, and more than 2 1/2 hours
            of video on streams with 10-second fragments.'
    GetDASHStreamingSessionURLOutput:
      type: object
      properties:
        DASHStreamingSessionURL:
          allOf:
          - $ref: '#/components/schemas/DASHStreamingSessionURL'
          description: The URL (containing the session token) that a media player
            can use to retrieve the MPEG-DASH manifest.
    GetHLSStreamingSessionURLInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: 'The name of the stream for which to retrieve the HLS master
            playlist URL.


            You must specify either the `StreamName` or the `StreamARN`.'
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: 'The Amazon Resource Name (ARN) of the stream for which to
            retrieve the HLS master playlist URL.


            You must specify either the `StreamName` or the `StreamARN`.'
        PlaybackMode:
          allOf:
          - $ref: '#/components/schemas/HLSPlaybackMode'
          description: "Whether to retrieve live, live replay, or archived, on-demand\
            \ data.\n\nFeatures of the three types of sessions include the following:\n\
            \n  * **`LIVE` **: For sessions of this type, the HLS media playlist is\
            \ continually updated with the latest fragments as they become available.\
            \ We recommend that the media player retrieve a new playlist on a one-second\
            \ interval. When this type of session is played in a media player, the\
            \ user interface typically displays a \"live\" notification, with no scrubber\
            \ control for choosing the position in the playback window to display.\n\
            \nIn `LIVE` mode, the newest available fragments are included in an HLS\
            \ media playlist, even if there is a gap between fragments (that is, if\
            \ a fragment is missing). A gap like this might cause a media player to\
            \ halt or cause a jump in playback. In this mode, fragments are not added\
            \ to the HLS media playlist if they are older than the newest fragment\
            \ in the playlist. If the missing fragment becomes available after a subsequent\
            \ fragment is added to the playlist, the older fragment is not added,\
            \ and the gap is not filled.\n\n  * **`LIVE_REPLAY` **: For sessions of\
            \ this type, the HLS media playlist is updated similarly to how it is\
            \ updated for `LIVE` mode except that it starts by including fragments\
            \ from a given start time. Instead of fragments being added as they are\
            \ ingested, fragments are added as the duration of the next fragment elapses.\
            \ For example, if the fragments in the session are two seconds long, then\
            \ a new fragment is added to the media playlist every two seconds. This\
            \ mode is useful to be able to start playback from when an event is detected\
            \ and continue live streaming media that has not yet been ingested as\
            \ of the time of the session creation. This mode is also useful to stream\
            \ previously archived media without being limited by the 1,000 fragment\
            \ limit in the `ON_DEMAND` mode. \n\n  * **`ON_DEMAND` **: For sessions\
            \ of this type, the HLS media playlist contains all the fragments for\
            \ the session, up to the number that is specified in `MaxMediaPlaylistFragmentResults`.\
            \ The playlist must be retrieved only once for each session. When this\
            \ type of session is played in a media player, the user interface typically\
            \ displays a scrubber control for choosing the position in the playback\
            \ window to display.\n\nIn all playback modes, if `FragmentSelectorType`\
            \ is `PRODUCER_TIMESTAMP`, and if there are multiple fragments with the\
            \ same start timestamp, the fragment that has the largest fragment number\
            \ (that is, the newest fragment) is included in the HLS media playlist.\
            \ The other fragments are not included. Fragments that have different\
            \ timestamps but have overlapping durations are still included in the\
            \ HLS media playlist. This can lead to unexpected behavior in the media\
            \ player.\n\nThe default is `LIVE`."
        HLSFragmentSelector:
          allOf:
          - $ref: '#/components/schemas/HLSFragmentSelector'
          description: 'The time range of the requested fragment and the source of
            the timestamps.


            This parameter is required if `PlaybackMode` is `ON_DEMAND` or `LIVE_REPLAY`.
            This parameter is optional if PlaybackMode is`` `LIVE`. If `PlaybackMode`
            is `LIVE`, the `FragmentSelectorType` can be set, but the `TimestampRange`
            should not be set. If `PlaybackMode` is `ON_DEMAND` or `LIVE_REPLAY`,
            both `FragmentSelectorType` and `TimestampRange` must be set.'
        ContainerFormat:
          allOf:
          - $ref: '#/components/schemas/ContainerFormat'
          description: 'Specifies which format should be used for packaging the media.
            Specifying the `FRAGMENTED_MP4` container format packages the media into
            MP4 fragments (fMP4 or CMAF). This is the recommended packaging because
            there is minimal packaging overhead. The other container format option
            is `MPEG_TS`. HLS has supported MPEG TS chunks since it was released and
            is sometimes the only supported packaging on older HLS players. MPEG TS
            typically has a 5-25 percent packaging overhead. This means MPEG TS typically
            requires 5-25 percent more bandwidth and cost than fMP4.


            The default is `FRAGMENTED_MP4`.'
        DiscontinuityMode:
          allOf:
          - $ref: '#/components/schemas/HLSDiscontinuityMode'
          description: "Specifies when flags marking discontinuities between fragments\
            \ are added to the media playlists.\n\nMedia players typically build a\
            \ timeline of media content to play, based on the timestamps of each fragment.\
            \ This means that if there is any overlap or gap between fragments (as\
            \ is typical if HLSFragmentSelector is set to `SERVER_TIMESTAMP`), the\
            \ media player timeline will also have small gaps between fragments in\
            \ some places, and will overwrite frames in other places. Gaps in the\
            \ media player timeline can cause playback to stall and overlaps can cause\
            \ playback to be jittery. When there are discontinuity flags between fragments,\
            \ the media player is expected to reset the timeline, resulting in the\
            \ next fragment being played immediately after the previous fragment.\n\
            \nThe following modes are supported:\n\n  * `ALWAYS`: a discontinuity\
            \ marker is placed between every fragment in the HLS media playlist. It\
            \ is recommended to use a value of `ALWAYS` if the fragment timestamps\
            \ are not accurate.\n\n  * `NEVER`: no discontinuity markers are placed\
            \ anywhere. It is recommended to use a value of `NEVER` to ensure the\
            \ media player timeline most accurately maps to the producer timestamps.\
            \ \n\n  * `ON_DISCONTINUITY`: a discontinuity marker is placed between\
            \ fragments that have a gap or overlap of more than 50 milliseconds. For\
            \ most playback scenarios, it is recommended to use a value of `ON_DISCONTINUITY`\
            \ so that the media player timeline is only reset when there is a significant\
            \ issue with the media timeline (e.g. a missing fragment).\n\nThe default\
            \ is `ALWAYS` when HLSFragmentSelector is set to `SERVER_TIMESTAMP`, and\
            \ `NEVER` when it is set to `PRODUCER_TIMESTAMP`."
        DisplayFragmentTimestamp:
          allOf:
          - $ref: '#/components/schemas/HLSDisplayFragmentTimestamp'
          description: 'Specifies when the fragment start timestamps should be included
            in the HLS media playlist. Typically, media players report the playhead
            position as a time relative to the start of the first fragment in the
            playback session. However, when the start timestamps are included in the
            HLS media playlist, some media players might report the current playhead
            as an absolute time based on the fragment timestamps. This can be useful
            for creating a playback experience that shows viewers the wall-clock time
            of the media.


            The default is `NEVER`. When HLSFragmentSelector is `SERVER_TIMESTAMP`,
            the timestamps will be the server start timestamps. Similarly, when HLSFragmentSelector
            is `PRODUCER_TIMESTAMP`, the timestamps will be the producer start timestamps.'
        Expires:
          allOf:
          - $ref: '#/components/schemas/Expires'
          description: 'The time in seconds until the requested session expires. This
            value can be between 300 (5 minutes) and 43200 (12 hours).


            When a session expires, no new calls to `GetHLSMasterPlaylist`, `GetHLSMediaPlaylist`,
            `GetMP4InitFragment`, `GetMP4MediaFragment`, or `GetTSFragment` can be
            made for that session.


            The default is 300 (5 minutes).'
        MaxMediaPlaylistFragmentResults:
          allOf:
          - $ref: '#/components/schemas/HLSMaxResults'
          description: 'The maximum number of fragments that are returned in the HLS
            media playlists.


            When the `PlaybackMode` is `LIVE`, the most recent fragments are returned
            up to this value. When the `PlaybackMode` is `ON_DEMAND`, the oldest fragments
            are returned, up to this maximum number.


            When there are a higher number of fragments available in a live HLS media
            playlist, video players often buffer content before starting playback.
            Increasing the buffer size increases the playback latency, but it decreases
            the likelihood that rebuffering will occur during playback. We recommend
            that a live HLS media playlist have a minimum of 3 fragments and a maximum
            of 10 fragments.


            The default is 5 fragments if `PlaybackMode` is `LIVE` or `LIVE_REPLAY`,
            and 1,000 if `PlaybackMode` is `ON_DEMAND`.


            The maximum value of 5,000 fragments corresponds to more than 80 minutes
            of video on streams with 1-second fragments, and more than 13 hours of
            video on streams with 10-second fragments.'
    GetHLSStreamingSessionURLOutput:
      type: object
      properties:
        HLSStreamingSessionURL:
          allOf:
          - $ref: '#/components/schemas/HLSStreamingSessionURL'
          description: The URL (containing the session token) that a media player
            can use to retrieve the HLS master playlist.
    GetImagesInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: The name of the stream from which to retrieve the images. You
            must specify either the `StreamName` or the `StreamARN`.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve the images. You must specify either the `StreamName` or the `StreamARN`.
        ImageSelectorType:
          allOf:
          - $ref: '#/components/schemas/ImageSelectorType'
          description: The origin of the Server or Producer timestamps to use to generate
            the images.
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The starting point from which the images should be generated.
            This `StartTimestamp` must be within an inclusive range of timestamps
            for an image to be returned.
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end timestamp for the range of images to be generated.
            If the time range between `StartTimestamp` and `EndTimestamp` is more
            than 300 seconds above `StartTimestamp`, you will receive an `IllegalArgumentException`.
        SamplingInterval:
          allOf:
          - $ref: '#/components/schemas/SamplingInterval'
          description: The time interval in milliseconds (ms) at which the images
            need to be generated from the stream. The minimum value that can be provided
            is 200 ms (5 images per second). If the timestamp range is less than the
            sampling interval, the image from the `startTimestamp` will be returned
            if available.
        Format:
          allOf:
          - $ref: '#/components/schemas/Format'
          description: The format that will be used to encode the image.
        FormatConfig:
          allOf:
          - $ref: '#/components/schemas/FormatConfig'
          description: The list of a key-value pair structure that contains extra
            parameters that can be applied when the image is generated. The `FormatConfig`
            key is the `JPEGQuality`, which indicates the JPEG quality key to be used
            to generate the image. The `FormatConfig` value accepts ints from 1 to
            100. If the value is 1, the image will be generated with less quality
            and the best compression. If the value is 100, the image will be generated
            with the best quality and less compression. If no value is provided, the
            default value of the `JPEGQuality` key will be set to 80.
        WidthPixels:
          allOf:
          - $ref: '#/components/schemas/WidthPixels'
          description: The width of the output image that is used in conjunction with
            the `HeightPixels` parameter. When both `WidthPixels` and `HeightPixels`
            parameters are provided, the image will be stretched to fit the specified
            aspect ratio. If only the `WidthPixels` parameter is provided or if only
            the `HeightPixels` is provided, a `ValidationException` will be thrown.
            If neither parameter is provided, the original image size from the stream
            will be returned.
        HeightPixels:
          allOf:
          - $ref: '#/components/schemas/HeightPixels'
          description: The height of the output image that is used in conjunction
            with the `WidthPixels` parameter. When both `HeightPixels` and `WidthPixels`
            parameters are provided, the image will be stretched to fit the specified
            aspect ratio. If only the `HeightPixels` parameter is provided, its original
            aspect ratio will be used to calculate the `WidthPixels` ratio. If neither
            parameter is provided, the original image size will be returned.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/GetImagesMaxResults'
          description: 'The maximum number of images to be returned by the API.


            The default limit is 25 images per API response. Providing a `MaxResults`
            greater than this value will result in a page size of 25. Any additional
            results will be paginated.'
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token that specifies where to start paginating the next set
            of Images. This is the `GetImages:NextToken` from a previously truncated
            response.
      required:
      - ImageSelectorType
      - StartTimestamp
      - EndTimestamp
      - Format
    GetImagesMaxResults:
      type: integer
      format: int64
      minimum: 1
      maximum: 100
    GetImagesOutput:
      type: object
      properties:
        Images:
          allOf:
          - $ref: '#/components/schemas/Images'
          description: The list of images generated from the video stream. If there
            is no media available for the given timestamp, the `NO_MEDIA` error will
            be listed in the output. If an error occurs while the image is being generated,
            the `MEDIA_ERROR` will be listed in the output as the cause of the missing
            image.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The encrypted token that was used in the request to get more
            images.
    GetMediaForFragmentListInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: The name of the stream from which to retrieve fragment media.
            Specify either this parameter or the `StreamARN` parameter.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve fragment media. Specify either this parameter or the `StreamName`
            parameter.
        Fragments:
          allOf:
          - $ref: '#/components/schemas/FragmentNumberList'
          description: A list of the numbers of fragments for which to retrieve media.
            You retrieve these values with ListFragments.
      required:
      - Fragments
    GetMediaForFragmentListOutput:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the requested media.
        Payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          description: "The payload that Kinesis Video Streams returns is a sequence\
            \ of chunks from the specified stream. For information about the chunks,\
            \ see [PutMedia](http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html).\
            \ The chunks that Kinesis Video Streams returns in the `GetMediaForFragmentList`\
            \ call also include the following additional Matroska (MKV) tags:\n\n\
            \  * AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the\
            \ chunk.\n\n  * AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP - Server-side timestamp\
            \ of the fragment.\n\n  * AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP - Producer-side\
            \ timestamp of the fragment.\n\nThe following tags will be included if\
            \ an exception occurs:\n\n  * AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number\
            \ of the fragment that threw the exception \n\n  * AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE\
            \ - The integer code of the \n\n  * AWS_KINESISVIDEO_EXCEPTION_MESSAGE\
            \ - A text description of the exception"
    HLSDiscontinuityMode:
      type: string
      enum:
      - ALWAYS
      - NEVER
      - ON_DISCONTINUITY
    HLSDisplayFragmentTimestamp:
      type: string
      enum:
      - ALWAYS
      - NEVER
    HLSFragmentSelector:
      type: object
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/HLSFragmentSelectorType'
          description: 'The source of the timestamps for the requested media.


            When `FragmentSelectorType` is set to `PRODUCER_TIMESTAMP` and GetHLSStreamingSessionURLInput$PlaybackMode
            is `ON_DEMAND` or `LIVE_REPLAY`, the first fragment ingested with a producer
            timestamp within the specified FragmentSelector$TimestampRange is included
            in the media playlist. In addition, the fragments with producer timestamps
            within the `TimestampRange` ingested immediately following the first fragment
            (up to the GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults
            value) are included.


            Fragments that have duplicate producer timestamps are deduplicated. This
            means that if producers are producing a stream of fragments with producer
            timestamps that are approximately equal to the true clock time, the HLS
            media playlists will contain all of the fragments within the requested
            timestamp range. If some fragments are ingested within the same time range
            and very different points in time, only the oldest ingested collection
            of fragments are returned.


            When `FragmentSelectorType` is set to `PRODUCER_TIMESTAMP` and GetHLSStreamingSessionURLInput$PlaybackMode
            is `LIVE`, the producer timestamps are used in the MP4 fragments and for
            deduplication. But the most recently ingested fragments based on server
            timestamps are included in the HLS media playlist. This means that even
            if fragments ingested in the past have producer timestamps with values
            now, they are not included in the HLS media playlist.


            The default is `SERVER_TIMESTAMP`.'
        TimestampRange:
          allOf:
          - $ref: '#/components/schemas/HLSTimestampRange'
          description: 'The start and end of the timestamp range for the requested
            media.


            This value should not be present if `PlaybackType` is `LIVE`.'
      description: Contains the range of timestamps for the requested media, and the
        source of the timestamps.
    HLSFragmentSelectorType:
      type: string
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
    HLSMaxResults:
      type: integer
      format: int64
      minimum: 1
      maximum: 5000
    HLSPlaybackMode:
      type: string
      enum:
      - LIVE
      - LIVE_REPLAY
      - ON_DEMAND
    HLSStreamingSessionURL:
      type: string
    HLSTimestampRange:
      type: object
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The start of the timestamp range for the requested media.


            If the `HLSTimestampRange` value is specified, the `StartTimestamp` value
            is required.


            Only fragments that start exactly at or after `StartTimestamp` are included
            in the session. Fragments that start before `StartTimestamp` and continue
            past it aren''t included in the session. If `FragmentSelectorType` is
            `SERVER_TIMESTAMP`, the `StartTimestamp` must be later than the stream
            head.'
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The end of the timestamp range for the requested media. This
            value must be within 24 hours of the specified `StartTimestamp`, and it
            must be later than the `StartTimestamp` value.


            If `FragmentSelectorType` for the request is `SERVER_TIMESTAMP`, this
            value must be in the past.


            The `EndTimestamp` value is required for `ON_DEMAND` mode, but optional
            for `LIVE_REPLAY` mode. If the `EndTimestamp` is not set for `LIVE_REPLAY`
            mode then the session will continue to include newly ingested fragments
            until the session expires.


            This value is inclusive. The `EndTimestamp` is compared to the (starting)
            timestamp of the fragment. Fragments that start before the `EndTimestamp`
            value and continue past it are included in the session.'
      description: 'The start and end of the timestamp range for the requested media.


        This value should not be present if `PlaybackType` is `LIVE`.'
    HeightPixels:
      type: integer
      minimum: 1
      maximum: 2160
    Image:
      type: object
      properties:
        TimeStamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: An attribute of the `Image` object that is used to extract
            an image from the video stream. This field is used to manage gaps on images
            or to better understand the pagination window.
        Error:
          allOf:
          - $ref: '#/components/schemas/ImageError'
          description: "The error message shown when the image for the provided timestamp\
            \ was not extracted due to a non-tryable error. An error will be returned\
            \ if:\n\n  * There is no media that exists for the specified `Timestamp`.\n\
            \n  * The media for the specified time does not allow an image to be extracted.\
            \ In this case the media is audio only, or the incorrect media has been\
            \ ingested."
        ImageContent:
          allOf:
          - $ref: '#/components/schemas/ImageContent'
          description: An attribute of the `Image` object that is Base64 encoded.
      description: A structure that contains the `Timestamp`, `Error`, and `ImageContent`.
    ImageContent:
      type: string
      minLength: 1
      maxLength: 6291456
    ImageError:
      type: string
      enum:
      - NO_MEDIA
      - MEDIA_ERROR
    ImageSelectorType:
      type: string
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
    Images:
      type: array
      items:
        $ref: '#/components/schemas/Image'
    InvalidArgumentException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: A specified parameter exceeds its restrictions, is not supported,
        or can't be used.
    InvalidCodecPrivateDataException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The codec private data in at least one of the tracks of the video
        stream is not valid for this operation.
    InvalidMediaFrameException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: One or more frames in the requested clip could not be parsed based
        on the specified codec.
    ListFragmentsInput:
      type: object
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          description: The name of the stream from which to retrieve a fragment list.
            Specify either this parameter or the `StreamARN` parameter.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve a fragment list. Specify either this parameter or the `StreamName`
            parameter.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListFragmentsMaxResults'
          description: The total number of fragments to return. If the total number
            of fragments available is more than the value specified in `max-results`,
            then a ListFragmentsOutput$NextToken is provided in the output that you
            can use to resume pagination.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A token to specify where to start paginating. This is the ListFragmentsOutput$NextToken
            from a previously truncated response.
        FragmentSelector:
          allOf:
          - $ref: '#/components/schemas/FragmentSelector'
          description: 'Describes the timestamp range and timestamp origin for the
            range of fragments to return.


            This is only required when the `NextToken` isn''t passed in the API.'
    ListFragmentsMaxResults:
      type: integer
      format: int64
      minimum: 1
      maximum: 1000
    ListFragmentsOutput:
      type: object
      properties:
        Fragments:
          allOf:
          - $ref: '#/components/schemas/FragmentList'
          description: A list of archived Fragment objects from the stream that meet
            the selector criteria. Results are in no specific order, even across pages.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the returned list is truncated, the operation returns this
            token to use to retrieve the next page of results. This value is `null`
            when there are no more results to return.
    Long:
      type: integer
      format: int64
      default: 0
    MissingCodecPrivateDataException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: No codec private data was found in at least one of tracks of the
        video stream.
    NextToken:
      type: string
      pattern: ^[a-zA-Z0-9+/]+={0,2}$
      minLength: 1
      maxLength: 4096
    NoDataRetentionException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: '`GetImages` was requested for a stream that does not retain data
        (that is, has a `DataRetentionInHours` of 0).'
    NotAuthorizedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: 'Status Code: 403, The caller is not authorized to perform an operation
        on the given stream, or the token has expired.'
    Payload:
      type: string
      format: byte
    ResourceARN:
      type: string
      pattern: ^arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+$
      minLength: 1
      maxLength: 1024
    ResourceNotFoundException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: '`GetImages` will throw this error when Kinesis Video Streams can''t
        find the stream that you specified.


        `GetHLSStreamingSessionURL` and `GetDASHStreamingSessionURL` throw this error
        if a session with a `PlaybackMode` of `ON_DEMAND` or `LIVE_REPLAY`is requested
        for a stream that has no fragments within the requested time range, or if
        a session with a `PlaybackMode` of `LIVE` is requested for a stream that has
        no fragments within the last 30 seconds.'
    SamplingInterval:
      type: integer
    StreamName:
      type: string
      pattern: ^[a-zA-Z0-9_.-]+$
      minLength: 1
      maxLength: 256
    Timestamp:
      type: string
      format: date-time
    TimestampRange:
      type: object
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The starting timestamp in the range of timestamps for which
            to return fragments.
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The ending timestamp in the range of timestamps for which to
            return fragments.
      required:
      - StartTimestamp
      - EndTimestamp
      description: The range of timestamps for which to return fragments.
    UnsupportedStreamMediaTypeException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The type of the media (for example, h.264 or h.265 video or ACC
        or G.711 audio) could not be determined from the codec IDs of the tracks in
        the first fragment for a playback session. The codec ID for track 1 should
        be `V_MPEG/ISO/AVC` and, optionally, the codec ID for track 2 should be `A_AAC`.
    WidthPixels:
      type: integer
      minimum: 1
      maximum: 3840
