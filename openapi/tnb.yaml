openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: tnb
  x-aws-serviceName: tnb
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2008-10-21'
  title: AWS Telco Network Builder
  description: |-
    Amazon Web Services Telco Network Builder (TNB) is a network automation service that helps you deploy and manage telecom networks. AWS TNB helps you with the lifecycle management of your telecommunication network functions throughout planning, deployment, and post-deployment activities.
servers:
- description: The AWS Telco Network Builder regional endpoint
  url: https://tnb.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}/cancel:
    post:
      operationId: CancelSolNetworkOperation
      description: |-
        Cancels a network operation.

        A network operation is any operation that is done to your network, such as network instance instantiation or termination.
      parameters:
      - name: nsLcmOpOccId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsLcmOpOccId'
      responses:
        '202': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnfpkgm/v1/vnf_packages:
    post:
      operationId: CreateSolFunctionPackage
      description: |-
        Creates a function package.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network. For more information, see [Function packages](https://docs.aws.amazon.com/tnb/latest/ug/function-packages.html) in the _Amazon Web Services Telco Network Builder User Guide_.

        Creating a function package is the first step for creating a network in AWS TNB. This request creates an empty container with an ID. The next step is to upload the actual CSAR zip file into that empty container. To upload function package content, see [PutSolFunctionPackageContent](https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSolFunctionPackages
      description: |-
        Lists information about function packages.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: max_results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextpage_opaque_marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_instances:
    post:
      operationId: CreateSolNetworkInstance
      description: |-
        Creates a network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed. Creating a network instance is the third step after creating a network package. For more information about network instances, [Network instances](https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html) in the _Amazon Web Services Telco Network Builder User Guide_.

        Once you create a network instance, you can instantiate it. To instantiate a network, see [InstantiateSolNetworkInstance](https://docs.aws.amazon.com/tnb/latest/APIReference/API_InstantiateSolNetworkInstance.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nsdInfoId:
                  $ref: '#/components/schemas/NsdInfoId'
                nsName:
                  $ref: '#/components/schemas/String'
                nsDescription:
                  $ref: '#/components/schemas/String'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSolNetworkInstances
      description: |-
        Lists your network instances.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.
      parameters:
      - name: max_results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextpage_opaque_marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nsd/v1/ns_descriptors:
    post:
      operationId: CreateSolNetworkPackage
      description: |-
        Creates a network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on. For more information, see [Network instances](https://docs.aws.amazon.com/tnb/latest/ug/network-instances.html) in the _Amazon Web Services Telco Network Builder User Guide_.

        A network package consists of a network service descriptor (NSD) file (required) and any additional files (optional), such as scripts specific to your needs. For example, if you have multiple function packages in your network package, you can use the NSD to define which network functions should run in certain VPCs, subnets, or EKS clusters.

        This request creates an empty network package container with an ID. Once you create a network package, you can upload the network package content using [PutSolNetworkPackageContent](https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListSolNetworkPackages
      description: |-
        Lists network packages.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.
      parameters:
      - name: max_results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextpage_opaque_marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}:
    delete:
      operationId: DeleteSolFunctionPackage
      description: |-
        Deletes a function package.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.

        To delete a function package, the package must be in a disabled state. To disable a function package, see [UpdateSolFunctionPackage](https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolFunctionPackage.html).
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      responses:
        '204': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSolFunctionPackage
      description: |-
        Gets the details of an individual function package, such as the operational state and whether the package is in use.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network..
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSolFunctionPackage
      description: |-
        Updates the operational state of function package.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operationalState:
                  $ref: '#/components/schemas/OperationalState'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_instances/{nsInstanceId}:
    delete:
      operationId: DeleteSolNetworkInstance
      description: |-
        Deletes a network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.

        To delete a network instance, the instance must be in a stopped or terminated state. To terminate a network instance, see [TerminateSolNetworkInstance](https://docs.aws.amazon.com/tnb/latest/APIReference/API_TerminateSolNetworkInstance.html).
      parameters:
      - name: nsInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      responses:
        '204': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSolNetworkInstance
      description: |-
        Gets the details of the network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.
      parameters:
      - name: nsInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nsd/v1/ns_descriptors/{nsdInfoId}:
    delete:
      operationId: DeleteSolNetworkPackage
      description: |-
        Deletes network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.

        To delete a network package, the package must be in a disable state. To disable a network package, see [UpdateSolNetworkPackage](https://docs.aws.amazon.com/tnb/latest/APIReference/API_UpdateSolNetworkPackage.html).
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      responses:
        '204': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSolNetworkPackage
      description: |-
        Gets the details of a network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSolNetworkPackage
      description: |-
        Updates the operational state of a network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.

        A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nsdOperationalState:
                  $ref: '#/components/schemas/NsdOperationalState'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnflcm/v1/vnf_instances/{vnfInstanceId}:
    get:
      operationId: GetSolFunctionInstance
      description: |-
        Gets the details of a network function instance, including the instantiation state and metadata from the function package descriptor in the network function package.

        A network function instance is a function in a function package .
      parameters:
      - name: vnfInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfInstanceId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content:
    get:
      operationId: GetSolFunctionPackageContent
      description: |-
        Gets the contents of a function package.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      - name: Accept
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/PackageContentType'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutSolFunctionPackageContent
      description: |-
        Uploads the contents of a function package.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      - name: Content-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/PackageContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/SensitiveBlob'
      responses:
        '202': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/vnfd:
    get:
      operationId: GetSolFunctionPackageDescriptor
      description: |-
        Gets a function package descriptor in a function package.

        A function package descriptor is a .yaml file in a function package that uses the TOSCA standard to describe how the network function in the function package should run on your network.

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      - name: Accept
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/DescriptorContentType'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}:
    get:
      operationId: GetSolNetworkOperation
      description: |-
        Gets the details of a network operation, including the tasks involved in the network operation and the status of the tasks.

        A network operation is any operation that is done to your network, such as network instance instantiation or termination.
      parameters:
      - name: nsLcmOpOccId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsLcmOpOccId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content:
    get:
      operationId: GetSolNetworkPackageContent
      description: |-
        Gets the contents of a network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      - name: Accept
        in: header
        required: true
        schema:
          $ref: '#/components/schemas/PackageContentType'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutSolNetworkPackageContent
      description: |-
        Uploads the contents of a network package.

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      - name: Content-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/PackageContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/SensitiveBlob'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd:
    get:
      operationId: GetSolNetworkPackageDescriptor
      description: |-
        Gets the content of the network service descriptor.

        A network service descriptor is a .yaml file in a network package that uses the TOSCA standard to describe the network functions you want to deploy and the Amazon Web Services infrastructure you want to deploy the network functions on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_instances/{nsInstanceId}/instantiate:
    post:
      operationId: InstantiateSolNetworkInstance
      description: |-
        Instantiates a network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.

        Before you can instantiate a network instance, you have to create a network instance. For more information, see [CreateSolNetworkInstance](https://docs.aws.amazon.com/tnb/latest/APIReference/API_CreateSolNetworkInstance.html).
      parameters:
      - name: nsInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      - name: dry_run
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                additionalParamsForNs:
                  $ref: '#/components/schemas/Document'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnflcm/v1/vnf_instances:
    get:
      operationId: ListSolFunctionInstances
      description: |-
        Lists network function instances.

        A network function instance is a function in a function package .
      parameters:
      - name: max_results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextpage_opaque_marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_lcm_op_occs:
    get:
      operationId: ListSolNetworkOperations
      description: |-
        Lists details for a network operation, including when the operation started and the status of the operation.

        A network operation is any operation that is done to your network, such as network instance instantiation or termination.
      parameters:
      - name: nsInstanceId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      - name: max_results
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextpage_opaque_marker
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Lists tags for AWS TNB resources.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TNBResourceArn'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Tags an AWS TNB resource.

        A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TNBResourceArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Untags an AWS TNB resource.

        A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value. You can use tags to search and filter your resources or track your Amazon Web Services costs.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TNBResourceArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_instances/{nsInstanceId}/terminate:
    post:
      operationId: TerminateSolNetworkInstance
      description: |-
        Terminates a network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.

        You must terminate a network instance before you can delete it.
      parameters:
      - name: nsInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nslcm/v1/ns_instances/{nsInstanceId}/update:
    post:
      operationId: UpdateSolNetworkInstance
      description: |-
        Update a network instance.

        A network instance is a single network created in Amazon Web Services TNB that can be deployed and on which life-cycle operations (like terminate, update, and delete) can be performed.

        Choose the _updateType_ parameter to target the necessary update of the network instance.
      parameters:
      - name: nsInstanceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsInstanceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                updateType:
                  $ref: '#/components/schemas/UpdateSolNetworkType'
                modifyVnfInfoData:
                  $ref: '#/components/schemas/UpdateSolNetworkModify'
                updateNs:
                  $ref: '#/components/schemas/UpdateSolNetworkServiceData'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Service quotas have been exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content/validate:
    put:
      operationId: ValidateSolFunctionPackageContent
      description: |-
        Validates function package content. This can be used as a dry run before uploading function package content with [PutSolFunctionPackageContent](https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolFunctionPackageContent.html).

        A function package is a .zip file in CSAR (Cloud Service Archive) format that contains a network function (an ETSI standard telecommunication application) and function package descriptor that uses the TOSCA standard to describe how the network functions should run on your network.
      parameters:
      - name: vnfPkgId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VnfPkgId'
      - name: Content-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/PackageContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/SensitiveBlob'
      responses:
        '202': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sol/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content/validate:
    put:
      operationId: ValidateSolNetworkPackageContent
      description: |-
        Validates network package content. This can be used as a dry run before uploading network package content with [PutSolNetworkPackageContent](https://docs.aws.amazon.com/tnb/latest/APIReference/API_PutSolNetworkPackageContent.html).

        A network package is a .zip file in CSAR (Cloud Service Archive) format defines the function packages you want to deploy and the Amazon Web Services infrastructure you want to deploy them on.
      parameters:
      - name: nsdInfoId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NsdInfoId'
      - name: Content-Type
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/PackageContentType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  $ref: '#/components/schemas/SensitiveBlob'
      responses:
        '200': {}
        '403':
          description: |-
            Insufficient permissions to make request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error occurred. Problem on the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Exception caused by throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Unable to process the request because the client provided input failed to satisfy request constraints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Insufficient permissions to make request.
    CancelSolNetworkOperationInput:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
      required:
      - nsLcmOpOccId
    CreateSolFunctionPackageInput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
    CreateSolFunctionPackageOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
        arn:
          allOf:
          - $ref: '#/components/schemas/VnfPkgArn'
          description: Function package ARN.
        onboardingState:
          allOf:
          - $ref: '#/components/schemas/OnboardingState'
          description: Onboarding state of the function package.
        operationalState:
          allOf:
          - $ref: '#/components/schemas/OperationalState'
          description: Operational state of the function package.
        usageState:
          allOf:
          - $ref: '#/components/schemas/UsageState'
          description: Usage state of the function package.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - onboardingState
      - operationalState
      - usageState
    CreateSolNetworkInstanceInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID for network service descriptor.
        nsName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network instance name.
        nsDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network instance description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - nsdInfoId
      - nsName
    CreateSolNetworkInstanceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsInstanceArn'
          description: Network instance ARN.
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network service descriptor ID.
        nsInstanceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network instance name.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - nsdInfoId
      - nsInstanceName
    CreateSolNetworkPackageInput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
    CreateSolNetworkPackageOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network package.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsdInfoArn'
          description: Network package ARN.
        nsdOnboardingState:
          allOf:
          - $ref: '#/components/schemas/NsdOnboardingState'
          description: Onboarding state of the network service descriptor in the network
            package.
        nsdOperationalState:
          allOf:
          - $ref: '#/components/schemas/NsdOperationalState'
          description: Operational state of the network service descriptor in the
            network package.
        nsdUsageState:
          allOf:
          - $ref: '#/components/schemas/NsdUsageState'
          description: Usage state of the network service descriptor in the network
            package.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - nsdOnboardingState
      - nsdOperationalState
      - nsdUsageState
    DeleteSolFunctionPackageInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
      required:
      - vnfPkgId
    DeleteSolNetworkInstanceInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance ID.
      required:
      - nsInstanceId
    DeleteSolNetworkPackageInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
      required:
      - nsdInfoId
    DescriptorContentType:
      type: string
      enum:
      - text/plain
    ErrorCause:
      type: string
      minLength: 1
      maxLength: 200
    ErrorDetails:
      type: string
      maxLength: 10240
    ErrorInfo:
      type: object
      properties:
        cause:
          allOf:
          - $ref: '#/components/schemas/ErrorCause'
          description: Error cause.
        details:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Error details.
      description: Provides error information.
    FunctionArtifactMeta:
      type: object
      properties:
        overrides:
          allOf:
          - $ref: '#/components/schemas/OverrideList'
          description: Lists of function package overrides.
      description: 'Metadata for function package artifacts.


        Artifacts are the contents of the package descriptor file and the state of
        the package.'
    GetSolFunctionInstanceInput:
      type: object
      properties:
        vnfInstanceId:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: ID of the network function.
      required:
      - vnfInstanceId
    GetSolFunctionInstanceMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'The metadata of a network function instance.


        A network function instance is a function in a function package .'
    GetSolFunctionInstanceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: Network function instance ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceArn'
          description: Network function instance ARN.
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance ID.
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        vnfdId:
          allOf:
          - $ref: '#/components/schemas/VnfdId'
          description: Function package descriptor ID.
        vnfProvider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function provider.
        vnfProductName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function product name.
        vnfdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package descriptor version.
        instantiationState:
          allOf:
          - $ref: '#/components/schemas/VnfInstantiationState'
          description: Network function instantiation state.
        instantiatedVnfInfo:
          $ref: '#/components/schemas/GetSolVnfInfo'
        metadata:
          $ref: '#/components/schemas/GetSolFunctionInstanceMetadata'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - nsInstanceId
      - vnfPkgId
      - vnfdId
      - instantiationState
      - metadata
    GetSolFunctionPackageContentInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
        accept:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: The format of the package that you want to download from the
            function packages.
      required:
      - vnfPkgId
      - accept
    GetSolFunctionPackageContentOutput:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Indicates the media type of the resource.
        packageContent:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Contents of the function package.
    GetSolFunctionPackageDescriptorInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
        accept:
          allOf:
          - $ref: '#/components/schemas/DescriptorContentType'
          description: Indicates which content types, expressed as MIME types, the
            client is able to understand.
      required:
      - vnfPkgId
      - accept
    GetSolFunctionPackageDescriptorOutput:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/DescriptorContentType'
          description: Indicates the media type of the resource.
        vnfd:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Contents of the function package descriptor.
    GetSolFunctionPackageInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
      required:
      - vnfPkgId
    GetSolFunctionPackageMetadata:
      type: object
      properties:
        vnfd:
          allOf:
          - $ref: '#/components/schemas/FunctionArtifactMeta'
          description: Metadata related to the function package descriptor of the
            function package.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata related to the function package.


        A function package is a .zip file in CSAR (Cloud Service Archive) format that
        contains a network function (an ETSI standard telecommunication application)
        and function package descriptor that uses the TOSCA standard to describe how
        the network functions should run on your network.'
    GetSolFunctionPackageOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/VnfPkgArn'
          description: Function package ARN.
        onboardingState:
          allOf:
          - $ref: '#/components/schemas/OnboardingState'
          description: Function package onboarding state.
        operationalState:
          allOf:
          - $ref: '#/components/schemas/OperationalState'
          description: Function package operational state.
        usageState:
          allOf:
          - $ref: '#/components/schemas/UsageState'
          description: Function package usage state.
        vnfdId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package descriptor ID.
        vnfProvider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function provider.
        vnfProductName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function product name.
        vnfdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package descriptor version.
        metadata:
          $ref: '#/components/schemas/GetSolFunctionPackageMetadata'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - onboardingState
      - operationalState
      - usageState
    GetSolInstantiatedVnfInfo:
      type: object
      properties:
        vnfState:
          allOf:
          - $ref: '#/components/schemas/VnfOperationalState'
          description: State of the network function.
      description: 'Information about a network function.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    GetSolNetworkInstanceInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance.
      required:
      - nsInstanceId
    GetSolNetworkInstanceMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'The metadata of a network instance.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    GetSolNetworkInstanceOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsInstanceArn'
          description: Network instance ARN.
        nsInstanceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network instance name.
        nsInstanceDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network instance description.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/NsdId'
          description: Network service descriptor ID.
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network service descriptor info ID.
        nsState:
          allOf:
          - $ref: '#/components/schemas/NsState'
          description: Network instance state.
        lcmOpInfo:
          $ref: '#/components/schemas/LcmOperationInfo'
        metadata:
          $ref: '#/components/schemas/GetSolNetworkInstanceMetadata'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - nsInstanceName
      - nsInstanceDescription
      - nsdId
      - nsdInfoId
      - metadata
    GetSolNetworkOperationInput:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
      required:
      - nsLcmOpOccId
    GetSolNetworkOperationMetadata:
      type: object
      properties:
        updateNsMetadata:
          allOf:
          - $ref: '#/components/schemas/UpdateNsMetadata'
          description: Metadata related to the network operation occurrence for network
            instance updates. This is populated only if the lcmOperationType is `UPDATE`
            and the updateType is `UPDATE_NS`.
        modifyVnfInfoMetadata:
          allOf:
          - $ref: '#/components/schemas/ModifyVnfInfoMetadata'
          description: Metadata related to the network operation occurrence for network
            function updates in a network instance. This is populated only if the
            lcmOperationType is `UPDATE` and the updateType is `MODIFY_VNF_INFORMATION`.
        instantiateMetadata:
          allOf:
          - $ref: '#/components/schemas/InstantiateMetadata'
          description: Metadata related to the network operation occurrence for network
            instantiation. This is populated only if the lcmOperationType is `INSTANTIATE`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata related to a network operation occurrence.


        A network operation is any operation that is done to your network, such as
        network instance instantiation or termination.'
    GetSolNetworkOperationOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: ID of this network operation occurrence.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccArn'
          description: Network operation ARN.
        operationState:
          allOf:
          - $ref: '#/components/schemas/NsLcmOperationState'
          description: The state of the network operation.
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network operation instance.
        lcmOperationType:
          allOf:
          - $ref: '#/components/schemas/LcmOperationType'
          description: Type of the operation represented by this occurrence.
        updateType:
          allOf:
          - $ref: '#/components/schemas/UpdateSolNetworkType'
          description: Type of the update. Only present if the network operation lcmOperationType
            is `UPDATE`.
        error:
          allOf:
          - $ref: '#/components/schemas/ProblemDetails'
          description: Error related to this specific network operation occurrence.
        metadata:
          allOf:
          - $ref: '#/components/schemas/GetSolNetworkOperationMetadata'
          description: Metadata of this network operation occurrence.
        tasks:
          allOf:
          - $ref: '#/components/schemas/GetSolNetworkOperationTasksList'
          description: All tasks associated with this operation occurrence.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - arn
    GetSolNetworkOperationTaskDetails:
      type: object
      properties:
        taskName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Task name.
        taskContext:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          description: Context for the network operation task.
        taskErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorInfo'
          description: Task error details.
        taskStatus:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: Task status.
        taskStartTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Task start time.
        taskEndTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Task end time.
      description: 'Gets the details of a network operation.


        A network operation is any operation that is done to your network, such as
        network instance instantiation or termination.'
    GetSolNetworkOperationTasksList:
      type: array
      items:
        $ref: '#/components/schemas/GetSolNetworkOperationTaskDetails'
    GetSolNetworkPackageContentInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
        accept:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: The format of the package you want to download from the network
            package.
      required:
      - nsdInfoId
      - accept
    GetSolNetworkPackageContentOutput:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Indicates the media type of the resource.
        nsdContent:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Content of the network service descriptor in the network package.
    GetSolNetworkPackageDescriptorInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
      required:
      - nsdInfoId
    GetSolNetworkPackageDescriptorOutput:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/DescriptorContentType'
          description: Indicates the media type of the resource.
        nsd:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: Contents of the network service descriptor in the network package.
    GetSolNetworkPackageInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
      required:
      - nsdInfoId
    GetSolNetworkPackageMetadata:
      type: object
      properties:
        nsd:
          allOf:
          - $ref: '#/components/schemas/NetworkArtifactMeta'
          description: Metadata related to the onboarded network service descriptor
            in the network package.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata associated with a network package.


        A network package is a .zip file in CSAR (Cloud Service Archive) format defines
        the function packages you want to deploy and the Amazon Web Services infrastructure
        you want to deploy them on.'
    GetSolNetworkPackageOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network package ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsdInfoArn'
          description: Network package ARN.
        nsdOnboardingState:
          allOf:
          - $ref: '#/components/schemas/NsdOnboardingState'
          description: Network service descriptor onboarding state.
        nsdOperationalState:
          allOf:
          - $ref: '#/components/schemas/NsdOperationalState'
          description: Network service descriptor operational state.
        nsdUsageState:
          allOf:
          - $ref: '#/components/schemas/NsdUsageState'
          description: Network service descriptor usage state.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/NsdId'
          description: Network service descriptor ID.
        nsdName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor name.
        nsdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor version.
        vnfPkgIds:
          allOf:
          - $ref: '#/components/schemas/VnfPkgIdList'
          description: Identifies the function package for the function package descriptor
            referenced by the onboarded network package.
        metadata:
          $ref: '#/components/schemas/GetSolNetworkPackageMetadata'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - id
      - arn
      - nsdOnboardingState
      - nsdOperationalState
      - nsdUsageState
      - nsdId
      - nsdName
      - nsdVersion
      - vnfPkgIds
      - metadata
    GetSolVnfInfo:
      type: object
      properties:
        vnfState:
          allOf:
          - $ref: '#/components/schemas/VnfOperationalState'
          description: State of the network function instance.
        vnfcResourceInfo:
          allOf:
          - $ref: '#/components/schemas/GetSolVnfcResourceInfoList'
          description: Compute info used by the network function instance.
      description: 'Information about the network function.


        A network function instance is a function in a function package .'
    GetSolVnfcResourceInfo:
      type: object
      properties:
        metadata:
          allOf:
          - $ref: '#/components/schemas/GetSolVnfcResourceInfoMetadata'
          description: The metadata of the network function compute.
      description: 'Details of resource associated with a network function.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    GetSolVnfcResourceInfoList:
      type: array
      items:
        $ref: '#/components/schemas/GetSolVnfcResourceInfo'
    GetSolVnfcResourceInfoMetadata:
      type: object
      properties:
        nodeGroup:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the node group.
        cluster:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the cluster.
        helmChart:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Information about the helm chart.
      description: 'The metadata of a network function.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    InstantiateMetadata:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: The network service descriptor used for instantiating the network
            instance.
        additionalParamsForNs:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The configurable properties used during instantiation.
      required:
      - nsdInfoId
      description: Metadata related to the configuration properties used during instantiation
        of the network instance.
    InstantiateSolNetworkInstanceInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance.
        dryRun:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A check for whether you have the required permissions for the
            action without actually making the request and provides an error response.
            If you have the required permissions, the error response is `DryRunOperation`.
            Otherwise, it is `UnauthorizedOperation`.
        additionalParamsForNs:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Provides values for the configurable properties.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
      required:
      - nsInstanceId
    InstantiateSolNetworkInstanceOutput:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
      required:
      - nsLcmOpOccId
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Unexpected error occurred. Problem on the server.
    LcmOperationInfo:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
      required:
      - nsLcmOpOccId
      description: 'Lifecycle management operation details on the network instance.


        Lifecycle management operations are deploy, update, or delete operations.'
    LcmOperationType:
      type: string
      enum:
      - INSTANTIATE
      - UPDATE
      - TERMINATE
    ListSolFunctionInstanceInfo:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: Network function instance ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceArn'
          description: Network function instance ARN.
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance ID.
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        vnfPkgName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package name.
        instantiationState:
          allOf:
          - $ref: '#/components/schemas/VnfInstantiationState'
          description: Network function instance instantiation state.
        instantiatedVnfInfo:
          $ref: '#/components/schemas/GetSolInstantiatedVnfInfo'
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListSolFunctionInstanceMetadata'
          description: Network function instance metadata.
      required:
      - id
      - arn
      - nsInstanceId
      - vnfPkgId
      - instantiationState
      - metadata
      description: 'Lists information about a network function instance.


        A network function instance is a function in a function package .'
    ListSolFunctionInstanceMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the network function instance was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the network function instance was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Lists network function instance metadata.


        A network function instance is a function in a function package .'
    ListSolFunctionInstanceResources:
      type: array
      items:
        $ref: '#/components/schemas/ListSolFunctionInstanceInfo'
    ListSolFunctionInstancesInput:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next page of results.
    ListSolFunctionInstancesOutput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token to use to retrieve the next page of results. This
            value is `null` when there are no more results to return.
        functionInstances:
          allOf:
          - $ref: '#/components/schemas/ListSolFunctionInstanceResources'
          description: Network function instances.
    ListSolFunctionPackageInfo:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
        arn:
          allOf:
          - $ref: '#/components/schemas/VnfPkgArn'
          description: Function package ARN.
        onboardingState:
          allOf:
          - $ref: '#/components/schemas/OnboardingState'
          description: Onboarding state of the function package.
        operationalState:
          allOf:
          - $ref: '#/components/schemas/OperationalState'
          description: Operational state of the function package.
        usageState:
          allOf:
          - $ref: '#/components/schemas/UsageState'
          description: Usage state of the function package.
        vnfdId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifies the function package and the function package descriptor.
        vnfProvider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Provider of the function package and the function package descriptor.
        vnfProductName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The product name for the network function.
        vnfdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifies the version of the function package descriptor.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListSolFunctionPackageMetadata'
          description: The metadata of the function package.
      required:
      - id
      - arn
      - onboardingState
      - operationalState
      - usageState
      description: 'Information about a function package.


        A function package is a .zip file in CSAR (Cloud Service Archive) format that
        contains a network function (an ETSI standard telecommunication application)
        and function package descriptor that uses the TOSCA standard to describe how
        the network functions should run on your network.'
    ListSolFunctionPackageMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Details for the function package metadata.


        A function package is a .zip file in CSAR (Cloud Service Archive) format that
        contains a network function (an ETSI standard telecommunication application)
        and function package descriptor that uses the TOSCA standard to describe how
        the network functions should run on your network.'
    ListSolFunctionPackageResources:
      type: array
      items:
        $ref: '#/components/schemas/ListSolFunctionPackageInfo'
    ListSolFunctionPackagesInput:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next page of results.
    ListSolFunctionPackagesOutput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token to use to retrieve the next page of results. This
            value is `null` when there are no more results to return.
        functionPackages:
          allOf:
          - $ref: '#/components/schemas/ListSolFunctionPackageResources'
          description: Function packages. A function package is a .zip file in CSAR
            (Cloud Service Archive) format that contains a network function (an ETSI
            standard telecommunication application) and function package descriptor
            that uses the TOSCA standard to describe how the network functions should
            run on your network.
      required:
      - functionPackages
    ListSolNetworkInstanceInfo:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsInstanceArn'
          description: Network instance ARN.
        nsInstanceName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Human-readable name of the network instance.
        nsInstanceDescription:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Human-readable description of the network instance.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/NsdId'
          description: ID of the network service descriptor in the network package.
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
        nsState:
          allOf:
          - $ref: '#/components/schemas/NsState'
          description: The state of the network instance.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkInstanceMetadata'
          description: The metadata of the network instance.
      required:
      - id
      - arn
      - nsInstanceName
      - nsInstanceDescription
      - nsdId
      - nsdInfoId
      - nsState
      - metadata
      description: 'Info about the specific network instance.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    ListSolNetworkInstanceMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata details for a network instance.


        A network instance is a single network created in Amazon Web Services TNB
        that can be deployed and on which life-cycle operations (like terminate, update,
        and delete) can be performed.'
    ListSolNetworkInstanceResources:
      type: array
      items:
        $ref: '#/components/schemas/ListSolNetworkInstanceInfo'
    ListSolNetworkInstancesInput:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next page of results.
    ListSolNetworkInstancesOutput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token to use to retrieve the next page of results. This
            value is `null` when there are no more results to return.
        networkInstances:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkInstanceResources'
          description: Lists network instances.
    ListSolNetworkOperationsInfo:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: ID of this network operation.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccArn'
          description: Network operation ARN.
        operationState:
          allOf:
          - $ref: '#/components/schemas/NsLcmOperationState'
          description: The state of the network operation.
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance related to this operation.
        lcmOperationType:
          allOf:
          - $ref: '#/components/schemas/LcmOperationType'
          description: Type of lifecycle management network operation.
        updateType:
          allOf:
          - $ref: '#/components/schemas/UpdateSolNetworkType'
          description: Type of the update. Only present if the network operation lcmOperationType
            is `UPDATE`.
        error:
          allOf:
          - $ref: '#/components/schemas/ProblemDetails'
          description: Error related to this specific network operation.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkOperationsMetadata'
          description: Metadata related to this network operation.
      required:
      - id
      - arn
      - operationState
      - nsInstanceId
      - lcmOperationType
      description: Information parameters for a network operation.
    ListSolNetworkOperationsInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: Network instance id filter, to retrieve network operations
            associated to a network instance.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next page of results.
    ListSolNetworkOperationsMetadata:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: 'The network service descriptor id used for the operation.


            Only present if the updateType is `UPDATE_NS`.'
        vnfInstanceId:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: 'The network function id used for the operation.


            Only present if the updateType is `MODIFY_VNF_INFO`.'
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata related to a network operation.


        A network operation is any operation that is done to your network, such as
        network instance instantiation or termination.'
    ListSolNetworkOperationsOutput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token to use to retrieve the next page of results. This
            value is `null` when there are no more results to return.
        networkOperations:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkOperationsResources'
          description: Lists network operation occurrences. Lifecycle management operations
            are deploy, update, or delete operations.
    ListSolNetworkOperationsResources:
      type: array
      items:
        $ref: '#/components/schemas/ListSolNetworkOperationsInfo'
    ListSolNetworkPackageInfo:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the individual network package.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsdInfoArn'
          description: Network package ARN.
        nsdOnboardingState:
          allOf:
          - $ref: '#/components/schemas/NsdOnboardingState'
          description: Onboarding state of the network service descriptor in the network
            package.
        nsdOperationalState:
          allOf:
          - $ref: '#/components/schemas/NsdOperationalState'
          description: Operational state of the network service descriptor in the
            network package.
        nsdUsageState:
          allOf:
          - $ref: '#/components/schemas/NsdUsageState'
          description: Usage state of the network service descriptor in the network
            package.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: ID of the network service descriptor on which the network package
            is based.
        nsdName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Name of the onboarded network service descriptor in the network
            package.
        nsdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Version of the onboarded network service descriptor in the
            network package.
        nsdDesigner:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Designer of the onboarded network service descriptor in the
            network package.
        nsdInvariantId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifies a network service descriptor in a version independent
            manner.
        vnfPkgIds:
          allOf:
          - $ref: '#/components/schemas/VnfPkgIdList'
          description: Identifies the function package for the function package descriptor
            referenced by the onboarded network package.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkPackageMetadata'
          description: The metadata of the network package.
      required:
      - id
      - arn
      - nsdOnboardingState
      - nsdOperationalState
      - nsdUsageState
      - metadata
      description: 'Details of a network package.


        A network package is a .zip file in CSAR (Cloud Service Archive) format defines
        the function packages you want to deploy and the Amazon Web Services infrastructure
        you want to deploy them on.'
    ListSolNetworkPackageMetadata:
      type: object
      properties:
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was created.
        lastModified:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the resource was last modified.
      required:
      - createdAt
      - lastModified
      description: 'Metadata related to a network package.


        A network package is a .zip file in CSAR (Cloud Service Archive) format defines
        the function packages you want to deploy and the Amazon Web Services infrastructure
        you want to deploy them on.'
    ListSolNetworkPackageResources:
      type: array
      items:
        $ref: '#/components/schemas/ListSolNetworkPackageInfo'
    ListSolNetworkPackagesInput:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to include in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token for the next page of results.
    ListSolNetworkPackagesOutput:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: The token to use to retrieve the next page of results. This
            value is `null` when there are no more results to return.
        networkPackages:
          allOf:
          - $ref: '#/components/schemas/ListSolNetworkPackageResources'
          description: Network packages. A network package is a .zip file in CSAR
            (Cloud Service Archive) format defines the function packages you want
            to deploy and the Amazon Web Services infrastructure you want to deploy
            them on.
      required:
      - networkPackages
    ListTagsForResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TNBResourceArn'
          description: Resource ARN.
      required:
      - resourceArn
    ListTagsForResourceOutput:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - tags
    ModifyVnfInfoMetadata:
      type: object
      properties:
        vnfInstanceId:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: The network function instance that was updated in the network
            instance.
        vnfConfigurableProperties:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The configurable properties used during update of the network
            function instance.
      required:
      - vnfInstanceId
      - vnfConfigurableProperties
      description: Metadata related to the configuration properties used during update
        of a specific network function in a network instance.
    NetworkArtifactMeta:
      type: object
      properties:
        overrides:
          allOf:
          - $ref: '#/components/schemas/OverrideList'
          description: Lists network package overrides.
      description: 'Metadata for network package artifacts.


        Artifacts are the contents of the package descriptor file and the state of
        the package.'
    NsInstanceArn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-b|aws-us-gov):tnb:([a-z]{2}(-(gov|isob|iso))?-(east|west|north|south|central){1,2}-[0-9]):\d{12}:(network-instance/ni-[a-f0-9]{17})$
    NsInstanceId:
      type: string
      pattern: ^ni-[a-f0-9]{17}$
    NsLcmOpOccArn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-b|aws-us-gov):tnb:([a-z]{2}(-(gov|isob|iso))?-(east|west|north|south|central){1,2}-[0-9]):\d{12}:(network-operation/no-[a-f0-9]{17})$
    NsLcmOpOccId:
      type: string
      pattern: ^no-[a-f0-9]{17}$
    NsLcmOperationState:
      type: string
      enum:
      - PROCESSING
      - COMPLETED
      - FAILED
      - CANCELLING
      - CANCELLED
    NsState:
      type: string
      enum:
      - INSTANTIATED
      - NOT_INSTANTIATED
      - UPDATED
      - IMPAIRED
      - UPDATE_FAILED
      - STOPPED
      - DELETED
      - INSTANTIATE_IN_PROGRESS
      - INTENT_TO_UPDATE_IN_PROGRESS
      - UPDATE_IN_PROGRESS
      - TERMINATE_IN_PROGRESS
    NsdId:
      type: string
      pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    NsdInfoArn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-b|aws-us-gov):tnb:([a-z]{2}(-(gov|isob|iso))?-(east|west|north|south|central){1,2}-[0-9]):\d{12}:(network-package/np-[a-f0-9]{17})$
    NsdInfoId:
      type: string
      pattern: ^np-[a-f0-9]{17}$
    NsdOnboardingState:
      type: string
      enum:
      - CREATED
      - ONBOARDED
      - ERROR
    NsdOperationalState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    NsdUsageState:
      type: string
      enum:
      - IN_USE
      - NOT_IN_USE
    OnboardingState:
      type: string
      enum:
      - CREATED
      - ONBOARDED
      - ERROR
    OperationalState:
      type: string
      enum:
      - ENABLED
      - DISABLED
    OverrideList:
      type: array
      items:
        $ref: '#/components/schemas/ToscaOverride'
    PackageContentType:
      type: string
      enum:
      - application/zip
    PaginationToken:
      type: string
    ProblemDetails:
      type: object
      properties:
        detail:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A human-readable explanation specific to this occurrence of
            the problem.
        title:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A human-readable title of the problem type.
      required:
      - detail
      description: Details related to problems with AWS TNB resources.
    PutSolFunctionPackageContentInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Function package content type.
        file:
          allOf:
          - $ref: '#/components/schemas/SensitiveBlob'
          description: Function package file.
      required:
      - vnfPkgId
      - file
    PutSolFunctionPackageContentMetadata:
      type: object
      properties:
        vnfd:
          $ref: '#/components/schemas/FunctionArtifactMeta'
      description: 'Update metadata in a function package.


        A function package is a .zip file in CSAR (Cloud Service Archive) format that
        contains a network function (an ETSI standard telecommunication application)
        and function package descriptor that uses the TOSCA standard to describe how
        the network functions should run on your network.'
    PutSolFunctionPackageContentOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        vnfdId:
          allOf:
          - $ref: '#/components/schemas/VnfdId'
          description: Function package descriptor ID.
        vnfProductName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function product name.
        vnfProvider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function provider.
        vnfdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package descriptor version.
        metadata:
          allOf:
          - $ref: '#/components/schemas/PutSolFunctionPackageContentMetadata'
          description: Function package metadata.
      required:
      - id
      - vnfdId
      - vnfProductName
      - vnfProvider
      - vnfdVersion
      - metadata
    PutSolNetworkPackageContentInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network service descriptor info ID.
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Network package content type.
        file:
          allOf:
          - $ref: '#/components/schemas/SensitiveBlob'
          description: Network package file.
      required:
      - nsdInfoId
      - file
    PutSolNetworkPackageContentMetadata:
      type: object
      properties:
        nsd:
          $ref: '#/components/schemas/NetworkArtifactMeta'
      description: 'Update metadata in a network package.


        A network package is a .zip file in CSAR (Cloud Service Archive) format defines
        the function packages you want to deploy and the Amazon Web Services infrastructure
        you want to deploy them on.'
    PutSolNetworkPackageContentOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network package ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsdInfoArn'
          description: Network package ARN.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/NsdId'
          description: Network service descriptor ID.
        nsdName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor name.
        nsdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor version.
        vnfPkgIds:
          allOf:
          - $ref: '#/components/schemas/VnfPkgIdList'
          description: Function package IDs.
        metadata:
          allOf:
          - $ref: '#/components/schemas/PutSolNetworkPackageContentMetadata'
          description: Network package metadata.
      required:
      - id
      - arn
      - nsdId
      - nsdName
      - nsdVersion
      - vnfPkgIds
      - metadata
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Request references a resource that doesn't exist.
    SensitiveBlob:
      type: string
      format: byte
      x-sensitive: true
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Service quotas have been exceeded.
    StringMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    TNBResourceArn:
      type: string
      pattern: ^arn:aws:tnb:[a-z0-9-]+:[^:]*:.*$
    TagKey:
      type: string
      pattern: ^(?!aws:).{1,128}$
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TNBResourceArn'
          description: Resource ARN.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. You can use
            tags to search and filter your resources or track your Amazon Web Services
            costs.
      required:
      - resourceArn
      - tags
    TagResourceOutput:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TaskStatus:
      type: string
      enum:
      - SCHEDULED
      - STARTED
      - IN_PROGRESS
      - COMPLETED
      - ERROR
      - SKIPPED
      - CANCELLED
    TerminateSolNetworkInstanceInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
      required:
      - nsInstanceId
    TerminateSolNetworkInstanceOutput:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Exception caused by throttling.
    ToscaOverride:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Name of the TOSCA override.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Default value for the override.
      description: Overrides of the TOSCA node.
    UntagResourceInput:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TNBResourceArn'
          description: Resource ARN.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: Tag keys.
      required:
      - resourceArn
      - tagKeys
    UntagResourceOutput:
      type: object
      properties: {}
    UpdateNsMetadata:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: The network service descriptor used for updating the network
            instance.
        additionalParamsForNs:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: The configurable properties used during update.
      required:
      - nsdInfoId
      description: Metadata related to the configuration properties used during update
        of a network instance.
    UpdateSolFunctionPackageInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: ID of the function package.
        operationalState:
          allOf:
          - $ref: '#/components/schemas/OperationalState'
          description: Operational state of the function package.
      required:
      - vnfPkgId
      - operationalState
    UpdateSolFunctionPackageOutput:
      type: object
      properties:
        operationalState:
          allOf:
          - $ref: '#/components/schemas/OperationalState'
          description: Operational state of the function package.
      required:
      - operationalState
    UpdateSolNetworkInstanceInput:
      type: object
      properties:
        nsInstanceId:
          allOf:
          - $ref: '#/components/schemas/NsInstanceId'
          description: ID of the network instance.
        updateType:
          allOf:
          - $ref: '#/components/schemas/UpdateSolNetworkType'
          description: "The type of update.\n\n  * Use the `MODIFY_VNF_INFORMATION`\
            \ update type, to update a specific network function configuration, in\
            \ the network instance.\n\n  * Use the `UPDATE_NS` update type, to update\
            \ the network instance to a new network service descriptor."
        modifyVnfInfoData:
          allOf:
          - $ref: '#/components/schemas/UpdateSolNetworkModify'
          description: 'Identifies the network function information parameters and/or
            the configurable properties of the network function to be modified.


            Include this property only if the update type is `MODIFY_VNF_INFORMATION`.'
        updateNs:
          allOf:
          - $ref: '#/components/schemas/UpdateSolNetworkServiceData'
          description: 'Identifies the network service descriptor and the configurable
            properties of the descriptor, to be used for the update.


            Include this property only if the update type is `UPDATE_NS`.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
      required:
      - nsInstanceId
      - updateType
    UpdateSolNetworkInstanceOutput:
      type: object
      properties:
        nsLcmOpOccId:
          allOf:
          - $ref: '#/components/schemas/NsLcmOpOccId'
          description: The identifier of the network operation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A tag is a label that you assign to an Amazon Web Services
            resource. Each tag consists of a key and an optional value. When you use
            this API, the tags are only applied to the network operation that is created.
            These tags are not applied to the network instance. Use tags to search
            and filter your resources or track your Amazon Web Services costs.
    UpdateSolNetworkModify:
      type: object
      properties:
        vnfInstanceId:
          allOf:
          - $ref: '#/components/schemas/VnfInstanceId'
          description: 'ID of the network function instance.


            A network function instance is a function in a function package .'
        vnfConfigurableProperties:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Provides values for the configurable properties declared in
            the function package descriptor.
      required:
      - vnfInstanceId
      - vnfConfigurableProperties
      description: 'Information parameters and/or the configurable properties for
        a network function.


        A network function instance is a function in a function package .'
    UpdateSolNetworkPackageInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor in the network package.
        nsdOperationalState:
          allOf:
          - $ref: '#/components/schemas/NsdOperationalState'
          description: Operational state of the network service descriptor in the
            network package.
      required:
      - nsdInfoId
      - nsdOperationalState
    UpdateSolNetworkPackageOutput:
      type: object
      properties:
        nsdOperationalState:
          allOf:
          - $ref: '#/components/schemas/NsdOperationalState'
          description: Operational state of the network service descriptor in the
            network package.
      required:
      - nsdOperationalState
    UpdateSolNetworkServiceData:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: ID of the network service descriptor.
        additionalParamsForNs:
          allOf:
          - $ref: '#/components/schemas/Document'
          description: Values for the configurable properties declared in the network
            service descriptor.
      required:
      - nsdInfoId
      description: Information parameters and/or the configurable properties for a
        network descriptor used for update.
    UpdateSolNetworkType:
      type: string
      enum:
      - MODIFY_VNF_INFORMATION
      - UPDATE_NS
    UsageState:
      type: string
      enum:
      - IN_USE
      - NOT_IN_USE
    ValidateSolFunctionPackageContentInput:
      type: object
      properties:
        vnfPkgId:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Function package content type.
        file:
          allOf:
          - $ref: '#/components/schemas/SensitiveBlob'
          description: Function package file.
      required:
      - vnfPkgId
      - file
    ValidateSolFunctionPackageContentMetadata:
      type: object
      properties:
        vnfd:
          $ref: '#/components/schemas/FunctionArtifactMeta'
      description: 'Validates function package content metadata.


        A function package is a .zip file in CSAR (Cloud Service Archive) format that
        contains a network function (an ETSI standard telecommunication application)
        and function package descriptor that uses the TOSCA standard to describe how
        the network functions should run on your network.'
    ValidateSolFunctionPackageContentOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/VnfPkgId'
          description: Function package ID.
        vnfdId:
          allOf:
          - $ref: '#/components/schemas/VnfdId'
          description: Function package descriptor ID.
        vnfProductName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function product name.
        vnfProvider:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network function provider.
        vnfdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Function package descriptor version.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ValidateSolFunctionPackageContentMetadata'
          description: Function package metadata.
      required:
      - id
      - vnfdId
      - vnfProductName
      - vnfProvider
      - vnfdVersion
      - metadata
    ValidateSolNetworkPackageContentInput:
      type: object
      properties:
        nsdInfoId:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network service descriptor file.
        contentType:
          allOf:
          - $ref: '#/components/schemas/PackageContentType'
          description: Network package content type.
        file:
          allOf:
          - $ref: '#/components/schemas/SensitiveBlob'
          description: Network package file.
      required:
      - nsdInfoId
      - file
    ValidateSolNetworkPackageContentMetadata:
      type: object
      properties:
        nsd:
          $ref: '#/components/schemas/NetworkArtifactMeta'
      description: 'Validates network package content metadata.


        A network package is a .zip file in CSAR (Cloud Service Archive) format defines
        the function packages you want to deploy and the Amazon Web Services infrastructure
        you want to deploy them on.'
    ValidateSolNetworkPackageContentOutput:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/NsdInfoId'
          description: Network package ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/NsdInfoArn'
          description: Network package ARN.
        nsdId:
          allOf:
          - $ref: '#/components/schemas/NsdId'
          description: Network service descriptor ID.
        nsdName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor name.
        nsdVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Network service descriptor version.
        vnfPkgIds:
          allOf:
          - $ref: '#/components/schemas/VnfPkgIdList'
          description: Function package IDs.
        metadata:
          allOf:
          - $ref: '#/components/schemas/ValidateSolNetworkPackageContentMetadata'
          description: Network package metadata.
      required:
      - id
      - arn
      - nsdId
      - nsdName
      - nsdVersion
      - vnfPkgIds
      - metadata
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: Unable to process the request because the client provided input
        failed to satisfy request constraints.
    VnfInstanceArn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-b|aws-us-gov):tnb:([a-z]{2}(-(gov|isob|iso))?-(east|west|north|south|central){1,2}-[0-9]):\d{12}:(function-instance/fi-[a-f0-9]{17})$
    VnfInstanceId:
      type: string
      pattern: ^fi-[a-f0-9]{17}$
    VnfInstantiationState:
      type: string
      enum:
      - INSTANTIATED
      - NOT_INSTANTIATED
    VnfOperationalState:
      type: string
      enum:
      - STARTED
      - STOPPED
    VnfPkgArn:
      type: string
      pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-b|aws-us-gov):tnb:([a-z]{2}(-(gov|isob|iso))?-(east|west|north|south|central){1,2}-[0-9]):\d{12}:(function-package/fp-[a-f0-9]{17})$
    VnfPkgId:
      type: string
      pattern: ^fp-[a-f0-9]{17}$
    VnfPkgIdList:
      type: array
      items:
        $ref: '#/components/schemas/VnfPkgId'
    VnfdId:
      type: string
      pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
