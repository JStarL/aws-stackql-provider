openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: amp
  x-aws-serviceName: amp
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2020-08-01'
  title: Amazon Prometheus Service
  description: |-
    Amazon Managed Service for Prometheus is a serverless, Prometheus-compatible monitoring service for container metrics that makes it easier to securely monitor container environments at scale. With Amazon Managed Service for Prometheus, you can use the same open-source Prometheus data model and query language that you use today to monitor the performance of your containerized workloads, and also enjoy improved scalability, availability, and security without having to manage the underlying infrastructure.

    For more information about Amazon Managed Service for Prometheus, see the [Amazon Managed Service for Prometheus](https://docs.aws.amazon.com/prometheus/latest/userguide/what-is-Amazon-Managed-Service-Prometheus.html) User Guide.

    Amazon Managed Service for Prometheus includes two APIs.

      * Use the Amazon Web Services API described in this guide to manage Amazon Managed Service for Prometheus resources, such as workspaces, rule groups, and alert managers.

      * Use the [Prometheus-compatible API](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-APIReference.html#AMP-APIReference-Prometheus-Compatible-Apis) to work within your Prometheus workspace.
servers:
- description: The Amazon Prometheus Service regional endpoint
  url: https://aps.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /workspaces/{workspaceId}/alertmanager/definition:
    post:
      operationId: CreateAlertManagerDefinition
      description: |-
        The `CreateAlertManagerDefinition` operation creates the alert manager definition in a workspace. If a workspace already has an alert manager definition, don't use this operation to update it. Instead, use `PutAlertManagerDefinition`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/AlertManagerDefinitionData'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteAlertManagerDefinition
      description: |-
        Deletes the alert manager definition from a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeAlertManagerDefinition
      description: |-
        Retrieves the full information about the alert manager definition for a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutAlertManagerDefinition
      description: |-
        Updates an existing alert manager definition in a workspace. If the workspace does not already have an alert manager definition, don't use this operation to create it. Instead, use `CreateAlertManagerDefinition`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/AlertManagerDefinitionData'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/logging:
    post:
      operationId: CreateLoggingConfiguration
      description: |-
        The `CreateLoggingConfiguration` operation creates a logging configuration for the workspace. Use this operation to set the CloudWatch log group to which the logs will be published to.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                logGroupArn:
                  $ref: '#/components/schemas/LogGroupArn'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteLoggingConfiguration
      description: |-
        Deletes the logging configuration for a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeLoggingConfiguration
      description: |-
        Returns complete information about the current logging configuration of the workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateLoggingConfiguration
      description: |-
        Updates the log group ARN or the workspace ID of the current logging configuration.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                logGroupArn:
                  $ref: '#/components/schemas/LogGroupArn'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/rulegroupsnamespaces:
    post:
      operationId: CreateRuleGroupsNamespace
      description: |-
        The `CreateRuleGroupsNamespace` operation creates a rule groups namespace within a workspace. A rule groups namespace is associated with exactly one rules file. A workspace can have multiple rule groups namespaces.

        Use this operation only to create new rule groups namespaces. To update an existing rule groups namespace, use `PutRuleGroupsNamespace`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RuleGroupsNamespaceName'
                data:
                  $ref: '#/components/schemas/RuleGroupsNamespaceData'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListRuleGroupsNamespaces
      description: |-
        Returns a list of rule groups namespaces in a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RuleGroupsNamespaceName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /scrapers:
    post:
      operationId: CreateScraper
      description: |-
        The `CreateScraper` operation creates a scraper to collect metrics. A scraper pulls metrics from Prometheus-compatible sources within an Amazon EKS cluster, and sends them to your Amazon Managed Service for Prometheus workspace. Scrapers are flexible, and can be configured to control what metrics are collected, the frequency of collection, what transformations are applied to the metrics, and more.

        An IAM role will be created for you that Amazon Managed Service for Prometheus uses to access the metrics in your cluster. You must configure this role with a policy that allows it to scrape metrics from your cluster. For more information, see [Configuring your Amazon EKS cluster](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-eks-setup) in the _Amazon Managed Service for Prometheus User Guide_.

        The `scrapeConfiguration` parameter contains the base-64 encoded YAML configuration for the scraper.

        For more information about collectors, including what metrics are collected, and how to configure the scraper, see [Using an Amazon Web Services managed collector](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html) in the _Amazon Managed Service for Prometheus User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/ScraperAlias'
                scrapeConfiguration:
                  $ref: '#/components/schemas/ScrapeConfiguration'
                source:
                  $ref: '#/components/schemas/Source'
                destination:
                  $ref: '#/components/schemas/Destination'
                roleConfiguration:
                  $ref: '#/components/schemas/RoleConfiguration'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListScrapers
      description: |-
        The `ListScrapers` operation lists all of the scrapers in your account. This includes scrapers being created or deleted. You can optionally filter the returned list.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ScraperFilters'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces:
    post:
      operationId: CreateWorkspace
      description: |-
        Creates a Prometheus workspace. A workspace is a logical space dedicated to the storage and querying of Prometheus metrics. You can have one or more workspaces in each Region in your account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/WorkspaceAlias'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
                tags:
                  $ref: '#/components/schemas/TagMap'
                kmsKeyArn:
                  $ref: '#/components/schemas/KmsKeyArn'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListWorkspaces
      description: |-
        Lists all of the Amazon Managed Service for Prometheus workspaces in your account. This includes workspaces being created or deleted.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PaginationToken'
      - name: alias
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkspaceAlias'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/rulegroupsnamespaces/{name}:
    delete:
      operationId: DeleteRuleGroupsNamespace
      description: |-
        Deletes one rule groups namespace and its associated rule groups definition.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleGroupsNamespaceName'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeRuleGroupsNamespace
      description: |-
        Returns complete information about one rule groups namespace. To retrieve a list of rule groups namespaces, use `ListRuleGroupsNamespaces`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleGroupsNamespaceName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutRuleGroupsNamespace
      description: |-
        Updates an existing rule groups namespace within a workspace. A rule groups namespace is associated with exactly one rules file. A workspace can have multiple rule groups namespaces.

        Use this operation only to update existing rule groups namespaces. To create a new rule groups namespace, use `CreateRuleGroupsNamespace`.

        You can't use this operation to add tags to an existing rule groups namespace. Instead, use `TagResource`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RuleGroupsNamespaceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/RuleGroupsNamespaceData'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /scrapers/{scraperId}:
    delete:
      operationId: DeleteScraper
      description: |-
        The `DeleteScraper` operation deletes one scraper, and stops any metrics collection that the scraper performs.
      parameters:
      - name: scraperId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScraperId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeScraper
      description: |-
        The `DescribeScraper` operation displays information about an existing scraper.
      parameters:
      - name: scraperId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScraperId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateScraper
      description: |-
        Updates an existing scraper.

        You can't use this function to update the source from which the scraper is collecting metrics. To change the source, delete the scraper and create a new one.
      parameters:
      - name: scraperId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ScraperId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/ScraperAlias'
                scrapeConfiguration:
                  $ref: '#/components/schemas/ScrapeConfiguration'
                destination:
                  $ref: '#/components/schemas/Destination'
                roleConfiguration:
                  $ref: '#/components/schemas/RoleConfiguration'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}:
    delete:
      operationId: DeleteWorkspace
      description: |-
        Deletes an existing workspace.

        When you delete a workspace, the data that has been ingested into it is not immediately deleted. It will be permanently deleted within one month.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      - name: clientToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: DescribeWorkspace
      description: |-
        Returns information about an existing workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/configuration:
    get:
      operationId: DescribeWorkspaceConfiguration
      description: |-
        Use this operation to return information about the configuration of a workspace. The configuration details returned include workspace configuration status, label set limits, and retention period.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateWorkspaceConfiguration
      description: |-
        Use this operation to create or update the label sets, label set limits, and retention period of a workspace.

        You must specify at least one of `limitsPerLabelSet` or `retentionPeriodInDays` for the request to be valid.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
                limitsPerLabelSet:
                  $ref: '#/components/schemas/LimitsPerLabelSetList'
                retentionPeriodInDays:
                  $ref: '#/components/schemas/Integer'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /scraperconfiguration:
    get:
      operationId: GetDefaultScraperConfiguration
      description: |-
        The `GetDefaultScraperConfiguration` operation returns the default scraper configuration used when Amazon EKS creates a scraper for you.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        The `ListTagsForResource` operation returns the tags that are associated with an Amazon Managed Service for Prometheus resource. Currently, the only resources that can be tagged are scrapers, workspaces, and rule groups namespaces.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        The `TagResource` operation associates tags with an Amazon Managed Service for Prometheus resource. The only resources that can be tagged are rule groups namespaces, scrapers, and workspaces.

        If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag. To remove a tag, use `UntagResource`.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes the specified tags from an Amazon Managed Service for Prometheus resource. The only resources that can be tagged are rule groups namespaces, scrapers, and workspaces.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/alias:
    post:
      operationId: UpdateWorkspaceAlias
      description: |-
        Updates the alias of an existing workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkspaceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  $ref: '#/components/schemas/WorkspaceAlias'
                clientToken:
                  $ref: '#/components/schemas/IdempotencyToken'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request would cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred during the processing of the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The request references a resources that doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Completing the request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an Amazon Web Services service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
      required:
      - message
      description: You do not have sufficient access to perform this action.
    AlertManagerDefinitionData:
      type: string
      format: byte
      description: "<p>The base-64 encoded blob that is alert manager definition.</p>\n\
        \         <p>For details about the alert manager definition, see <a href=\"\
        https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-AlertManagerDefinitionData.html\"\
        >AlertManagedDefinitionData</a>.</p>"
    AlertManagerDefinitionDescription:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionStatus'
          description: A structure that displays the current status of the alert manager
            definition..
        data:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionData'
          description: 'The actual alert manager definition.


            For details about the alert manager definition, see [AlertManagedDefinitionData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-AlertManagerDefinitionData.html).'
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the alert manager definition was created.
        modifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the alert manager definition was most
            recently changed.
      required:
      - status
      - data
      - createdAt
      - modifiedAt
      description: The details of an alert manager definition. It is the configuration
        for the alert manager, including information about receivers for routing alerts.
    AlertManagerDefinitionStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionStatusCode'
          description: The current status of the alert manager.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If there is a failure, the reason for the failure.
      required:
      - statusCode
      description: The status of the alert manager.
    AlertManagerDefinitionStatusCode:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETING
      - CREATION_FAILED
      - UPDATE_FAILED
    AmpConfiguration:
      type: object
      properties:
        workspaceArn:
          allOf:
          - $ref: '#/components/schemas/WorkspaceArn'
          description: ARN of the Amazon Managed Service for Prometheus workspace.
      required:
      - workspaceArn
      description: The `AmpConfiguration` structure defines the Amazon Managed Service
        for Prometheus instance a scraper should send metrics to.
    ClusterArn:
      type: string
      pattern: ^arn:aws[-a-z]*:eks:[-a-z0-9]+:[0-9]{12}:cluster/.+$
    ConflictException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifier of the resource affected.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Type of the resource affected.
      required:
      - message
      - resourceId
      - resourceType
      description: The request would cause an inconsistent state.
    CreateAlertManagerDefinitionRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to add the alert manager definition
            to.
        data:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionData'
          description: 'The alert manager definition to add. A base64-encoded version
            of the YAML alert manager definition file.


            For details about the alert manager definition, see [AlertManagedDefinitionData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-AlertManagerDefinitionData.html).'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - data
      description: Represents the input of a `CreateAlertManagerDefinition` operation.
    CreateAlertManagerDefinitionResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionStatus'
          description: A structure that displays the current status of the alert manager
            definition.
      required:
      - status
      description: Represents the output of a `CreateAlertManagerDefinition` operation.
    CreateLoggingConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to create the logging configuration
            for.
        logGroupArn:
          allOf:
          - $ref: '#/components/schemas/LogGroupArn'
          description: The ARN of the CloudWatch log group to which the vended log
            data will be published. This log group must exist prior to calling this
            operation.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - logGroupArn
      description: Represents the input of a `CreateLoggingConfiguration` operation.
    CreateLoggingConfigurationResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationStatus'
          description: A structure that displays the current status of the logging
            configuration.
      required:
      - status
      description: Represents the output of a `CreateLoggingConfiguration` operation.
    CreateRuleGroupsNamespaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to add the rule groups namespace.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name for the new rule groups namespace.
        data:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceData'
          description: 'The rules file to use in the new namespace.


            Contains the base64-encoded version of the YAML rules file.


            For details about the rule groups namespace structure, see [RuleGroupsNamespaceData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html).'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values to associate with the rule
            groups namespace.
      required:
      - workspaceId
      - name
      - data
      description: Represents the input of a `CreateRuleGroupsNamespace` operation.
    CreateRuleGroupsNamespaceResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the new rule groups namespace.
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceArn'
          description: The Amazon Resource Name (ARN) of the new rule groups namespace.
        status:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceStatus'
          description: A structure that returns the current status of the rule groups
            namespace.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            namespace.
      required:
      - name
      - arn
      - status
      description: Represents the output of a `CreateRuleGroupsNamespace` operation.
    CreateScraperRequest:
      type: object
      properties:
        alias:
          allOf:
          - $ref: '#/components/schemas/ScraperAlias'
          description: (optional) An alias to associate with the scraper. This is
            for your use, and does not need to be unique.
        scrapeConfiguration:
          allOf:
          - $ref: '#/components/schemas/ScrapeConfiguration'
          description: The configuration file to use in the new scraper. For more
            information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration)
            in the _Amazon Managed Service for Prometheus User Guide_.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The Amazon EKS cluster from which the scraper will collect
            metrics.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The Amazon Managed Service for Prometheus workspace to send
            metrics to.
        roleConfiguration:
          allOf:
          - $ref: '#/components/schemas/RoleConfiguration'
          description: Use this structure to enable cross-account access, so that
            you can use a target account to access Prometheus metrics from source
            accounts.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: (Optional) A unique, case-sensitive identifier that you can
            provide to ensure the idempotency of the request.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: (Optional) The list of tag keys and values to associate with
            the scraper.
      required:
      - scrapeConfiguration
      - source
      - destination
      description: Represents the input of a `CreateScraper` operation.
    CreateScraperResponse:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the new scraper.
        arn:
          allOf:
          - $ref: '#/components/schemas/ScraperArn'
          description: The Amazon Resource Name (ARN) of the new scraper.
        status:
          allOf:
          - $ref: '#/components/schemas/ScraperStatus'
          description: A structure that displays the current status of the scraper.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            scraper.
      required:
      - scraperId
      - arn
      - status
      description: Represents the output of a `CreateScraper` operation.
    CreateWorkspaceRequest:
      type: object
      properties:
        alias:
          allOf:
          - $ref: '#/components/schemas/WorkspaceAlias'
          description: 'An alias that you assign to this workspace to help you identify
            it. It does not need to be unique.


            Blank spaces at the beginning or end of the alias that you specify will
            be trimmed from the value used.'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values to associate with the workspace.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: (optional) The ARN for a customer managed KMS key to use for
            encrypting data within your workspace. For more information about using
            your own key in your workspace, see [Encryption at rest](https://docs.aws.amazon.com/prometheus/latest/userguide/encryption-at-rest-Amazon-Service-Prometheus.html)
            in the _Amazon Managed Service for Prometheus User Guide_.
      description: Represents the input of a `CreateWorkspace` operation.
    CreateWorkspaceResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The unique ID for the new workspace.
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkspaceArn'
          description: The ARN for the new workspace.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkspaceStatus'
          description: The current status of the new workspace. Immediately after
            you create the workspace, the status is usually `CREATING`.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            workspace.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: (optional) If the workspace was created with a customer managed
            KMS key, the ARN for the key used.
      required:
      - workspaceId
      - arn
      - status
      description: Represents the output of a `CreateWorkspace` operation.
    DeleteAlertManagerDefinitionRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to delete the alert manager definition
            from.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      description: Represents the input of a `DeleteAlertManagerDefinition` operation.
    DeleteLoggingConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace containing the logging configuration
            to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      description: Represents the input of a `DeleteLoggingConfiguration` operation.
    DeleteRuleGroupsNamespaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace containing the rule groups namespace
            and definition to delete.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - name
      description: Represents the input of a `DeleteRuleGroupsNamespace` operation.
    DeleteScraperRequest:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: (Optional) A unique, case-sensitive identifier that you can
            provide to ensure the idempotency of the request.
      required:
      - scraperId
      description: Represents the input of a `DeleteScraper` operation.
    DeleteScraperResponse:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper to delete.
        status:
          allOf:
          - $ref: '#/components/schemas/ScraperStatus'
          description: The current status of the scraper.
      required:
      - scraperId
      - status
      description: Represents the output of a `DeleteScraper` operation.
    DeleteWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to delete.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      description: Represents the input of a `DeleteWorkspace` operation.
    DescribeAlertManagerDefinitionRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to retrieve the alert manager definition
            from.
      required:
      - workspaceId
      description: Represents the input of a `DescribeAlertManagerDefinition` operation.
    DescribeAlertManagerDefinitionResponse:
      type: object
      properties:
        alertManagerDefinition:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionDescription'
          description: The alert manager definition.
      required:
      - alertManagerDefinition
      description: Represents the output of a `DescribeAlertManagerDefinition` operation.
    DescribeLoggingConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to describe the logging configuration
            for.
      required:
      - workspaceId
      description: Represents the input of a `DescribeLoggingConfiguration` operation.
    DescribeLoggingConfigurationResponse:
      type: object
      properties:
        loggingConfiguration:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationMetadata'
          description: A structure that displays the information about the logging
            configuration.
      required:
      - loggingConfiguration
      description: Represents the output of a `DescribeLoggingConfiguration` operation.
    DescribeRuleGroupsNamespaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace containing the rule groups namespace.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace that you want information
            for.
      required:
      - workspaceId
      - name
      description: Represents the input of a `DescribeRuleGroupsNamespace` operation.
    DescribeRuleGroupsNamespaceResponse:
      type: object
      properties:
        ruleGroupsNamespace:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceDescription'
          description: The information about the rule groups namespace.
      required:
      - ruleGroupsNamespace
      description: Represents the output of a `DescribeRuleGroupsNamespace` operation.
    DescribeScraperRequest:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper to describe.
      required:
      - scraperId
      description: Represents the input of a `DescribeScraper` operation.
    DescribeScraperResponse:
      type: object
      properties:
        scraper:
          allOf:
          - $ref: '#/components/schemas/ScraperDescription'
          description: Contains details about the scraper.
      required:
      - scraper
      description: Represents the output of a `DescribeScraper` operation.
    DescribeWorkspaceConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace that you want to retrieve information
            for. To find the IDs of your workspaces, use the [ListWorkspaces](https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm)
            operation.
      required:
      - workspaceId
    DescribeWorkspaceConfigurationResponse:
      type: object
      properties:
        workspaceConfiguration:
          allOf:
          - $ref: '#/components/schemas/WorkspaceConfigurationDescription'
          description: This structure contains the information about the workspace
            configuration.
      required:
      - workspaceConfiguration
    DescribeWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to describe.
      required:
      - workspaceId
      description: Represents the input of a `DescribeWorkspace` operation.
    DescribeWorkspaceResponse:
      type: object
      properties:
        workspace:
          allOf:
          - $ref: '#/components/schemas/WorkspaceDescription'
          description: A structure that contains details about the workspace.
      required:
      - workspace
      description: Represents the output of a `DescribeWorkspace` operation.
    Destination:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/AmpConfiguration'
        description: |-
          The Amazon Managed Service for Prometheus workspace to send metrics to.
      description: |-
        Where to send the metrics from a scraper.
    EksConfiguration:
      type: object
      properties:
        clusterArn:
          allOf:
          - $ref: '#/components/schemas/ClusterArn'
          description: ARN of the Amazon EKS cluster.
        securityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIds'
          description: A list of the security group IDs for the Amazon EKS cluster
            VPC configuration.
        subnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIds'
          description: A list of subnet IDs for the Amazon EKS cluster VPC configuration.
      required:
      - clusterArn
      - subnetIds
      description: The `EksConfiguration` structure describes the connection to the
        Amazon EKS cluster from which a scraper collects metrics.
    FilterKey:
      type: string
      minLength: 1
      maxLength: 256
    FilterValue:
      type: string
      minLength: 1
      maxLength: 256
    FilterValues:
      type: array
      items:
        $ref: '#/components/schemas/FilterValue'
      description: <p>A list of scraper filter values.</p>
    GetDefaultScraperConfigurationRequest:
      type: object
      properties: {}
      description: Represents the input of a `GetDefaultScraperConfiguration` operation.
    GetDefaultScraperConfigurationResponse:
      type: object
      properties:
        configuration:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: The configuration file. Base 64 encoded. For more information,
            see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration)in
            the _Amazon Managed Service for Prometheus User Guide_.
      required:
      - configuration
      description: Represents the output of a `GetDefaultScraperConfiguration` operation.
    IamRoleArn:
      type: string
      pattern: ^arn:aws[-a-z]*:iam::[0-9]{12}:role/.+$
    IdempotencyToken:
      type: string
      pattern: ^[!-~]+$
      minLength: 1
      maxLength: 64
    InternalServerException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Advice to clients on when the call can be safely retried.
      required:
      - message
      description: An unexpected error occurred during the processing of the request.
    KmsKeyArn:
      type: string
      pattern: ^arn:aws[-a-z]*:kms:[-a-z0-9]+:[0-9]{12}:key/[-a-f0-9]+$
      minLength: 20
      maxLength: 2048
    LabelName:
      type: string
      pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
      minLength: 1
    LabelSet:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LabelValue'
    LabelValue:
      type: string
      minLength: 1
    LimitsPerLabelSet:
      type: object
      properties:
        limits:
          allOf:
          - $ref: '#/components/schemas/LimitsPerLabelSetEntry'
          description: This structure contains the information about the limits that
            apply to time series that match this label set.
        labelSet:
          allOf:
          - $ref: '#/components/schemas/LabelSet'
          description: 'This defines one label set that will have an enforced ingestion
            limit.


            Label values accept ASCII characters and must contain at least one character
            that isn''t whitespace. ASCII control characters are not accepted. If
            the label name is metric name label `___name_ __`, then the _metric_ part
            of the name must conform to the following pattern: `[a-zA-Z_:][a-zA-Z0-9_:]*`'
      required:
      - limits
      - labelSet
      description: 'This structure defines one label set used to enforce ingestion
        limits for the workspace, and defines the limit for that label set.


        A label set is a unique combination of label-value pairs. Use them to control
        time series ingestion limits and to monitor usage by specific label groups.
        Example label sets might be `team:finance` or `env:prod`'
    LimitsPerLabelSetEntry:
      type: object
      properties:
        maxSeries:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: 'The maximum number of active series that can be ingested that
            match this label set.


            Setting this to 0 causes no label set limit to be enforced, but it does
            cause Amazon Managed Service for Prometheus to vend label set metrics
            to CloudWatch'
      description: This structure contains the information about the limits that apply
        to time series that match one label set.
    LimitsPerLabelSetList:
      type: array
      items:
        $ref: '#/components/schemas/LimitsPerLabelSet'
    ListRuleGroupsNamespacesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace containing the rule groups namespaces.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: Use this parameter to filter the rule groups namespaces that
            are returned. Only the namespaces with names that begin with the value
            that you specify are returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'The token for the next set of items to return. You receive
            this token from a previous call, and use it to get the next page of results.
            The other parameters must be the same as the initial call.


            For example, if your initial request has `maxResults` of 10, and there
            are 12 rule groups namespaces to return, then your initial request will
            return 10 and a `nextToken`. Using the next token in a subsequent call
            will return the remaining 2 namespaces.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return. The default is 100.
      required:
      - workspaceId
      description: Represents the input of a `ListRuleGroupsNamespaces` operation.
    ListRuleGroupsNamespacesResponse:
      type: object
      properties:
        ruleGroupsNamespaces:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceSummaryList'
          description: The returned list of rule groups namespaces.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token indicating that there are more results to retrieve.
            You can use this token as part of your next `ListRuleGroupsNamespaces`
            request to retrieve those results.
      required:
      - ruleGroupsNamespaces
      description: Represents the output of a `ListRuleGroupsNamespaces` operation.
    ListScrapersRequest:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/ScraperFilters'
          description: '(Optional) A list of key-value pairs to filter the list of
            scrapers returned. Keys include `status`, `sourceArn`, `destinationArn`,
            and `alias`.


            Filters on the same key are `OR`''d together, and filters on different
            keys are `AND`''d together. For example, `status=ACTIVE&status=CREATING&alias=Test`,
            will return all scrapers that have the alias Test, and are either in status
            ACTIVE or CREATING.


            To find all active scrapers that are sending metrics to a specific Amazon
            Managed Service for Prometheus workspace, you would use the ARN of the
            workspace in a query:


            `status=ACTIVE&destinationArn=arn:aws:aps:us-east-1:123456789012:workspace/ws-example1-1234-abcd-56ef-123456789012`


            If this is included, it filters the results to only the scrapers that
            match the filter.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: (Optional) The token for the next set of items to return. (You
            received this token from a previous call.)
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'Optional) The maximum number of scrapers to return in one
            `ListScrapers` operation. The range is 1-1000.


            If you omit this parameter, the default of 100 is used.'
      description: Represents the input of a `ListScrapers` operation.
    ListScrapersResponse:
      type: object
      properties:
        scrapers:
          allOf:
          - $ref: '#/components/schemas/ScraperSummaryList'
          description: A list of `ScraperSummary` structures giving information about
            scrapers in the account that match the filters provided.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token indicating that there are more results to retrieve.
            You can use this token as part of your next `ListScrapers` operation to
            retrieve those results.
      required:
      - scrapers
      description: Represents the output of a `ListScrapers` operation.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource to list tages for. Must be a workspace,
            scraper, or rule groups namespace resource.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values associated with the resource.
    ListWorkspacesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: 'The token for the next set of items to return. You receive
            this token from a previous call, and use it to get the next page of results.
            The other parameters must be the same as the initial call.


            For example, if your initial request has `maxResults` of 10, and there
            are 12 workspaces to return, then your initial request will return 10
            and a `nextToken`. Using the next token in a subsequent call will return
            the remaining 2 workspaces.'
        alias:
          allOf:
          - $ref: '#/components/schemas/WorkspaceAlias'
          description: 'If this is included, it filters the results to only the workspaces
            with names that start with the value that you specify here.


            Amazon Managed Service for Prometheus will automatically strip any blank
            spaces from the beginning and end of the alias that you specify.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of workspaces to return per request. The
            default is 100.
      description: Represents the input of a `ListWorkspaces` operation.
    ListWorkspacesResponse:
      type: object
      properties:
        workspaces:
          allOf:
          - $ref: '#/components/schemas/WorkspaceSummaryList'
          description: An array of `WorkspaceSummary` structures containing information
            about the workspaces requested.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          description: A token indicating that there are more results to retrieve.
            You can use this token as part of your next `ListWorkspaces` request to
            retrieve those results.
      required:
      - workspaces
      description: Represents the output of a `ListWorkspaces` operation.
    LogGroupArn:
      type: string
      pattern: ^arn:aws[-a-z]*:logs:[-a-z0-9]+:[0-9]{12}:log-group:[A-Za-z0-9\.\-\_\#/]{1,512}\:\*$
    LoggingConfigurationMetadata:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationStatus'
          description: The current status of the logging configuration.
        workspace:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace the logging configuration is for.
        logGroupArn:
          allOf:
          - $ref: '#/components/schemas/LogGroupArn'
          description: The ARN of the CloudWatch log group to which the vended log
            data will be published.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the logging configuration was created.
        modifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the logging configuration was most recently
            changed.
      required:
      - status
      - workspace
      - logGroupArn
      - createdAt
      - modifiedAt
      description: Contains information about the logging configuration for the workspace.
    LoggingConfigurationStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationStatusCode'
          description: The current status of the logging configuration.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If failed, the reason for the failure.
      required:
      - statusCode
      description: The status of the logging configuration.
    LoggingConfigurationStatusCode:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETING
      - CREATION_FAILED
      - UPDATE_FAILED
    PaginationToken:
      type: string
      maxLength: 1000
    PutAlertManagerDefinitionRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to update the alert manager definition
            in.
        data:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionData'
          description: 'The alert manager definition to use. A base64-encoded version
            of the YAML alert manager definition file.


            For details about the alert manager definition, see [AlertManagedDefinitionData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-AlertManagerDefinitionData.html).'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - data
      description: Represents the input of a `PutAlertManagerDefinition` operation.
    PutAlertManagerDefinitionResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/AlertManagerDefinitionStatus'
          description: A structure that returns the current status of the alert manager
            definition.
      required:
      - status
      description: Represents the output of a `PutAlertManagerDefinition` operation.
    PutRuleGroupsNamespaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace where you are updating the rule groups
            namespace.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace that you are updating.
        data:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceData'
          description: 'The new rules file to use in the namespace. A base64-encoded
            version of the YAML rule groups file.


            For details about the rule groups namespace structure, see [RuleGroupsNamespaceData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html).'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - name
      - data
      description: Represents the input of a `PutRuleGroupsNamespace` operation.
    PutRuleGroupsNamespaceResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace that was updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceArn'
          description: The ARN of the rule groups namespace.
        status:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceStatus'
          description: A structure that includes the current status of the rule groups
            namespace.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            namespace.
      required:
      - name
      - arn
      - status
      description: Represents the output of a `PutRuleGroupsNamespace` operation.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifier of the resource affected.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Type of the resource affected.
      required:
      - message
      - resourceId
      - resourceType
      description: The request references a resources that doesn't exist.
    RoleConfiguration:
      type: object
      properties:
        sourceRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the role used in the source
            account to enable cross-account scraping. For information about the contents
            of this policy, see [Cross-account setup](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write).
        targetRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the role used in the target
            account to enable cross-account scraping. For information about the contents
            of this policy, see [Cross-account setup](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#cross-account-remote-write).
      description: Use this structure to enable cross-account access, so that you
        can use a target account to access Prometheus metrics from source accounts.
    RuleGroupsNamespaceArn:
      type: string
    RuleGroupsNamespaceData:
      type: string
      format: byte
      description: <p>The rule groups namespace data.</p>
    RuleGroupsNamespaceDescription:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceArn'
          description: The ARN of the rule groups namespace. For example, `arn:aws:aps:<region>:123456789012:rulegroupsnamespace/ws-example1-1234-abcd-5678-ef90abcd1234/rulesfile1`.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace.
        status:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceStatus'
          description: The current status of the rule groups namespace.
        data:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceData'
          description: 'The rule groups file used in the namespace.


            For details about the rule groups namespace structure, see [RuleGroupsNamespaceData](https://docs.aws.amazon.com/prometheus/latest/APIReference/yaml-RuleGroupsNamespaceData.html).'
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the rule groups namespace was created.
        modifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the rule groups namespace was most recently
            changed.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            rule groups namespace.
      required:
      - arn
      - name
      - status
      - data
      - createdAt
      - modifiedAt
      description: The details about one rule groups namespace.
    RuleGroupsNamespaceName:
      type: string
      pattern: '[0-9A-Za-z][-.0-9A-Z_a-z]*'
      minLength: 1
      maxLength: 64
    RuleGroupsNamespaceStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceStatusCode'
          description: The current status of the namespace.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for the failure, if any.
      required:
      - statusCode
      description: The status information about a rule groups namespace.
    RuleGroupsNamespaceStatusCode:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETING
      - CREATION_FAILED
      - UPDATE_FAILED
    RuleGroupsNamespaceSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceArn'
          description: The ARN of the rule groups namespace.
        name:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceName'
          description: The name of the rule groups namespace.
        status:
          allOf:
          - $ref: '#/components/schemas/RuleGroupsNamespaceStatus'
          description: A structure that displays the current status of the rule groups
            namespace.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the rule groups namespace was created.
        modifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the rule groups namespace was most recently
            changed.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            rule groups namespace.
      required:
      - arn
      - name
      - status
      - createdAt
      - modifiedAt
      description: The high-level information about a rule groups namespace. To retrieve
        more information, use `DescribeRuleGroupsNamespace`.
    RuleGroupsNamespaceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/RuleGroupsNamespaceSummary'
      description: <p>A list of rule groups namespace summary.</p>
    ScrapeConfiguration:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Blob'
        description: |-
          The base 64 encoded scrape configuration file.
      description: |-
        A scrape configuration for a scraper, base 64 encoded. For more information, see [Scraper configuration](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html#AMP-collector-configuration) in the _Amazon Managed Service for Prometheus User Guide_.
    ScraperAlias:
      type: string
      pattern: ^[0-9A-Za-z][-.0-9A-Z_a-z]*$
      minLength: 1
      maxLength: 100
    ScraperArn:
      type: string
    ScraperDescription:
      type: object
      properties:
        alias:
          allOf:
          - $ref: '#/components/schemas/ScraperAlias'
          description: (Optional) A name associated with the scraper.
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper. For example, `s-example1-1234-abcd-5678-ef9012abcd34`.
        arn:
          allOf:
          - $ref: '#/components/schemas/ScraperArn'
          description: The Amazon Resource Name (ARN) of the scraper. For example,
            `arn:aws:aps:<region>:123456798012:scraper/s-example1-1234-abcd-5678-ef9012abcd34`.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: 'The Amazon Resource Name (ARN) of the IAM role that provides
            permissions for the scraper to discover and collect metrics on your behalf.


            For example, `arn:aws:iam::123456789012:role/service-role/AmazonGrafanaServiceRole-12example`.'
        status:
          allOf:
          - $ref: '#/components/schemas/ScraperStatus'
          description: A structure that contains the current status of the scraper.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the scraper was created.
        lastModifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the scraper was last modified.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: (Optional) The list of tag keys and values associated with
            the scraper.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/StatusReason'
          description: If there is a failure, the reason for the failure.
        scrapeConfiguration:
          allOf:
          - $ref: '#/components/schemas/ScrapeConfiguration'
          description: The configuration in use by the scraper.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The Amazon EKS cluster from which the scraper collects metrics.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The Amazon Managed Service for Prometheus workspace the scraper
            sends metrics to.
        roleConfiguration:
          allOf:
          - $ref: '#/components/schemas/RoleConfiguration'
          description: This structure displays information about the IAM roles used
            for cross-account scraping configuration.
      required:
      - scraperId
      - arn
      - roleArn
      - status
      - createdAt
      - lastModifiedAt
      - scrapeConfiguration
      - source
      - destination
      description: The `ScraperDescription` structure contains the full details about
        one scraper in your account.
    ScraperFilters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FilterValues'
      description: <p>A list of scraper filters.</p>
    ScraperId:
      type: string
      pattern: ^[0-9A-Za-z][-.0-9A-Z_a-z]*$
      minLength: 1
      maxLength: 64
    ScraperStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/ScraperStatusCode'
          description: The current status of the scraper.
      required:
      - statusCode
      description: The `ScraperStatus` structure contains status information about
        the scraper.
    ScraperStatusCode:
      type: string
      enum:
      - CREATING
      - UPDATING
      - ACTIVE
      - DELETING
      - CREATION_FAILED
      - UPDATE_FAILED
      - DELETION_FAILED
    ScraperSummary:
      type: object
      properties:
        alias:
          allOf:
          - $ref: '#/components/schemas/ScraperAlias'
          description: (Optional) A name associated with the scraper.
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper.
        arn:
          allOf:
          - $ref: '#/components/schemas/ScraperArn'
          description: The Amazon Resource Name (ARN) of the scraper.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role that provides
            permissions for the scraper to discover and collect metrics on your behalf.
        status:
          allOf:
          - $ref: '#/components/schemas/ScraperStatus'
          description: A structure that contains the current status of the scraper.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the scraper was created.
        lastModifiedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the scraper was last modified.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: (Optional) The list of tag keys and values associated with
            the scraper.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/StatusReason'
          description: If there is a failure, the reason for the failure.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The Amazon EKS cluster from which the scraper collects metrics.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The Amazon Managed Service for Prometheus workspace the scraper
            sends metrics to.
        roleConfiguration:
          allOf:
          - $ref: '#/components/schemas/RoleConfiguration'
          description: This structure displays information about the IAM roles used
            for cross-account scraping configuration.
      required:
      - scraperId
      - arn
      - roleArn
      - status
      - createdAt
      - lastModifiedAt
      - source
      - destination
      description: The `ScraperSummary` structure contains a summary of the details
        about one scraper in your account.
    ScraperSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/ScraperSummary'
      description: <p>A list of scraper summaries.</p>
    SecurityGroupId:
      type: string
      pattern: ^sg-[0-9a-z]+$
      minLength: 0
      maxLength: 255
    SecurityGroupIds:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
      description: <p>A list of security group IDs specified for VPC configuration.</p>
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifier of the resource affected.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Type of the resource affected.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Service quotas code for the originating service.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Service quotas code of the originating quota.
      required:
      - message
      - resourceId
      - resourceType
      - serviceCode
      - quotaCode
      description: Completing the request would cause a service quota to be exceeded.
    Source:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/EksConfiguration'
        description: |-
          The Amazon EKS cluster from which a scraper collects metrics.
      description: |-
        The source of collected metrics for a scraper.
    StatusReason:
      type: string
      minLength: 1
      maxLength: 256
    SubnetId:
      type: string
      pattern: ^subnet-[0-9a-z]+$
      minLength: 0
      maxLength: 255
    SubnetIds:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
      description: <p>A list of subnet IDs specified for VPC configuration.</p>
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      description: <p>A tag associated with a resource.</p>
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource to apply tags to.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: 'The list of tag keys and values to associate with the resource.


            Keys must not begin with `aws:`.'
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 0
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Service quotas code for the originating service.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Service quotas code for the originating quota.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Advice to clients on when the call can be safely retried.
      required:
      - message
      description: The request was denied due to request throttling.
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource from which to remove a tag.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: The keys of the tags to remove.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateLoggingConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to update the logging configuration
            for.
        logGroupArn:
          allOf:
          - $ref: '#/components/schemas/LogGroupArn'
          description: The ARN of the CloudWatch log group to which the vended log
            data will be published.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      - logGroupArn
      description: Represents the input of an `UpdateLoggingConfiguration` operation.
    UpdateLoggingConfigurationResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/LoggingConfigurationStatus'
          description: A structure that contains the current status of the logging
            configuration.
      required:
      - status
      description: Represents the output of an `UpdateLoggingConfiguration` operation.
    UpdateScraperRequest:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the scraper to update.
        alias:
          allOf:
          - $ref: '#/components/schemas/ScraperAlias'
          description: The new alias of the scraper.
        scrapeConfiguration:
          allOf:
          - $ref: '#/components/schemas/ScrapeConfiguration'
          description: 'Contains the base-64 encoded YAML configuration for the scraper.


            For more information about configuring a scraper, see [Using an Amazon
            Web Services managed collector](https://docs.aws.amazon.com/prometheus/latest/userguide/AMP-collector-how-to.html)
            in the _Amazon Managed Service for Prometheus User Guide_.'
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The new Amazon Managed Service for Prometheus workspace to
            send metrics to.
        roleConfiguration:
          allOf:
          - $ref: '#/components/schemas/RoleConfiguration'
          description: Use this structure to enable cross-account access, so that
            you can use a target account to access Prometheus metrics from source
            accounts.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - scraperId
    UpdateScraperResponse:
      type: object
      properties:
        scraperId:
          allOf:
          - $ref: '#/components/schemas/ScraperId'
          description: The ID of the updated scraper.
        arn:
          allOf:
          - $ref: '#/components/schemas/ScraperArn'
          description: The Amazon Resource Name (ARN) of the updated scraper.
        status:
          allOf:
          - $ref: '#/components/schemas/ScraperStatus'
          description: A structure that displays the current status of the scraper.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            scraper.
      required:
      - scraperId
      - arn
      - status
    UpdateWorkspaceAliasRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace to update.
        alias:
          allOf:
          - $ref: '#/components/schemas/WorkspaceAlias'
          description: 'The new alias for the workspace. It does not need to be unique.


            Amazon Managed Service for Prometheus will automatically strip any blank
            spaces from the beginning and end of the alias that you specify.'
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: A unique identifier that you can provide to ensure the idempotency
            of the request. Case-sensitive.
      required:
      - workspaceId
      description: Represents the input of an `UpdateWorkspaceAlias` operation.
    UpdateWorkspaceConfigurationRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The ID of the workspace that you want to update. To find the
            IDs of your workspaces, use the [ListWorkspaces](https://docs.aws.amazon.com/prometheus/latest/APIReference/API_ListWorkspaces.htm)
            operation.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/IdempotencyToken'
          description: You can include a token in your operation to make it an idempotent
            opeartion.
        limitsPerLabelSet:
          allOf:
          - $ref: '#/components/schemas/LimitsPerLabelSetList'
          description: This is an array of structures, where each structure defines
            a label set for the workspace, and defines the ingestion limit for active
            time series for each of those label sets. Each label name in a label set
            must be unique.
        retentionPeriodInDays:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies how many days that metrics will be retained in the
            workspace.
      required:
      - workspaceId
    UpdateWorkspaceConfigurationResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/WorkspaceConfigurationStatus'
          description: The status of the workspace configuration.
      required:
      - status
    Uri:
      type: string
      minLength: 1
      maxLength: 1024
    ValidationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Description of the error.
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: Reason the request failed validation.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The field that caused the error, if applicable.
      required:
      - message
      - reason
      description: The input fails to satisfy the constraints specified by an Amazon
        Web Services service.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the field that caused an exception.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing why the field caused an exception.
      required:
      - name
      - message
      description: Information about a field passed into a request that resulted in
        an exception.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
      description: <p>A list of fields.</p>
    ValidationExceptionReason:
      type: string
      enum:
      - UNKNOWN_OPERATION
      - CANNOT_PARSE
      - FIELD_VALIDATION_FAILED
      - OTHER
    WorkspaceAlias:
      type: string
      minLength: 1
      maxLength: 100
    WorkspaceArn:
      type: string
      pattern: ^arn:aws[-a-z]*:aps:[-a-z0-9]+:[0-9]{12}:workspace/.+$
    WorkspaceConfigurationDescription:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/WorkspaceConfigurationStatus'
          description: This structure displays the current status of the workspace
            configuration, and might also contain a reason for that status.
        limitsPerLabelSet:
          allOf:
          - $ref: '#/components/schemas/LimitsPerLabelSetList'
          description: This is an array of structures, where each structure displays
            one label sets for the workspace and the limits for that label set.
        retentionPeriodInDays:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: This field displays how many days that metrics are retained
            in the workspace.
      required:
      - status
      description: This structure contains the description of the workspace configuration.
    WorkspaceConfigurationStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/WorkspaceConfigurationStatusCode'
          description: The current status of the workspace configuration.
        statusReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The reason for the current status, if a reason is available.
      required:
      - statusCode
      description: This structure displays the current status of the workspace configuration,
        and might also contain a reason for that status.
    WorkspaceConfigurationStatusCode:
      type: string
      enum:
      - ACTIVE
      - UPDATING
      - UPDATE_FAILED
    WorkspaceDescription:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The unique ID for the workspace. For example, `ws-example1-1234-abcd-5678-ef90abcd1234`.
        alias:
          allOf:
          - $ref: '#/components/schemas/WorkspaceAlias'
          description: The alias that is assigned to this workspace to help identify
            it. It does not need to be unique.
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkspaceArn'
          description: The ARN of the workspace. For example, `arn:aws:aps:<region>:123456789012:workspace/ws-example1-1234-abcd-5678-ef90abcd1234`.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkspaceStatus'
          description: The current status of the workspace.
        prometheusEndpoint:
          allOf:
          - $ref: '#/components/schemas/Uri'
          description: The Prometheus endpoint available for this workspace. For example,
            `https://aps-workspaces.<region>.amazonaws.com/workspaces/ws-example1-1234-abcd-5678-ef90abcd1234/api/v1/`.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the workspace was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            workspace.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: (optional) If the workspace was created with a customer managed
            KMS key, the ARN for the key used.
      required:
      - workspaceId
      - arn
      - status
      - createdAt
      description: The full details about one Amazon Managed Service for Prometheus
        workspace in your account.
    WorkspaceId:
      type: string
      pattern: '[0-9A-Za-z][-.0-9A-Z_a-z]*'
      minLength: 1
      maxLength: 64
    WorkspaceStatus:
      type: object
      properties:
        statusCode:
          allOf:
          - $ref: '#/components/schemas/WorkspaceStatusCode'
          description: The current status of the workspace.
      required:
      - statusCode
      description: The status of the workspace.
    WorkspaceStatusCode:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETING
      - CREATION_FAILED
    WorkspaceSummary:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/WorkspaceId'
          description: The unique ID for the workspace.
        alias:
          allOf:
          - $ref: '#/components/schemas/WorkspaceAlias'
          description: The alias that is assigned to this workspace to help identify
            it. It does not need to be unique.
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkspaceArn'
          description: The ARN of the workspace.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkspaceStatus'
          description: The current status of the workspace.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the workspace was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The list of tag keys and values that are associated with the
            workspace.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: (optional) If the workspace was created with a customer managed
            KMS key, the ARN for the key used.
      required:
      - workspaceId
      - arn
      - status
      - createdAt
      description: The information about one Amazon Managed Service for Prometheus
        workspace in your account.
    WorkspaceSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/WorkspaceSummary'
      description: <p>A list of workspace summaries.</p>
