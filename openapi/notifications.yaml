openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: notifications
  x-aws-serviceName: notifications
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-05-10'
  title: AWS User Notifications
  description: |-
    The _Amazon Web Services User Notifications API Reference_ provides descriptions, API request parameters, and the JSON response for each of the User Notification API actions.

    User Notification control plane APIs are currently available in US East (Virginia) - `us-east-1`.

    [GetNotificationEvent](https://docs.aws.amazon.com/notifications/latest/APIReference/API_GetNotificationEvent.html) and [ListNotificationEvents](https://docs.aws.amazon.com/notifications/latest/APIReference/API_ListNotificationEvents.html) APIs are currently available in [commercial partition Regions](https://docs.aws.amazon.com/notifications/latest/userguide/supported-regions.html) and only return notifications stored in the same Region in which they're called.

    The User Notifications console can only be used in US East (Virginia). Your data however, is stored in each Region chosen as a [notification hub](https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html) in addition to US East (Virginia).
servers:
- description: The AWS User Notifications regional endpoint
  url: https://notifications.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /channels/associate/{arn}:
    post:
      operationId: AssociateChannel
      description: |-
        Associates a delivery [Channel](https://docs.aws.amazon.com/notifications/latest/userguide/managing-delivery-channels.html) with a particular `NotificationConfiguration`. Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChannelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationConfigurationArn:
                  $ref: '#/components/schemas/NotificationConfigurationArn'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /contacts/associate-managed-notification/{contactIdentifier}:
    put:
      operationId: AssociateManagedNotificationAccountContact
      description: |-
        Associates an Account Contact with a particular `ManagedNotificationConfiguration`.
      parameters:
      - name: contactIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AccountContactType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                managedNotificationConfigurationArn:
                  $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /channels/associate-managed-notification/{channelArn}:
    put:
      operationId: AssociateManagedNotificationAdditionalChannel
      description: |-
        Associates an additional Channel with a particular `ManagedNotificationConfiguration`.

        Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).
      parameters:
      - name: channelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChannelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                managedNotificationConfigurationArn:
                  $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /event-rules:
    post:
      operationId: CreateEventRule
      description: |-
        Creates an [ `EventRule` ](https://docs.aws.amazon.com/notifications/latest/userguide/glossary.html) that is associated with a specified `NotificationConfiguration`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationConfigurationArn:
                  $ref: '#/components/schemas/NotificationConfigurationArn'
                source:
                  $ref: '#/components/schemas/Source'
                eventType:
                  $ref: '#/components/schemas/EventType'
                eventPattern:
                  $ref: '#/components/schemas/EventRuleEventPattern'
                regions:
                  $ref: '#/components/schemas/Regions'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListEventRules
      description: |-
        Returns a list of `EventRules` according to specified filters, in reverse chronological order (newest first).
      parameters:
      - name: notificationConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-configurations:
    post:
      operationId: CreateNotificationConfiguration
      description: |-
        Creates a new `NotificationConfiguration`.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NotificationConfigurationName'
                description:
                  $ref: '#/components/schemas/NotificationConfigurationDescription'
                aggregationDuration:
                  $ref: '#/components/schemas/AggregationDuration'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListNotificationConfigurations
      description: |-
        Returns a list of abbreviated `NotificationConfigurations` according to specified filters, in reverse chronological order (newest first).
      parameters:
      - name: eventRuleSource
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Source'
      - name: channelArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ChannelArn'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NotificationConfigurationStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /event-rules/{arn}:
    delete:
      operationId: DeleteEventRule
      description: |-
        Deletes an `EventRule`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventRuleArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEventRule
      description: |-
        Returns a specified `EventRule`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventRuleArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateEventRule
      description: |-
        Updates an existing `EventRule`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EventRuleArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventPattern:
                  $ref: '#/components/schemas/EventRuleEventPattern'
                regions:
                  $ref: '#/components/schemas/Regions'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-configurations/{arn}:
    delete:
      operationId: DeleteNotificationConfiguration
      description: |-
        Deletes a `NotificationConfiguration`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetNotificationConfiguration
      description: |-
        Returns a specified `NotificationConfiguration`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateNotificationConfiguration
      description: |-
        Updates a `NotificationConfiguration`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/NotificationConfigurationName'
                description:
                  $ref: '#/components/schemas/NotificationConfigurationDescription'
                aggregationDuration:
                  $ref: '#/components/schemas/AggregationDuration'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-hubs/{notificationHubRegion}:
    delete:
      operationId: DeregisterNotificationHub
      description: |-
        Deregisters a `NotificationConfiguration` in the specified Region.

        You can't deregister the last `NotificationHub` in the account. `NotificationEvents` stored in the deregistered `NotificationConfiguration` are no longer be visible. Recreating a new `NotificationConfiguration` in the same Region restores access to those `NotificationEvents`.
      parameters:
      - name: notificationHubRegion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Region'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /organization/access:
    delete:
      operationId: DisableNotificationsAccessForOrganization
      description: |-
        Disables service trust between User Notifications and Amazon Web Services Organizations.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: EnableNotificationsAccessForOrganization
      description: |-
        Enables service trust between User Notifications and Amazon Web Services Organizations.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetNotificationsAccessForOrganization
      description: |-
        Returns the AccessStatus of Service Trust Enablement for User Notifications and Amazon Web Services Organizations.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /channels/disassociate/{arn}:
    post:
      operationId: DisassociateChannel
      description: |-
        Disassociates a Channel from a specified `NotificationConfiguration`. Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChannelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationConfigurationArn:
                  $ref: '#/components/schemas/NotificationConfigurationArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /contacts/disassociate-managed-notification/{contactIdentifier}:
    put:
      operationId: DisassociateManagedNotificationAccountContact
      description: |-
        Disassociates an Account Contact with a particular `ManagedNotificationConfiguration`.
      parameters:
      - name: contactIdentifier
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AccountContactType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                managedNotificationConfigurationArn:
                  $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /channels/disassociate-managed-notification/{channelArn}:
    put:
      operationId: DisassociateManagedNotificationAdditionalChannel
      description: |-
        Disassociates an additional Channel from a particular `ManagedNotificationConfiguration`.

        Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).
      parameters:
      - name: channelArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ChannelArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                managedNotificationConfigurationArn:
                  $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-notification-child-events/{arn}:
    get:
      operationId: GetManagedNotificationChildEvent
      description: |-
        Returns the child event of a specific given `ManagedNotificationEvent`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedNotificationChildEventArn'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-notification-configurations/{arn}:
    get:
      operationId: GetManagedNotificationConfiguration
      description: |-
        Returns a specified `ManagedNotificationConfiguration`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-notification-events/{arn}:
    get:
      operationId: GetManagedNotificationEvent
      description: |-
        Returns a specified `ManagedNotificationEvent`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedNotificationEventArn'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-events/{arn}:
    get:
      operationId: GetNotificationEvent
      description: |-
        Returns a specified `NotificationEvent`.

        User Notifications stores notifications in the individual Regions you register as notification hubs and the Region of the source event rule. `GetNotificationEvent` only returns notifications stored in the same Region in which the action is called. User Notifications doesn't backfill notifications to new Regions selected as notification hubs. For this reason, we recommend that you make calls in your oldest registered notification hub. For more information, see [Notification hubs](https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html) in the _Amazon Web Services User Notifications User Guide_.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationEventArn'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /channels:
    get:
      operationId: ListChannels
      description: |-
        Returns a list of Channels for a `NotificationConfiguration`.
      parameters:
      - name: notificationConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /channels/list-managed-notification-channel-associations:
    get:
      operationId: ListManagedNotificationChannelAssociations
      description: |-
        Returns a list of Account contacts and Channels associated with a `ManagedNotificationConfiguration`, in paginated format.
      parameters:
      - name: managedNotificationConfigurationArn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-managed-notification-child-events/{aggregateManagedNotificationEventArn}:
    get:
      operationId: ListManagedNotificationChildEvents
      description: |-
        Returns a list of `ManagedNotificationChildEvents` for a specified aggregate `ManagedNotificationEvent`, ordered by creation time in reverse chronological order (newest first).
      parameters:
      - name: aggregateManagedNotificationEventArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ManagedNotificationEventArn'
      - name: startTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: endTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: relatedAccount
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      - name: organizationalUnitId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OrganizationalUnitId'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-notification-configurations:
    get:
      operationId: ListManagedNotificationConfigurations
      description: |-
        Returns a list of Managed Notification Configurations according to specified filters, ordered by creation time in reverse chronological order (newest first).
      parameters:
      - name: channelIdentifier
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ChannelIdentifier'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /managed-notification-events:
    get:
      operationId: ListManagedNotificationEvents
      description: |-
        Returns a list of Managed Notification Events according to specified filters, ordered by creation time in reverse chronological order (newest first).
      parameters:
      - name: startTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: endTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      - name: source
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Source'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: organizationalUnitId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/OrganizationalUnitId'
      - name: relatedAccount
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AccountId'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-events:
    get:
      operationId: ListNotificationEvents
      description: |-
        Returns a list of `NotificationEvents` according to specified filters, in reverse chronological order (newest first).

        User Notifications stores notifications in the individual Regions you register as notification hubs and the Region of the source event rule. ListNotificationEvents only returns notifications stored in the same Region in which the action is called. User Notifications doesn't backfill notifications to new Regions selected as notification hubs. For this reason, we recommend that you make calls in your oldest registered notification hub. For more information, see [Notification hubs](https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html) in the _Amazon Web Services User Notifications User Guide_.
      parameters:
      - name: startTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: endTime
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Timestamp'
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/LocaleCode'
      - name: source
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Source'
      - name: includeChildEvents
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      - name: aggregateNotificationEventArn
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NotificationEventArn'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /notification-hubs:
    get:
      operationId: ListNotificationHubs
      description: |-
        Returns a list of `NotificationHubs`.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: RegisterNotificationHub
      description: |-
        Registers a `NotificationConfiguration` in the specified Region.

        There is a maximum of one `NotificationConfiguration` per Region. You can have a maximum of 3 `NotificationHub` resources at a time.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationHubRegion:
                  $ref: '#/components/schemas/Region'
      responses:
        '201': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            Updating or deleting a resource can cause an inconsistent state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            Request would cause a service quota to be exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{arn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Returns a list of tags for a specified Amazon Resource Name (ARN).

        For more information, see [Tagging your Amazon Web Services resources](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html) in the _Tagging Amazon Web Services Resources User Guide_.

        This is only supported for `NotificationConfigurations`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Tags the resource with a tag key and value.

        For more information, see [Tagging your Amazon Web Services resources](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html) in the _Tagging Amazon Web Services Resources User Guide_.

        This is only supported for `NotificationConfigurations`.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Untags a resource with a specified Amazon Resource Name (ARN).

        For more information, see [Tagging your Amazon Web Services resources](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html) in the _Tagging Amazon Web Services Resources User Guide_.
      parameters:
      - name: arn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NotificationConfigurationArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeys'
      responses:
        '200': {}
        '403':
          description: |-
            User does not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            Unexpected error during processing of request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            Request references a resource which does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            Request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            This exception is thrown when the notification event fails validation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: User does not have sufficient access to perform this action.
    AccessStatus:
      type: string
      enum:
      - ENABLED
      - DISABLED
      - PENDING
    AccountContactType:
      type: string
      enum:
      - ACCOUNT_PRIMARY
      - ACCOUNT_ALTERNATE_BILLING
      - ACCOUNT_ALTERNATE_OPERATIONS
      - ACCOUNT_ALTERNATE_SECURITY
    AccountId:
      type: string
      pattern: ^\d{12}$
    AggregatedNotificationRegions:
      type: array
      items:
        $ref: '#/components/schemas/Region'
    AggregationDetail:
      type: object
      properties:
        summarizationDimensions:
          allOf:
          - $ref: '#/components/schemas/SummarizationDimensionDetails'
          description: Properties used to summarize aggregated events.
      description: Provides detailed information about the dimensions used for aggregation.
    AggregationDuration:
      type: string
      enum:
      - LONG
      - SHORT
      - NONE
    AggregationEventType:
      type: string
      enum:
      - AGGREGATE
      - CHILD
      - NONE
    AggregationKey:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Indicates the type of aggregation key.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Indicates the value associated with the aggregation key name.
      required:
      - name
      - value
      description: Key-value collection that indicate how notifications are grouped.
    AggregationKeys:
      type: array
      items:
        $ref: '#/components/schemas/AggregationKey'
    AggregationSummary:
      type: object
      properties:
        eventCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Indicates the number of events associated with the aggregation
            key.
        aggregatedBy:
          allOf:
          - $ref: '#/components/schemas/AggregationKeys'
          description: Indicates the criteria or rules by which notifications have
            been grouped together.
        aggregatedAccounts:
          allOf:
          - $ref: '#/components/schemas/SummarizationDimensionOverview'
          description: Indicates the Amazon Web Services accounts in the aggregation
            key.
        aggregatedRegions:
          allOf:
          - $ref: '#/components/schemas/SummarizationDimensionOverview'
          description: Indicates the Amazon Web Services Regions in the aggregation
            key.
        aggregatedOrganizationalUnits:
          allOf:
          - $ref: '#/components/schemas/SummarizationDimensionOverview'
          description: Indicates the collection of organizational units that are involved
            in the aggregation key.
        additionalSummarizationDimensions:
          allOf:
          - $ref: '#/components/schemas/SummarizationDimensionOverviews'
          description: List of additional dimensions used to group and summarize data.
      required:
      - eventCount
      - aggregatedBy
      - aggregatedAccounts
      - aggregatedRegions
      description: Provides additional information about the aggregation key.
    Arn:
      type: string
      pattern: ^arn:[^:]*:[^:]*:[^:]*:.*$
    AssociateChannelRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: 'The Amazon Resource Name (ARN) of the Channel to associate
            with the `NotificationConfiguration`.


            Supported ARNs include Chatbot, the Console Mobile Application, and notifications-contacts.'
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the `NotificationConfiguration` to associate with
            the Channel.
      required:
      - arn
      - notificationConfigurationArn
    AssociateChannelResponse:
      type: object
      properties: {}
    AssociateManagedNotificationAccountContactRequest:
      type: object
      properties:
        contactIdentifier:
          allOf:
          - $ref: '#/components/schemas/AccountContactType'
          description: A unique value of an Account Contact Type to associate with
            the `ManagedNotificationConfiguration`.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            to associate with the Account Contact.
      required:
      - contactIdentifier
      - managedNotificationConfigurationArn
    AssociateManagedNotificationAccountContactResponse:
      type: object
      properties: {}
    AssociateManagedNotificationAdditionalChannelRequest:
      type: object
      properties:
        channelArn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: 'The Amazon Resource Name (ARN) of the Channel to associate
            with the `ManagedNotificationConfiguration`.


            Supported ARNs include Chatbot, the Console Mobile Application, and email
            (notifications-contacts).'
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            to associate with the additional Channel.
      required:
      - channelArn
      - managedNotificationConfigurationArn
    AssociateManagedNotificationAdditionalChannelResponse:
      type: object
      properties: {}
    ChannelArn:
      type: string
      pattern: ^arn:aws:(chatbot|consoleapp|notifications-contacts):[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z0-9-_.@]+/[a-zA-Z0-9/_.@:-]+$
    ChannelAssociationOverrideOption:
      type: string
      enum:
      - ENABLED
      - DISABLED
    ChannelIdentifier:
      type: string
      pattern: ^ACCOUNT_PRIMARY|ACCOUNT_ALTERNATE_BILLING|ACCOUNT_ALTERNATE_OPERATIONS|ACCOUNT_ALTERNATE_SECURITY|arn:aws:(chatbot|consoleapp|notifications-contacts):[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z0-9-_.@]+/[a-zA-Z0-9/_.@:-]+$
    ChannelType:
      type: string
      enum:
      - MOBILE
      - CHATBOT
      - EMAIL
      - ACCOUNT_CONTACT
    Channels:
      type: array
      items:
        $ref: '#/components/schemas/ChannelArn'
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The resource ID that prompted the conflict error.
      required:
      - message
      - resourceId
      description: Updating or deleting a resource can cause an inconsistent state.
    CreateEventRuleRequest:
      type: object
      properties:
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`
            associated with this `EventRule`.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: 'The matched event source.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: 'The event type to match.


            Must match one of the valid Amazon EventBridge event types. For example,
            EC2 Instance State-change Notification and Amazon CloudWatch Alarm State
            Change. For more information, see [Event delivery from Amazon Web Services
            services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/EventRuleEventPattern'
          description: 'An additional event pattern used to further filter the events
            this `EventRule` receives.


            For more information, see [Amazon EventBridge event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html)
            in the _Amazon EventBridge User Guide._'
        regions:
          allOf:
          - $ref: '#/components/schemas/Regions'
          description: A list of Amazon Web Services Regions that send events to this
            `EventRule`.
      required:
      - notificationConfigurationArn
      - source
      - eventType
      - regions
    CreateEventRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The ARN of the resource.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of a `NotificationConfiguration`.
        statusSummaryByRegion:
          allOf:
          - $ref: '#/components/schemas/StatusSummaryByRegion'
          description: A list of an `EventRule`'s status by Region. Regions are mapped
            to `EventRuleStatusSummary`.
      required:
      - arn
      - notificationConfigurationArn
      - statusSummaryByRegion
    CreateNotificationConfigurationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationName'
          description: The name of the `NotificationConfiguration`. Supports RFC 3986's
            unreserved characters.
        description:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationDescription'
          description: The description of the `NotificationConfiguration`.
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/AggregationDuration'
          description: "The aggregation preference of the `NotificationConfiguration`.\n\
            \n  * Values:\n\n    * `LONG`\n\n      * Aggregate notifications for long\
            \ periods of time (12 hours).\n\n    * `SHORT`\n\n      * Aggregate notifications\
            \ for short periods of time (5 minutes).\n\n    * `NONE`\n\n      * Don't\
            \ aggregate notifications."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A map of tags assigned to a resource. A tag is a string-to-string
            map of key-value pairs.
      required:
      - name
      - description
    CreateNotificationConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`.
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationStatus'
          description: The current status of this `NotificationConfiguration`.
      required:
      - arn
      - status
    CreationTime:
      type: string
      format: date-time
    DeleteEventRuleRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The Amazon Resource Name (ARN) of the `EventRule` to delete.
      required:
      - arn
    DeleteEventRuleResponse:
      type: object
      properties: {}
    DeleteNotificationConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`
            to delete.
      required:
      - arn
    DeleteNotificationConfigurationResponse:
      type: object
      properties: {}
    DeregisterNotificationHubRequest:
      type: object
      properties:
        notificationHubRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The `NotificationConfiguration` Region.
      required:
      - notificationHubRegion
    DeregisterNotificationHubResponse:
      type: object
      properties:
        notificationHubRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The `NotificationConfiguration` Region.
        statusSummary:
          allOf:
          - $ref: '#/components/schemas/NotificationHubStatusSummary'
          description: '`NotificationConfiguration` status information.'
      required:
      - notificationHubRegion
      - statusSummary
    Dimension:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: The name of the dimension
        value:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: The value of the dimension.
      required:
      - name
      - value
      description: The key-value pair of properties for an event.
    Dimensions:
      type: array
      items:
        $ref: '#/components/schemas/Dimension'
    DisableNotificationsAccessForOrganizationRequest:
      type: object
      properties: {}
    DisableNotificationsAccessForOrganizationResponse:
      type: object
      properties: {}
    DisassociateChannelRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: The Amazon Resource Name (ARN) of the Channel to disassociate.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the `NotificationConfiguration` to disassociate.
      required:
      - arn
      - notificationConfigurationArn
    DisassociateChannelResponse:
      type: object
      properties: {}
    DisassociateManagedNotificationAccountContactRequest:
      type: object
      properties:
        contactIdentifier:
          allOf:
          - $ref: '#/components/schemas/AccountContactType'
          description: The unique value of an Account Contact Type to associate with
            the `ManagedNotificationConfiguration`.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            to associate with the Account Contact.
      required:
      - contactIdentifier
      - managedNotificationConfigurationArn
    DisassociateManagedNotificationAccountContactResponse:
      type: object
      properties: {}
    DisassociateManagedNotificationAdditionalChannelRequest:
      type: object
      properties:
        channelArn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: The Amazon Resource Name (ARN) of the Channel to associate
            with the `ManagedNotificationConfiguration`.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the Managed Notification
            Configuration to associate with the additional Channel.
      required:
      - channelArn
      - managedNotificationConfigurationArn
    DisassociateManagedNotificationAdditionalChannelResponse:
      type: object
      properties: {}
    EnableNotificationsAccessForOrganizationRequest:
      type: object
      properties: {}
    EnableNotificationsAccessForOrganizationResponse:
      type: object
      properties: {}
    ErrorMessage:
      type: string
    EventRuleArn:
      type: string
      pattern: ^arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}/rule/[a-z0-9]{27}$
    EventRuleEventPattern:
      type: string
      minLength: 0
      maxLength: 4096
    EventRuleStatus:
      type: string
      enum:
      - ACTIVE
      - INACTIVE
      - CREATING
      - UPDATING
      - DELETING
    EventRuleStatusReason:
      type: string
    EventRuleStatusSummary:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/EventRuleStatus'
          description: "The status of the `EventRule`.\n\n  * Values:\n\n    * `ACTIVE`\n\
            \n      * The `EventRule` can process events.\n\n    * `INACTIVE`\n\n\
            \      * The `EventRule` may be unable to process events.\n\n    * `CREATING`\n\
            \n      * The `EventRule` is being created.\n\nOnly `GET` and `LIST` calls\
            \ can be run.\n\n    * `UPDATING`\n\n      * The `EventRule` is being\
            \ updated.\n\nOnly `GET` and `LIST` calls can be run.\n\n    * `DELETING`\n\
            \n      * The `EventRule` is being deleted.\n\nOnly `GET` and `LIST` calls\
            \ can be run."
        reason:
          allOf:
          - $ref: '#/components/schemas/EventRuleStatusReason'
          description: A human-readable reason for `EventRuleStatus`.
      required:
      - status
      - reason
      description: Provides additional information about the current `EventRule` status.
    EventRuleStructure:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The Amazon Resource Name (ARN) of the `EventRule`. CloudFormation
            stack generates this ARN and then uses this ARN to associate with the
            `NotificationConfiguration`.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN for the `NotificationConfiguration` associated with
            this `EventRule`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `EventRule`.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The event source this rule should match with the EventBridge
            event sources. It must match with atleast one of the valid EventBridge
            event sources. Only Amazon Web Services service sourced events are supported.
            For example, `aws.ec2` and `aws.cloudwatch`. For more information, see
            [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.
        eventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The event type this rule should match with the EventBridge
            events. It must match with atleast one of the valid EventBridge event
            types. For example, Amazon EC2 Instance State change Notification and
            Amazon CloudWatch State Change. For more information, see [Event delivery
            from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/EventRuleEventPattern'
          description: 'An additional event pattern used to further filter the events
            this `EventRule` receives.


            For more information, see [Amazon EventBridge event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html)
            in the _Amazon EventBridge User Guide._'
        regions:
          allOf:
          - $ref: '#/components/schemas/Regions'
          description: A list of Amazon Web Services Regions that send events to this
            `EventRule`.
        managedRules:
          allOf:
          - $ref: '#/components/schemas/ManagedRuleArns'
          description: 'A list of Amazon EventBridge Managed Rule ARNs associated
            with this `EventRule`.


            These are created by User Notifications within your account so your `EventRules`
            can function.'
        statusSummaryByRegion:
          allOf:
          - $ref: '#/components/schemas/StatusSummaryByRegion'
          description: A list of an `EventRule`'s status by Region. Regions are mapped
            to `EventRuleStatusSummary`.
      required:
      - arn
      - notificationConfigurationArn
      - creationTime
      - source
      - eventType
      - eventPattern
      - regions
      - managedRules
      - statusSummaryByRegion
      description: Contains a complete list of fields related to an `EventRule`.
    EventRules:
      type: array
      items:
        $ref: '#/components/schemas/EventRuleStructure'
    EventStatus:
      type: string
      enum:
      - HEALTHY
      - UNHEALTHY
    EventType:
      type: string
      pattern: ^([a-zA-Z0-9 \-\(\)])+$
      minLength: 1
      maxLength: 128
    GetEventRuleRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The Amazon Resource Name (ARN) of the `EventRule` to return.
      required:
      - arn
    GetEventRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The ARN of the resource.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of a `NotificationConfiguration`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The date when the `EventRule` was created.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: 'The matched event source.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: 'The event type to match.


            Must match one of the valid Amazon EventBridge event types. For example,
            EC2 Instance State-change Notification and Amazon CloudWatch Alarm State
            Change. For more information, see [Event delivery from Amazon Web Services
            services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/EventRuleEventPattern'
          description: 'An additional event pattern used to further filter the events
            this `EventRule` receives.


            For more information, see [Amazon EventBridge event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html)
            in the _Amazon EventBridge User Guide._'
        regions:
          allOf:
          - $ref: '#/components/schemas/Regions'
          description: A list of Amazon Web Services Regions that send events to this
            `EventRule`.
        managedRules:
          allOf:
          - $ref: '#/components/schemas/ManagedRuleArns'
          description: 'A list of managed rules from EventBridge that are associated
            with this `EventRule`.


            These are created by User Notifications within your account so this `EventRule`
            functions.'
        statusSummaryByRegion:
          allOf:
          - $ref: '#/components/schemas/StatusSummaryByRegion'
          description: A list of an `EventRule`'s status by Region. Regions are mapped
            to `EventRuleStatusSummary`.
      required:
      - arn
      - notificationConfigurationArn
      - creationTime
      - source
      - eventType
      - eventPattern
      - regions
      - managedRules
      - statusSummaryByRegion
    GetManagedNotificationChildEventRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChildEventArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationChildEvent`
            to return.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved `ManagedNotificationChildEvent`.
            The default locale is English `en_US`.
      required:
      - arn
    GetManagedNotificationChildEventResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChildEventArn'
          description: The ARN of the resource.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            associated with the `ManagedNotificationChildEvent`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `ManagedNotificationChildEvent`.
        content:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChildEvent'
          description: The content of the `ManagedNotificationChildEvent`.
      required:
      - arn
      - managedNotificationConfigurationArn
      - creationTime
      - content
    GetManagedNotificationConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            to return.
      required:
      - arn
    GetManagedNotificationConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The ARN of the `ManagedNotificationConfiguration` resource.
        name:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationName'
          description: The name of the `ManagedNotificationConfiguration`.
        description:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationDescription'
          description: The description of the `ManagedNotificationConfiguration`.
        category:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The category of the `ManagedNotificationConfiguration`.
        subCategory:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The subCategory of the `ManagedNotificationConfiguration`.
      required:
      - arn
      - name
      - description
      - category
      - subCategory
    GetManagedNotificationEventRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationEvent`
            to return.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved `ManagedNotificationEvent`.
            The default locale is English `(en_US)`.
      required:
      - arn
    GetManagedNotificationEventResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The ARN of the resource.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The ARN of the `ManagedNotificationConfiguration`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `ManagedNotificationEvent`.
        content:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEvent'
          description: The content of the `ManagedNotificationEvent`.
      required:
      - arn
      - managedNotificationConfigurationArn
      - creationTime
      - content
    GetNotificationConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`
            to return.
      required:
      - arn
    GetNotificationConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the resource.
        name:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationName'
          description: The name of the `NotificationConfiguration`.
        description:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationDescription'
          description: The description of the `NotificationConfiguration`.
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationStatus'
          description: The status of this `NotificationConfiguration`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `NotificationConfiguration`.
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/AggregationDuration'
          description: "The aggregation preference of the `NotificationConfiguration`.\n\
            \n  * Values:\n\n    * `LONG`\n\n      * Aggregate notifications for long\
            \ periods of time (12 hours).\n\n    * `SHORT`\n\n      * Aggregate notifications\
            \ for short periods of time (5 minutes).\n\n    * `NONE`\n\n      * Don't\
            \ aggregate notifications."
      required:
      - arn
      - name
      - description
      - status
      - creationTime
    GetNotificationEventRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: The Amazon Resource Name (ARN) of the `NotificationEvent` to
            return.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved `NotificationEvent`.
            The default locale is English `en_US`.
      required:
      - arn
    GetNotificationEventResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: The ARN of the resource.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the `NotificationConfiguration`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `NotificationEvent`.
        content:
          allOf:
          - $ref: '#/components/schemas/NotificationEventSchema'
          description: The content of the `NotificationEvent`.
      required:
      - arn
      - notificationConfigurationArn
      - creationTime
      - content
    GetNotificationsAccessForOrganizationRequest:
      type: object
      properties: {}
    GetNotificationsAccessForOrganizationResponse:
      type: object
      properties:
        notificationsAccessForOrganization:
          allOf:
          - $ref: '#/components/schemas/NotificationsAccessForOrganization'
          description: The `AccessStatus` of Service Trust Enablement for User Notifications
            to Amazon Web Services Organizations.
      required:
      - notificationsAccessForOrganization
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      required:
      - message
      description: Unexpected error during processing of request.
    LastActivationTime:
      type: string
      format: date-time
    ListChannelsRequest:
      type: object
      properties:
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            The default value is 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous ListNotificationEvents call. `NextToken` uses Base64 encoding.
      required:
      - notificationConfigurationArn
    ListChannelsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        channels:
          allOf:
          - $ref: '#/components/schemas/Channels'
          description: A list of Channels.
      required:
      - channels
    ListEventRulesRequest:
      type: object
      properties:
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            The default value is 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous `ListEventRules` call. Next token uses Base64 encoding.
      required:
      - notificationConfigurationArn
    ListEventRulesResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        eventRules:
          allOf:
          - $ref: '#/components/schemas/EventRules'
          description: A list of `EventRules`.
      required:
      - eventRules
    ListManagedNotificationChannelAssociationsRequest:
      type: object
      properties:
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`
            to match.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous `ListManagedNotificationChannelAssociations` call.
      required:
      - managedNotificationConfigurationArn
    ListManagedNotificationChannelAssociationsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        channelAssociations:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChannelAssociations'
          description: A list that contains the following information about a channel
            association.
      required:
      - channelAssociations
    ListManagedNotificationChildEventsRequest:
      type: object
      properties:
        aggregateManagedNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationEvent`.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The earliest time of events to return from this call.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Latest time of events to return from this call.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved `NotificationEvent`.
            The default locale is English.`en_US`.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services account ID associated with the Managed
            Notification Child Events.
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The identifier of the Amazon Web Services Organizations organizational
            unit (OU) associated with the Managed Notification Child Events.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous ListManagedNotificationChannelAssociations call. Next token
            uses Base64 encoding.
      required:
      - aggregateManagedNotificationEventArn
    ListManagedNotificationChildEventsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        managedNotificationChildEvents:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChildEvents'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
      required:
      - managedNotificationChildEvents
    ListManagedNotificationConfigurationsRequest:
      type: object
      properties:
        channelIdentifier:
          allOf:
          - $ref: '#/components/schemas/ChannelIdentifier'
          description: The identifier or ARN of the notification channel to filter
            configurations by.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous ListManagedNotificationChannelAssociations call. Next token
            uses Base64 encoding.
    ListManagedNotificationConfigurationsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        managedNotificationConfigurations:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurations'
          description: A list of Managed Notification Configurations matching the
            request criteria.
      required:
      - managedNotificationConfigurations
    ListManagedNotificationEventsRequest:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The earliest time of events to return from this call.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Latest time of events to return from this call.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved NotificationEvent.
            The default locale is English (en_US).
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The Amazon Web Services service the event originates from.
            For example aws.cloudwatch.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous `ListManagedNotificationChannelAssociations` call. Next
            token uses Base64 encoding.
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The Organizational Unit Id that an Amazon Web Services account
            belongs to.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The Amazon Web Services account ID associated with the Managed
            Notification Events.
    ListManagedNotificationEventsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        managedNotificationEvents:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEvents'
          description: A list of Managed Notification Events matching the request
            criteria.
      required:
      - managedNotificationEvents
    ListNotificationConfigurationsRequest:
      type: object
      properties:
        eventRuleSource:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: 'The matched event source.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        channelArn:
          allOf:
          - $ref: '#/components/schemas/ChannelArn'
          description: The Amazon Resource Name (ARN) of the Channel to match.
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationStatus'
          description: "The `NotificationConfiguration` status to match.\n\n  * Values:\n\
            \n    * `ACTIVE`\n\n      * All `EventRules` are `ACTIVE` and any call\
            \ can be run.\n\n    * `PARTIALLY_ACTIVE`\n\n      * Some `EventRules`\
            \ are `ACTIVE` and some are `INACTIVE`. Any call can be run.\n\n     \
            \ * Any call can be run.\n\n    * `INACTIVE`\n\n      * All `EventRules`\
            \ are `INACTIVE` and any call can be run.\n\n    * `DELETING`\n\n    \
            \  * This `NotificationConfiguration` is being deleted.\n\n      * Only\
            \ `GET` and `LIST` calls can be run."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous `ListEventRules` call. Next token uses Base64 encoding.
    ListNotificationConfigurationsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        notificationConfigurations:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurations'
          description: The `NotificationConfigurations` in the account.
      required:
      - notificationConfigurations
    ListNotificationEventsRequest:
      type: object
      properties:
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The earliest time of events to return from this call.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Latest time of events to return from this call.
        locale:
          allOf:
          - $ref: '#/components/schemas/LocaleCode'
          description: The locale code of the language used for the retrieved `NotificationEvent`.
            The default locale is English `(en_US)`.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: 'The matched event source.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        includeChildEvents:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Include aggregated child events in the result.
        aggregateNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: The Amazon Resource Name (ARN) of the `aggregatedNotificationEventArn`
            to match.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to be returned in this call.
            Defaults to 20.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The start token for paginated calls. Retrieved from the response
            of a previous `ListEventRules` call. Next token uses Base64 encoding.
    ListNotificationEventsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
        notificationEvents:
          allOf:
          - $ref: '#/components/schemas/NotificationEvents'
          description: The list of notification events.
      required:
      - notificationEvents
    ListNotificationHubsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of records to list in a single response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. Set to null to start listing notification
            hubs from the start.
    ListNotificationHubsResponse:
      type: object
      properties:
        notificationHubs:
          allOf:
          - $ref: '#/components/schemas/NotificationHubs'
          description: The `NotificationHubs` in the account.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token. If a non-null pagination token is returned
            in a result, pass its value in another request to retrieve more entries.
      required:
      - notificationHubs
    ListTagsForResourceRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) to use to list tags.
      required:
      - arn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags for the specified ARN.
    LocaleCode:
      type: string
      enum:
      - de_DE
      - en_CA
      - en_US
      - en_UK
      - es_ES
      - fr_CA
      - fr_FR
      - id_ID
      - it_IT
      - ja_JP
      - ko_KR
      - pt_BR
      - tr_TR
      - zh_CN
      - zh_TW
    ManagedNotificationChannelAssociationSummary:
      type: object
      properties:
        channelIdentifier:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unique identifier for the notification channel.
        channelType:
          allOf:
          - $ref: '#/components/schemas/ChannelType'
          description: "The type of notification channel used for message delivery.\n\
            \n  * Values:\n\n    * `ACCOUNT_CONTACT`\n\n      * Delivers notifications\
            \ to Account Managed contacts through the User Notification Service.\n\
            \n    * `MOBILE`\n\n      * Delivers notifications through the Amazon\
            \ Web Services Console Mobile Application to mobile devices.\n\n    *\
            \ `CHATBOT`\n\n      * Delivers notifications through Chatbot to collaboration\
            \ platforms (Slack, Chime).\n\n    * `EMAIL`\n\n      * Delivers notifications\
            \ to email addresses."
        overrideOption:
          allOf:
          - $ref: '#/components/schemas/ChannelAssociationOverrideOption'
          description: "Controls whether users can modify channel associations for\
            \ a notification configuration.\n\n  * Values:\n\n    * `ENABLED`\n\n\
            \      * Users can associate or disassociate channels with the notification\
            \ configuration.\n\n    * `DISABLED`\n\n      * Users cannot associate\
            \ or disassociate channels with the notification configuration."
      required:
      - channelIdentifier
      - channelType
      description: Provides a summary of channel associations for a managed notification
        configuration.
    ManagedNotificationChannelAssociations:
      type: array
      items:
        $ref: '#/components/schemas/ManagedNotificationChannelAssociationSummary'
    ManagedNotificationChildEvent:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: The schema version of the Managed Notification Child Event.
        id:
          allOf:
          - $ref: '#/components/schemas/NotificationEventId'
          description: The unique identifier for a Managed Notification Child Event.
        messageComponents:
          $ref: '#/components/schemas/MessageComponents'
        sourceEventDetailUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: The source event URL.
        sourceEventDetailUrlDisplayText:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The detailed URL for the source event.
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The type of event causing the notification.\n\n  * Values:\n\
            \n    * `ALERT`\n\n      * A notification about an event where something\
            \ was triggered, initiated, reopened, deployed, or a threshold was breached.\n\
            \n    * `WARNING`\n\n      * A notification about an event where an issue\
            \ is about to arise. For example, something is approaching a threshold.\n\
            \n    * `ANNOUNCEMENT`\n\n      * A notification about an important event.\
            \ For example, a step in a workflow or escalation path or that a workflow\
            \ was updated.\n\n    * `INFORMATIONAL`\n\n      * A notification about\
            \ informational messages. For example, recommendations, service announcements,\
            \ or reminders."
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "The assesed nature of the event.\n\n  * Values:\n\n    * `HEALTHY`\n\
            \n      * All `EventRules` are `ACTIVE`.\n\n    * `UNHEALTHY`\n\n    \
            \  * Some `EventRules` are `ACTIVE` and some are `INACTIVE`."
        aggregateManagedNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the ManagedNotificationEvent
            that is associated with this Managed Notification Child Event.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The notification event start time.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end time of the event.
        textParts:
          allOf:
          - $ref: '#/components/schemas/TextParts'
          description: A list of text values.
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The Organizational Unit Id that an Amazon Web Services account
            belongs to.
        aggregationDetail:
          allOf:
          - $ref: '#/components/schemas/AggregationDetail'
          description: Provides detailed information about the dimensions used for
            event summarization and aggregation.
      required:
      - schemaVersion
      - id
      - messageComponents
      - notificationType
      - aggregateManagedNotificationEventArn
      - textParts
      description: A ManagedNotificationChildEvent is a notification-focused representation
        of an event. They contain semantic information used to create aggregated or
        non-aggregated end-user notifications.
    ManagedNotificationChildEventArn:
      type: string
      pattern: ^arn:[-.a-z0-9]{1,63}:notifications::[0-9]{12}:managed-notification-configuration/category/[a-zA-Z0-9\-]{3,64}/sub-category/[a-zA-Z0-9\-]{3,64}/event/[a-z0-9]{27}/child-event/[a-z0-9]{27}$
    ManagedNotificationChildEventOverview:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationChildEvent`.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that related to the `ManagedNotificationChildEvent`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `ManagedNotificationChildEvent`.
        childEvent:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationChildEventSummary'
          description: The content of the `ManagedNotificationChildEvent`.
        aggregateManagedNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the ManagedNotificationEvent
            that is associated with this `ManagedNotificationChildEvent`.
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The Organizational Unit Id that an AWS account belongs to.
      required:
      - arn
      - managedNotificationConfigurationArn
      - relatedAccount
      - creationTime
      - childEvent
      - aggregateManagedNotificationEventArn
      description: Describes an overview and metadata for a `ManagedNotificationChildEvent`.
    ManagedNotificationChildEventSummary:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: The schema version of the `ManagedNotificationChildEvent`.
        sourceEventMetadata:
          allOf:
          - $ref: '#/components/schemas/ManagedSourceEventMetadataSummary'
          description: Contains all event metadata present identically across all
            `NotificationEvents`. All fields are present in Source Events via Eventbridge.
        messageComponents:
          $ref: '#/components/schemas/MessageComponentsSummary'
        aggregationDetail:
          allOf:
          - $ref: '#/components/schemas/AggregationDetail'
          description: Provides detailed information about the dimensions used for
            event summarization and aggregation.
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "The perceived nature of the event.\n\n  * Values:\n\n    *\
            \ `HEALTHY`\n\n      * All EventRules are `ACTIVE` and any call can be\
            \ run.\n\n    * `UNHEALTHY`\n\n      * Some EventRules are `ACTIVE` and\
            \ some are `INACTIVE`. Any call can be run."
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The Type of the event causing this notification.\n\n  * Values:\n\
            \n    * `ALERT`\n\n      * A notification about an event where something\
            \ was triggered, initiated, reopened, deployed, or a threshold was breached.\n\
            \n    * `WARNING`\n\n      * A notification about an event where an issue\
            \ is about to arise. For example, something is approaching a threshold.\n\
            \n    * `ANNOUNCEMENT`\n\n      * A notification about an important event.\
            \ For example, a step in a workflow or escalation path or that a workflow\
            \ was updated.\n\n    * `INFORMATIONAL`\n\n      * A notification about\
            \ informational messages. For example, recommendations, service announcements,\
            \ or reminders."
      required:
      - schemaVersion
      - sourceEventMetadata
      - messageComponents
      - aggregationDetail
      - eventStatus
      - notificationType
      description: Describes a short summary and metadata for a `ManagedNotificationChildEvent`.
    ManagedNotificationChildEvents:
      type: array
      items:
        $ref: '#/components/schemas/ManagedNotificationChildEventOverview'
    ManagedNotificationConfigurationDescription:
      type: string
      pattern: ^[^\u0001-\u001F\u007F-\u009F]*$
      minLength: 0
      maxLength: 256
    ManagedNotificationConfigurationName:
      type: string
      pattern: ^[A-Za-z0-9\-]+$
      minLength: 1
      maxLength: 64
    ManagedNotificationConfigurationOsArn:
      type: string
      pattern: ^arn:[-.a-z0-9]{1,63}:notifications::[0-9]{12}:managed-notification-configuration/category/[a-zA-Z0-9\-]{3,64}/sub-category/[a-zA-Z0-9\-]{3,64}$
    ManagedNotificationConfigurationStructure:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`.
        name:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationName'
          description: The name of the `ManagedNotificationConfiguration`.
        description:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationDescription'
          description: The description of the `ManagedNotificationConfiguration`.
      required:
      - arn
      - name
      - description
      description: Describes the basic structure and properties of a `ManagedNotificationConfiguration`.
    ManagedNotificationConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/ManagedNotificationConfigurationStructure'
    ManagedNotificationEvent:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: Version of the `ManagedNotificationEvent` schema.
        id:
          allOf:
          - $ref: '#/components/schemas/NotificationEventId'
          description: Unique identifier for a `ManagedNotificationEvent`.
        messageComponents:
          $ref: '#/components/schemas/MessageComponents'
        sourceEventDetailUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: URL defined by Source Service to be used by notification consumers
            to get additional information about event.
        sourceEventDetailUrlDisplayText:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Text that needs to be hyperlinked with the sourceEventDetailUrl.
            For example, the description of the sourceEventDetailUrl.
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The nature of the event causing this notification.\n\n  *\
            \ Values:\n\n    * `ALERT`\n\n      * A notification about an event where\
            \ something was triggered, initiated, reopened, deployed, or a threshold\
            \ was breached.\n\n    * `WARNING`\n\n      * A notification about an\
            \ event where an issue is about to arise. For example, something is approaching\
            \ a threshold.\n\n    * `ANNOUNCEMENT`\n\n      * A notification about\
            \ an important event. For example, a step in a workflow or escalation\
            \ path or that a workflow was updated.\n\n    * `INFORMATIONAL`\n\n  \
            \    * A notification about informational messages. For example, recommendations,\
            \ service announcements, or reminders."
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "The status of an event.\n\n  * Values:\n\n    * `HEALTHY`\n\
            \n      * All EventRules are `ACTIVE` and any call can be run.\n\n   \
            \ * `UNHEALTHY`\n\n      * Some EventRules are `ACTIVE` and some are `INACTIVE`.\
            \ Any call can be run."
        aggregationEventType:
          allOf:
          - $ref: '#/components/schemas/AggregationEventType'
          description: The notifications aggregation type.
        aggregationSummary:
          $ref: '#/components/schemas/AggregationSummary'
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The earliest time of events to return from this call.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end time of the notification event.
        textParts:
          allOf:
          - $ref: '#/components/schemas/TextParts'
          description: A list of text values.
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The Organizational Unit Id that an Amazon Web Services account
            belongs to.
      required:
      - schemaVersion
      - id
      - messageComponents
      - notificationType
      - textParts
      description: A notification-focused representation of an event. They contain
        semantic information used by AccountContacts or Additional Channels to create
        end-user notifications.
    ManagedNotificationEventArn:
      type: string
      pattern: ^arn:[-.a-z0-9]{1,63}:notifications::[0-9]{12}:managed-notification-configuration/category/[a-zA-Z0-9\-]{3,64}/sub-category/[a-zA-Z0-9\-]{3,64}/event/[a-z0-9]{27}$
    ManagedNotificationEventOverview:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationEventArn'
          description: The Amazon Resource Name (ARN) of the ManagedNotificationEvent.
        managedNotificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/ManagedNotificationConfigurationOsArn'
          description: The Amazon Resource Name (ARN) of the `ManagedNotificationConfiguration`.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account that related to the `ManagedNotificationEvent`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `ManagedNotificationEvent`.
        notificationEvent:
          $ref: '#/components/schemas/ManagedNotificationEventSummary'
        aggregationEventType:
          allOf:
          - $ref: '#/components/schemas/AggregationEventType'
          description: "The notifications aggregation type.\n\n  * Values:\n\n   \
            \ * `AGGREGATE`\n\n      * The notification event is an aggregate notification.\
            \ Aggregate notifications summarize grouped events over a specified time\
            \ period.\n\n    * `CHILD`\n\n      * Some `EventRules` are `ACTIVE` and\
            \ some are `INACTIVE`. Any call can be run.\n\n    * `NONE`\n\n      *\
            \ The notification isn't aggregated."
        organizationalUnitId:
          allOf:
          - $ref: '#/components/schemas/OrganizationalUnitId'
          description: The Organizational Unit Id that an Amazon Web Services account
            belongs to.
        aggregationSummary:
          $ref: '#/components/schemas/AggregationSummary'
        aggregatedNotificationRegions:
          allOf:
          - $ref: '#/components/schemas/AggregatedNotificationRegions'
          description: The list of the regions where the aggregated notifications
            in this `NotificationEvent` originated.
      required:
      - arn
      - managedNotificationConfigurationArn
      - relatedAccount
      - creationTime
      - notificationEvent
      description: Describes an overview and metadata for a ManagedNotificationEvent.
    ManagedNotificationEventSummary:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: The schema version of the `ManagedNotificationEvent`.
        sourceEventMetadata:
          allOf:
          - $ref: '#/components/schemas/ManagedSourceEventMetadataSummary'
          description: Contains metadata about the event that caused the `ManagedNotificationEvent`.
        messageComponents:
          $ref: '#/components/schemas/MessageComponentsSummary'
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "The managed notification event status.\n\n  * Values:\n\n\
            \    * `HEALTHY`\n\n      * All `EventRules` are `ACTIVE`.\n\n    * `UNHEALTHY`\n\
            \n      * Some `EventRules` are `ACTIVE` and some are `INACTIVE`."
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The Type of event causing the notification.\n\n  * Values:\n\
            \n    * `ALERT`\n\n      * A notification about an event where something\
            \ was triggered, initiated, reopened, deployed, or a threshold was breached.\n\
            \n    * `WARNING`\n\n      * A notification about an event where an issue\
            \ is about to arise. For example, something is approaching a threshold.\n\
            \n    * `ANNOUNCEMENT`\n\n      * A notification about an important event.\
            \ For example, a step in a workflow or escalation path or that a workflow\
            \ was updated.\n\n    * `INFORMATIONAL`\n\n      * A notification about\
            \ informational messages. For example, recommendations, service announcements,\
            \ or reminders."
      required:
      - schemaVersion
      - sourceEventMetadata
      - messageComponents
      - eventStatus
      - notificationType
      description: A short summary of a `ManagedNotificationEvent`. This is only used
        when listing managed notification events.
    ManagedNotificationEvents:
      type: array
      items:
        $ref: '#/components/schemas/ManagedNotificationEventOverview'
    ManagedRuleArn:
      type: string
      pattern: ^arn:aws:events:[a-z-\d]{2,25}:\d{12}:rule\/[a-zA-Z-\d]{1,1024}$
    ManagedRuleArns:
      type: array
      items:
        $ref: '#/components/schemas/ManagedRuleArn'
    ManagedSourceEventMetadataSummary:
      type: object
      properties:
        eventOriginRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Region where the notification originated.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: 'The source service of the notification.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventType:
          allOf:
          - $ref: '#/components/schemas/EventType'
          description: The event Type of the notification.
      required:
      - source
      - eventType
      description: A short summary and metadata for a managed notification event.
    Media:
      type: array
      items:
        $ref: '#/components/schemas/MediaElement'
    MediaElement:
      type: object
      properties:
        mediaId:
          allOf:
          - $ref: '#/components/schemas/MediaId'
          description: The unique ID for the media.
        type:
          allOf:
          - $ref: '#/components/schemas/MediaElementType'
          description: The type of media.
        url:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: The URL of the media.
        caption:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: The caption of the media.
      required:
      - mediaId
      - type
      - url
      - caption
      description: Describes a media element.
    MediaElementType:
      type: string
      enum:
      - IMAGE
    MediaId:
      type: string
      minLength: 1
      maxLength: 256
    MessageComponents:
      type: object
      properties:
        headline:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: A sentence long summary. For example, titles or an email subject
            line.
        paragraphSummary:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: A paragraph long or multiple sentence summary. For example,
            Chatbot notifications.
        completeDescription:
          allOf:
          - $ref: '#/components/schemas/TextPartReference'
          description: A complete summary with all possible relevant information.
        dimensions:
          allOf:
          - $ref: '#/components/schemas/Dimensions'
          description: 'A list of properties in key-value pairs. Pairs are shown in
            order of importance from most important to least important. Channels may
            limit the number of dimensions shown to the notification viewer.


            Included dimensions, keys, and values are subject to change.'
      description: Describes the components of a notification message.
    MessageComponentsSummary:
      type: object
      properties:
        headline:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A sentence long summary. For example, titles or an email subject
            line.
      required:
      - headline
      description: Contains the headline message component.
    NextToken:
      type: string
      pattern: ^[\w+-/=]+$
      minLength: 1
      maxLength: 4096
    NotificationConfigurationArn:
      type: string
      pattern: ^arn:aws:notifications::[0-9]{12}:configuration/[a-z0-9]{27}$
    NotificationConfigurationDescription:
      type: string
      pattern: ^[^\u0001-\u001F\u007F-\u009F]*$
      minLength: 0
      maxLength: 256
    NotificationConfigurationName:
      type: string
      pattern: ^[A-Za-z0-9_\-]+$
      minLength: 1
      maxLength: 64
    NotificationConfigurationStatus:
      type: string
      enum:
      - ACTIVE
      - PARTIALLY_ACTIVE
      - INACTIVE
      - DELETING
    NotificationConfigurationStructure:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) of the `NotificationConfiguration`
            resource.
        name:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationName'
          description: The name of the `NotificationConfiguration`. Supports RFC 3986's
            unreserved characters.
        description:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationDescription'
          description: The description of the `NotificationConfiguration`.
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationStatus'
          description: The current status of the `NotificationConfiguration`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `NotificationConfiguration`.
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/AggregationDuration'
          description: "The aggregation preference of the `NotificationConfiguration`.\n\
            \n  * Values:\n\n    * `LONG`\n\n      * Aggregate notifications for long\
            \ periods of time (12 hours).\n\n    * `SHORT`\n\n      * Aggregate notifications\
            \ for short periods of time (5 minutes).\n\n    * `NONE`\n\n      * Don't\
            \ aggregate notifications."
      required:
      - arn
      - name
      - description
      - status
      - creationTime
      description: Contains the complete list of fields for a NotificationConfiguration.
    NotificationConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/NotificationConfigurationStructure'
    NotificationEventArn:
      type: string
      pattern: ^arn:[-.a-z0-9]{1,63}:notifications:[-.a-z0-9]{1,63}:[0-9]{12}:configuration/[a-z0-9]{27}/event/[a-z0-9]{27}$
    NotificationEventId:
      type: string
      pattern: ^[a-z0-9]{27}$
    NotificationEventOverview:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: The Amazon Resource Name (ARN) of the resource.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the `NotificationConfiguration`.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The account name containing the `NotificationHub`.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The creation time of the `NotificationEvent`.
        notificationEvent:
          allOf:
          - $ref: '#/components/schemas/NotificationEventSummary'
          description: 'Refers to a `NotificationEventSummary` object.


            Similar in structure to `content` in the `GetNotificationEvent` response.'
        aggregationEventType:
          allOf:
          - $ref: '#/components/schemas/AggregationEventType'
          description: "The `NotificationConfiguration`'s aggregation type.\n\n  *\
            \ Values:\n\n    * `AGGREGATE`\n\n      * The notification event is an\
            \ aggregate notification. Aggregate notifications summarize grouped events\
            \ over a specified time period.\n\n    * `CHILD`\n\n      * Some `EventRules`\
            \ are `ACTIVE` and some are `INACTIVE`. Any call can be run.\n\n    *\
            \ `NONE`\n\n      * The notification isn't aggregated."
        aggregateNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: The ARN of the `aggregatedNotificationEventArn` to match.
        aggregationSummary:
          allOf:
          - $ref: '#/components/schemas/AggregationSummary'
          description: Provides an aggregated summary data for notification events.
      required:
      - arn
      - notificationConfigurationArn
      - relatedAccount
      - creationTime
      - notificationEvent
      description: Describes a short summary of a `NotificationEvent`. This is only
        used when listing notification events.
    NotificationEventSchema:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: The schema version of the Notification Event.
        id:
          allOf:
          - $ref: '#/components/schemas/NotificationEventId'
          description: The unique identifier for a `NotificationEvent`.
        sourceEventMetadata:
          allOf:
          - $ref: '#/components/schemas/SourceEventMetadata'
          description: The source event metadata.
        messageComponents:
          $ref: '#/components/schemas/MessageComponents'
        sourceEventDetailUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: The source event URL.
        sourceEventDetailUrlDisplayText:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The detailed URL for the source event.
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The type of event causing the notification.\n\n  * Values:\n\
            \n    * `ALERT`\n\n      * A notification about an event where something\
            \ was triggered, initiated, reopened, deployed, or a threshold was breached.\n\
            \n    * `WARNING`\n\n      * A notification about an event where an issue\
            \ is about to arise. For example, something is approaching a threshold.\n\
            \n    * `ANNOUNCEMENT`\n\n      * A notification about an important event.\
            \ For example, a step in a workflow or escalation path or that a workflow\
            \ was updated.\n\n    * `INFORMATIONAL`\n\n      * A notification about\
            \ informational messages. For example, recommendations, service announcements,\
            \ or reminders."
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "The assessed nature of the event.\n\n  * Values:\n\n    *\
            \ `HEALTHY`\n\n      * All `EventRules` are `ACTIVE` and any call can\
            \ be run.\n\n    * `UNHEALTHY`\n\n      * Some `EventRules` are `ACTIVE`\
            \ and some are `INACTIVE`. Any call can be run."
        aggregationEventType:
          allOf:
          - $ref: '#/components/schemas/AggregationEventType'
          description: "The aggregation type of the `NotificationConfiguration`.\n\
            \n  * Values:\n\n    * `AGGREGATE`\n\n      * The notification event is\
            \ an aggregate notification. Aggregate notifications summarize grouped\
            \ events over a specified time period.\n\n    * `CHILD`\n\n      * Some\
            \ `EventRules` are `ACTIVE` and some are `INACTIVE`. Any call can be run.\n\
            \n    * `NONE`\n\n      * The notification isn't aggregated."
        aggregateNotificationEventArn:
          allOf:
          - $ref: '#/components/schemas/NotificationEventArn'
          description: 'If the value of `aggregationEventType` is not `NONE`, this
            is the Amazon Resource Event (ARN) of the parent aggregate notification.


            This is omitted if notification isn''t aggregated.'
        aggregationSummary:
          allOf:
          - $ref: '#/components/schemas/AggregationSummary'
          description: Provides additional information about how multiple notifications
            are grouped.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The notification event start time.
        endTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The end time of the event.
        textParts:
          allOf:
          - $ref: '#/components/schemas/TextParts'
          description: A list of text values.
        media:
          allOf:
          - $ref: '#/components/schemas/Media'
          description: A list of media elements.
      required:
      - schemaVersion
      - id
      - sourceEventMetadata
      - messageComponents
      - notificationType
      - textParts
      - media
      description: A `NotificationEvent` is a notification-focused representation
        of an event. They contain semantic information used by Channels to create
        end-user notifications.
    NotificationEventSummary:
      type: object
      properties:
        schemaVersion:
          allOf:
          - $ref: '#/components/schemas/SchemaVersion'
          description: The schema version of the Notification Event.
        sourceEventMetadata:
          allOf:
          - $ref: '#/components/schemas/SourceEventMetadataSummary'
          description: The source event metadata.
        messageComponents:
          allOf:
          - $ref: '#/components/schemas/MessageComponentsSummary'
          description: The message components of a notification event.
        eventStatus:
          allOf:
          - $ref: '#/components/schemas/EventStatus'
          description: "Provides additional information about the current status of\
            \ the `NotificationEvent`.\n\n  * Values:\n\n    * `HEALTHY`\n\n     \
            \ * All `EventRules` are `ACTIVE`.\n\n    * `UNHEALTHY`\n\n      * Some\
            \ `EventRules` are `ACTIVE` and some are `INACTIVE`."
        notificationType:
          allOf:
          - $ref: '#/components/schemas/NotificationType'
          description: "The type of event causing the notification.\n\n  * Values:\n\
            \n    * `ALERT`\n\n      * A notification about an event where something\
            \ was triggered, initiated, reopened, deployed, or a threshold was breached.\n\
            \n    * `WARNING`\n\n      * A notification about an event where an issue\
            \ is about to arise. For example, something is approaching a threshold.\n\
            \n    * `ANNOUNCEMENT`\n\n      * A notification about an important event.\
            \ For example, a step in a workflow or escalation path or that a workflow\
            \ was updated.\n\n    * `INFORMATIONAL`\n\n      * A notification about\
            \ informational messages. For example, recommendations, service announcements,\
            \ or reminders."
      required:
      - schemaVersion
      - sourceEventMetadata
      - messageComponents
      - eventStatus
      - notificationType
      description: Describes a short summary and metadata for a `NotificationEvent`.
    NotificationEvents:
      type: array
      items:
        $ref: '#/components/schemas/NotificationEventOverview'
    NotificationHubOverview:
      type: object
      properties:
        notificationHubRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Region of the resource.
        statusSummary:
          allOf:
          - $ref: '#/components/schemas/NotificationHubStatusSummary'
          description: The status summary of the resource.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The date and time the `NotificationHubOverview` was created.
        lastActivationTime:
          allOf:
          - $ref: '#/components/schemas/LastActivationTime'
          description: The most recent time this `NotificationHub` had an `ACTIVE`
            status.
      required:
      - notificationHubRegion
      - statusSummary
      - creationTime
      description: 'Describes an overview of a `NotificationHub`.


        A `NotificationConfiguration` is an account-level setting used to select the
        Regions where you want to store, process and replicate your notifications.'
    NotificationHubStatus:
      type: string
      enum:
      - ACTIVE
      - REGISTERING
      - DEREGISTERING
      - INACTIVE
    NotificationHubStatusReason:
      type: string
    NotificationHubStatusSummary:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/NotificationHubStatus'
          description: "Status information about the `NotificationHub`.\n\n  * Values:\n\
            \n    * `ACTIVE`\n\n      * Incoming `NotificationEvents` are replicated\
            \ to this `NotificationHub`.\n\n    * `REGISTERING`\n\n      * The `NotificationConfiguration`\
            \ is initializing. A `NotificationConfiguration` with this status can't\
            \ be deregistered.\n\n    * `DEREGISTERING`\n\n      * The `NotificationConfiguration`\
            \ is being deleted. You can't register additional `NotificationHubs` in\
            \ the same Region as a `NotificationConfiguration` with this status."
        reason:
          allOf:
          - $ref: '#/components/schemas/NotificationHubStatusReason'
          description: An explanation for the current status.
      required:
      - status
      - reason
      description: Provides additional information about the current `NotificationHub`
        status.
    NotificationHubs:
      type: array
      items:
        $ref: '#/components/schemas/NotificationHubOverview'
    NotificationType:
      type: string
      enum:
      - ALERT
      - WARNING
      - ANNOUNCEMENT
      - INFORMATIONAL
    NotificationsAccessForOrganization:
      type: object
      properties:
        accessStatus:
          allOf:
          - $ref: '#/components/schemas/AccessStatus'
          description: Access Status for the Orgs Service.
      required:
      - accessStatus
      description: Orgs Service trust for User Notifications.
    OrganizationalUnitId:
      type: string
      pattern: ^Root|ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$
    QuotaCode:
      type: string
    Region:
      type: string
      pattern: ^([a-z]{1,2})-([a-z]{1,15}-)+([0-9])$
      minLength: 2
      maxLength: 25
    Regions:
      type: array
      items:
        $ref: '#/components/schemas/Region'
    RegisterNotificationHubRequest:
      type: object
      properties:
        notificationHubRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Region of the `NotificationHub`.
      required:
      - notificationHubRegion
    RegisterNotificationHubResponse:
      type: object
      properties:
        notificationHubRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Region of the `NotificationHub`.
        statusSummary:
          allOf:
          - $ref: '#/components/schemas/NotificationHubStatusSummary'
          description: Provides additional information about the current `NotificationConfiguration`
            status information.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The date the resource was created.
        lastActivationTime:
          allOf:
          - $ref: '#/components/schemas/LastActivationTime'
          description: The date the resource was last activated.
      required:
      - notificationHubRegion
      - statusSummary
      - creationTime
    Resource:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The unique identifier for the resource.


            At least one id or ARN is required.'
        arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Amazon Resource Name (ARN) of the resource. At least one
            id or ARN is required.
        detailUrl:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: The URL to the resource's detail page. If a detail page URL
            is unavailable, it is the URL to an informational page that describes
            the resource's type.
        tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A map of tags assigned to a resource. A tag is a string-to-string
            map of key-value pairs.
      description: A resource affected by or closely linked to an event.
    ResourceId:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource that wasn't found.
      required:
      - message
      - resourceId
      description: Request references a resource which does not exist.
    ResourceType:
      type: string
    Resources:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    SampleAggregationDimensionValues:
      type: array
      items:
        type: string
    SchemaVersion:
      type: string
      enum:
      - v1.0
    ServiceCode:
      type: string
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the resource that exceeds the service quota.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID of the resource that exceeds the service quota.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: The code for the service quota exceeded in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: The code for the service quota in [Service Quotas](https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html).
      required:
      - message
      - resourceType
      description: Request would cause a service quota to be exceeded.
    Source:
      type: string
      pattern: ^aws.([a-z0-9\-])+$
      minLength: 1
      maxLength: 36
    SourceEventMetadata:
      type: object
      properties:
        eventTypeVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version of the type of event.
        sourceEventId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The source event id.
        eventOriginRegion:
          allOf:
          - $ref: '#/components/schemas/Region'
          description: The Region the event originated from.
        relatedAccount:
          allOf:
          - $ref: '#/components/schemas/AccountId'
          description: The primary Amazon Web Services account of `SourceEvent`.
        source:
          allOf:
          - $ref: '#/components/schemas/Source'
          description: The Amazon Web Services service the event originates from.
            For example `aws.cloudwatch`.
        eventOccurrenceTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time the source event occurred. This is based
            on the Source Event.
        eventType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of event. For example, an Amazon CloudWatch state
            change.
        relatedResources:
          allOf:
          - $ref: '#/components/schemas/Resources'
          description: A list of resources related to this `NotificationEvent`.
      required:
      - eventTypeVersion
      - sourceEventId
      - relatedAccount
      - source
      - eventOccurrenceTime
      - eventType
      - relatedResources
      description: 'Describes the metadata for a source event.


        For more information, see [Event structure reference](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events-structure.html)
        in the _Amazon EventBridge User Guide_.'
    SourceEventMetadataSummary:
      type: object
      properties:
        eventOriginRegion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The Region where the notification originated.


            Unavailable for aggregated notifications.'
        source:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The matched event source.


            Must match one of the valid EventBridge sources. Only Amazon Web Services
            service sourced events are supported. For example, `aws.ec2` and `aws.cloudwatch`.
            For more information, see [Event delivery from Amazon Web Services services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
        eventType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The event type to match.


            Must match one of the valid Amazon EventBridge event types. For example,
            EC2 Instance State-change Notification and Amazon CloudWatch Alarm State
            Change. For more information, see [Event delivery from Amazon Web Services
            services](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level)
            in the _Amazon EventBridge User Guide_.'
      required:
      - source
      - eventType
      description: Contains metadata about the event that caused the `NotificationEvent`.
        For other specific values, see `sourceEventMetadata`.
    StatusSummaryByRegion:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EventRuleStatusSummary'
    SummarizationDimensionDetail:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the SummarizationDimensionDetail.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Value of the property used to summarize aggregated events.
      required:
      - name
      - value
      description: Provides detailed information about the dimensions used for event
        summarization and aggregation.
    SummarizationDimensionDetails:
      type: array
      items:
        $ref: '#/components/schemas/SummarizationDimensionDetail'
    SummarizationDimensionOverview:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Name of the summarization dimension.
        count:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Total number of occurrences for this dimension.
        sampleValues:
          allOf:
          - $ref: '#/components/schemas/SampleAggregationDimensionValues'
          description: Indicates the sample values found within the dimension.
      required:
      - name
      - count
      description: Provides an overview of how data is summarized across different
        dimensions.
    SummarizationDimensionOverviews:
      type: array
      items:
        $ref: '#/components/schemas/SummarizationDimensionOverview'
    TagKey:
      type: string
      pattern: ^(?!aws:).{1,128}$
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) to use to tag a resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A map of tags assigned to a resource. A tag is a string-to-string
            map of key-value pairs.
      required:
      - arn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tags:
      type: array
      items:
        type: string
    TextByLocale:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    TextPartId:
      type: string
      pattern: ^[A-Za-z0-9_]+$
      minLength: 1
      maxLength: 256
    TextPartReference:
      type: string
    TextPartType:
      type: string
      enum:
      - LOCALIZED_TEXT
      - PLAIN_TEXT
      - URL
    TextPartValue:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/TextPartType'
          description: The type of text part. Determines the usage of all other fields
            and whether or not they're required.
        displayText:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'A short single line description of the link. Must be hyper-linked
            with the URL itself.


            Used for text parts with the type `URL`.'
        textByLocale:
          allOf:
          - $ref: '#/components/schemas/TextByLocale'
          description: A map of locales to the text in that locale.
        url:
          allOf:
          - $ref: '#/components/schemas/Url'
          description: The URL itself.
      required:
      - type
      description: Describes text information objects containing fields that determine
        how text part objects are composed.
    TextParts:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TextPartValue'
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: Identifies the service being throttled.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: Identifies the quota that is being throttled.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of seconds a client should wait before retrying
            the request.
      required:
      - message
      description: Request was denied due to request throttling.
    UntagResourceRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) to use to untag a resource.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeys'
          description: The tag keys to use to untag a resource.
      required:
      - arn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateEventRuleRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The Amazon Resource Name (ARN) to use to update the `EventRule`.
        eventPattern:
          allOf:
          - $ref: '#/components/schemas/EventRuleEventPattern'
          description: 'An additional event pattern used to further filter the events
            this `EventRule` receives.


            For more information, see [Amazon EventBridge event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html)
            in the _Amazon EventBridge User Guide._'
        regions:
          allOf:
          - $ref: '#/components/schemas/Regions'
          description: A list of Amazon Web Services Regions that sends events to
            this `EventRule`.
      required:
      - arn
    UpdateEventRuleResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/EventRuleArn'
          description: The Amazon Resource Name (ARN) to use to update the `EventRule`.
        notificationConfigurationArn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN of the `NotificationConfiguration`.
        statusSummaryByRegion:
          allOf:
          - $ref: '#/components/schemas/StatusSummaryByRegion'
          description: The status of the action by Region.
      required:
      - arn
      - notificationConfigurationArn
      - statusSummaryByRegion
    UpdateNotificationConfigurationRequest:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The Amazon Resource Name (ARN) used to update the `NotificationConfiguration`.
        name:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationName'
          description: The name of the `NotificationConfiguration`.
        description:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationDescription'
          description: The description of the `NotificationConfiguration`.
        aggregationDuration:
          allOf:
          - $ref: '#/components/schemas/AggregationDuration'
          description: "The aggregation preference of the `NotificationConfiguration`.\n\
            \n  * Values:\n\n    * `LONG`\n\n      * Aggregate notifications for long\
            \ periods of time (12 hours).\n\n    * `SHORT`\n\n      * Aggregate notifications\
            \ for short periods of time (5 minutes).\n\n    * `NONE`\n\n      * Don't\
            \ aggregate notifications."
      required:
      - arn
    UpdateNotificationConfigurationResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/NotificationConfigurationArn'
          description: The ARN used to update the `NotificationConfiguration`.
      required:
      - arn
    Url:
      type: string
      pattern: ^(https?)://.*$
      maxLength: 2000
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The reason why your input is considered invalid.
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The list of input fields that are invalid.
      required:
      - message
      description: This exception is thrown when the notification event fails validation.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The field name where the invalid entry was detected.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message with the reason for the validation exception error.
      required:
      - name
      - message
      description: Stores information about a field passed inside a request that resulted
        in an exception.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - fieldValidationFailed
      - other
