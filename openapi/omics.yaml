openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: omics
  x-aws-serviceName: omics
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2022-11-28'
  title: Amazon Omics
  description: |-
    This is the _AWS HealthOmics API Reference_. For an introduction to the service, see [What is AWS HealthOmics?](https://docs.aws.amazon.com/omics/latest/dev/) in the _AWS HealthOmics User Guide_.
servers:
- description: The Amazon Omics regional endpoint
  url: https://omics.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/abort:
    delete:
      operationId: AbortMultipartReadSetUpload
      description: |-
        Stops a multipart upload.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UploadId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /share/{shareId}:
    post:
      operationId: AcceptShare
      description: |-
        Accept a resource share request.
      parameters:
      - name: shareId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteShare
      description: |-
        Deletes a resource share. If you are the resource owner, the subscriber will no longer have access to the shared resource. If you are the subscriber, this operation deletes your access to the share.
      parameters:
      - name: shareId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetShare
      description: |-
        Retrieves the metadata for the specified resource share.
      parameters:
      - name: shareId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/readset/batch/delete:
    post:
      operationId: BatchDeleteReadSet
      description: |-
        Deletes one or more read sets.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  $ref: '#/components/schemas/ReadSetIdList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/annotation/{jobId}:
    delete:
      operationId: CancelAnnotationImportJob
      description: |-
        Cancels an annotation import job.
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAnnotationImportJob
      description: |-
        Gets information about an annotation import job.
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /run/{id}/cancel:
    post:
      operationId: CancelRun
      description: |-
        Cancels a run.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/variant/{jobId}:
    delete:
      operationId: CancelVariantImportJob
      description: |-
        Cancels a variant import job.
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetVariantImportJob
      description: |-
        Gets information about a variant import job.
      parameters:
      - name: jobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ResourceId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/complete:
    post:
      operationId: CompleteMultipartReadSetUpload
      description: |-
        Concludes a multipart upload once you have uploaded all the components.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UploadId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parts:
                  $ref: '#/components/schemas/CompleteReadSetUploadPartList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore:
    post:
      operationId: CreateAnnotationStore
      description: |-
        Creates an annotation store.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  $ref: '#/components/schemas/ReferenceItem'
                name:
                  $ref: '#/components/schemas/StoreName'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
                versionName:
                  $ref: '#/components/schemas/VersionName'
                sseConfig:
                  $ref: '#/components/schemas/SseConfig'
                storeFormat:
                  $ref: '#/components/schemas/StoreFormat'
                storeOptions:
                  $ref: '#/components/schemas/StoreOptions'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore/{name}/version:
    post:
      operationId: CreateAnnotationStoreVersion
      description: |-
        Creates a new version of an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/StoreName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versionName:
                  $ref: '#/components/schemas/VersionName'
                description:
                  $ref: '#/components/schemas/Description'
                versionOptions:
                  $ref: '#/components/schemas/VersionOptions'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/upload:
    post:
      operationId: CreateMultipartReadSetUpload
      description: |-
        Begins a multipart read set upload.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sourceFileType:
                  $ref: '#/components/schemas/FileType'
                subjectId:
                  $ref: '#/components/schemas/SubjectId'
                sampleId:
                  $ref: '#/components/schemas/SampleId'
                generatedFrom:
                  $ref: '#/components/schemas/GeneratedFrom'
                referenceArn:
                  $ref: '#/components/schemas/ReferenceArn'
                name:
                  $ref: '#/components/schemas/ReadSetName'
                description:
                  $ref: '#/components/schemas/ReadSetDescription'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore:
    post:
      operationId: CreateReferenceStore
      description: |-
        Creates a reference store.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/ReferenceStoreName'
                description:
                  $ref: '#/components/schemas/ReferenceStoreDescription'
                sseConfig:
                  $ref: '#/components/schemas/SseConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /runCache:
    post:
      operationId: CreateRunCache
      description: |-
        You can create a run cache to save the task outputs from completed tasks in a run for a private workflow. Subsequent runs use the task outputs from the cache, rather than computing the task outputs again. You specify an Amazon S3 location where Amazon Web Services HealthOmics saves the cached data. This data must be immediately accessible (not in an archived state).

        For more information, see [Creating a run cache](https://docs.aws.amazon.com/omics/latest/dev/workflow-cache-create.html) in the Amazon Web Services HealthOmics User Guide.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cacheBehavior:
                  $ref: '#/components/schemas/CacheBehavior'
                cacheS3Location:
                  $ref: '#/components/schemas/S3UriForBucketOrObject'
                description:
                  $ref: '#/components/schemas/UserCustomDescription'
                name:
                  $ref: '#/components/schemas/UserCustomName'
                requestId:
                  $ref: '#/components/schemas/RunCacheRequestId'
                tags:
                  $ref: '#/components/schemas/TagMap'
                cacheBucketOwnerId:
                  $ref: '#/components/schemas/AwsAccountId'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListRunCaches
      description: |-
        Retrieves a list of your run caches.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ListToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /runGroup:
    post:
      operationId: CreateRunGroup
      description: |-
        You can optionally create a run group to limit the compute resources for the runs that you add to the group.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RunGroupName'
                maxCpus:
                  $ref: '#/components/schemas/Integer'
                maxRuns:
                  $ref: '#/components/schemas/Integer'
                maxDuration:
                  $ref: '#/components/schemas/Integer'
                tags:
                  $ref: '#/components/schemas/TagMap'
                requestId:
                  $ref: '#/components/schemas/RunGroupRequestId'
                maxGpus:
                  $ref: '#/components/schemas/Integer'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListRunGroups
      description: |-
        Retrieves a list of run groups.
      parameters:
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunGroupName'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunGroupListToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore:
    post:
      operationId: CreateSequenceStore
      description: |-
        Creates a sequence store.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/SequenceStoreName'
                description:
                  $ref: '#/components/schemas/SequenceStoreDescription'
                sseConfig:
                  $ref: '#/components/schemas/SseConfig'
                tags:
                  $ref: '#/components/schemas/TagMap'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                fallbackLocation:
                  $ref: '#/components/schemas/FallbackLocation'
                eTagAlgorithmFamily:
                  $ref: '#/components/schemas/ETagAlgorithmFamily'
                propagatedSetLevelTags:
                  $ref: '#/components/schemas/PropagatedSetLevelTags'
                s3AccessConfig:
                  $ref: '#/components/schemas/S3AccessConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /share:
    post:
      operationId: CreateShare
      description: |-
        Creates a cross-account shared resource. The resource owner makes an offer to share the resource with the principal subscriber (an AWS user with a different account than the resource owner).

        The following resources support cross-account sharing:

          * HealthOmics variant stores

          * HealthOmics annotation stores

          * Private workflows
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceArn:
                  $ref: '#/components/schemas/String'
                principalSubscriber:
                  $ref: '#/components/schemas/String'
                shareName:
                  $ref: '#/components/schemas/ShareName'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /variantStore:
    post:
      operationId: CreateVariantStore
      description: |-
        Creates a variant store.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reference:
                  $ref: '#/components/schemas/ReferenceItem'
                name:
                  $ref: '#/components/schemas/StoreName'
                description:
                  $ref: '#/components/schemas/Description'
                tags:
                  $ref: '#/components/schemas/TagMap'
                sseConfig:
                  $ref: '#/components/schemas/SseConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workflow:
    post:
      operationId: CreateWorkflow
      description: "Creates a private workflow.Private workflows depend on a variety\
        \ of resources that you create and configure before creating the workflow:\n\
        \n  * _Input data_ : Input data for the workflow, stored in an S3 bucket or\
        \ a Amazon Web Services HealthOmics sequence store. \n\n  * _Workflow definition\
        \ files_ : Define your workflow in one or more workflow definition files,\
        \ written in WDL, Nextflow, or CWL. The workflow definition specifies the\
        \ inputs and outputs for runs that use the workflow. It also includes specifications\
        \ for the runs and run tasks for your workflow, including compute and memory\
        \ requirements.\n\n  * _Parameter template files_ : Define run parameters\
        \ using a parameter template file (written in JSON). \n\n  * _ECR container\
        \ images_ : Create one or more container images for the workflow. Store the\
        \ images in a private ECR repository.\n\n  * (Optional) _Sentieon licenses_\
        \ : Request a Sentieon license if you plan to use Sentieon software in a private\
        \ workflow.\n\nFor more information, see [Creating or updating a private workflow\
        \ in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/creating-private-workflows.html)\
        \ in the Amazon Web Services HealthOmics User Guide."
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/WorkflowName'
                description:
                  $ref: '#/components/schemas/WorkflowDescription'
                engine:
                  $ref: '#/components/schemas/WorkflowEngine'
                definitionZip:
                  $ref: '#/components/schemas/Blob'
                definitionUri:
                  $ref: '#/components/schemas/WorkflowDefinition'
                main:
                  $ref: '#/components/schemas/WorkflowMain'
                parameterTemplate:
                  $ref: '#/components/schemas/WorkflowParameterTemplate'
                storageCapacity:
                  $ref: '#/components/schemas/Integer'
                tags:
                  $ref: '#/components/schemas/TagMap'
                requestId:
                  $ref: '#/components/schemas/WorkflowRequestId'
                accelerators:
                  $ref: '#/components/schemas/Accelerators'
                storageType:
                  $ref: '#/components/schemas/StorageType'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListWorkflows
      description: |-
        Retrieves a list of workflows.
      parameters:
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowType'
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowName'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowListToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workflow/{workflowId}/version:
    post:
      operationId: CreateWorkflowVersion
      description: |-
        Creates a new workflow version for the workflow that you specify with the `workflowId` parameter.

        When you create a new version of a workflow, you need to specify the configuration for the new version. It doesn't inherit any configuration values from the workflow.

        Provide a version name that is unique for this workflow. You cannot change the name after HealthOmics creates the version.

        Don’t include any personally identifiable information (PII) in the version name. Version names appear in the workflow version ARN.

        For more information, see [Workflow versioning in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versionName:
                  $ref: '#/components/schemas/WorkflowVersionName'
                definitionZip:
                  $ref: '#/components/schemas/Blob'
                definitionUri:
                  $ref: '#/components/schemas/WorkflowDefinition'
                accelerators:
                  $ref: '#/components/schemas/Accelerators'
                description:
                  $ref: '#/components/schemas/WorkflowVersionDescription'
                engine:
                  $ref: '#/components/schemas/WorkflowEngine'
                main:
                  $ref: '#/components/schemas/WorkflowMain'
                parameterTemplate:
                  $ref: '#/components/schemas/WorkflowParameterTemplate'
                requestId:
                  $ref: '#/components/schemas/WorkflowRequestId'
                storageType:
                  $ref: '#/components/schemas/StorageType'
                storageCapacity:
                  $ref: '#/components/schemas/Integer'
                tags:
                  $ref: '#/components/schemas/TagMap'
                workflowBucketOwnerId:
                  $ref: '#/components/schemas/WorkflowBucketOwnerId'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: ListWorkflowVersions
      description: |-
        Lists the workflow versions for the specified workflow. For more information, see [Workflow versioning in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowType'
      - name: workflowOwnerId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowOwnerId'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowVersionListToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore/{name}:
    delete:
      operationId: DeleteAnnotationStore
      description: |-
        Deletes an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: force
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PrimitiveBoolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetAnnotationStore
      description: |-
        Gets information about an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateAnnotationStore
      description: |-
        Updates an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore/{name}/versions/delete:
    post:
      operationId: DeleteAnnotationStoreVersions
      description: |-
        Deletes one or multiple versions of an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: force
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PrimitiveBoolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                versions:
                  $ref: '#/components/schemas/VersionList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/reference/{id}:
    delete:
      operationId: DeleteReference
      description: |-
        Deletes a genome reference.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceId'
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetReference
      description: |-
        Gets a reference file.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceId'
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      - name: Range
        in: header
        required: false
        schema:
          $ref: '#/components/schemas/Range'
      - name: partNumber
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Integer'
      - name: file
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ReferenceFile'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '416':
          description: |-
            The ranges specified in the request are not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{id}:
    delete:
      operationId: DeleteReferenceStore
      description: |-
        Deletes a genome reference store.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetReferenceStore
      description: |-
        Gets information about a reference store.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /run/{id}:
    delete:
      operationId: DeleteRun
      description: |-
        Deletes a workflow run.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRun
      description: |-
        Gets information about a workflow run.

        If a workflow is shared with you, you cannot export information about the run.

        Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. If GetRun doesn't return the requested run, you can find run logs for all runs in the CloudWatch logs. For more information about viewing the run logs, see [CloudWatch logs](https://docs.aws.amazon.com/omics/latest/dev/cloudwatch-logs.html) in the _in the Amazon Web Services HealthOmics User Guide_.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunId'
      - name: export
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunExportList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /runCache/{id}:
    delete:
      operationId: DeleteRunCache
      description: |-
        Delete a run cache. This action removes the cache metadata stored in the service account, but doesn't delete the data in Amazon S3. You can access the cache data in Amazon S3, for inspection or to troubleshoot issues. You can remove old cache data using standard S3 `Delete` operations.

        For more information, see [Deleting a run cache](https://docs.aws.amazon.com/omics/latest/dev/workflow-cache-delete.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunCacheId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRunCache
      description: |-
        Retrieve the details for the specified run cache.

        For more information, see [Call caching for Amazon Web Services HealthOmics runs](https://docs.aws.amazon.com/omics/latest/dev/workflow-call-caching.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunCacheId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateRunCache
      description: |-
        Update a run cache.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunCacheId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cacheBehavior:
                  $ref: '#/components/schemas/CacheBehavior'
                description:
                  $ref: '#/components/schemas/UserCustomDescription'
                name:
                  $ref: '#/components/schemas/UserCustomName'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /runGroup/{id}:
    delete:
      operationId: DeleteRunGroup
      description: |-
        Deletes a workflow run group.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunGroupId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetRunGroup
      description: |-
        Gets information about a workflow run group.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunGroupId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateRunGroup
      description: |-
        Updates a run group.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunGroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/RunGroupName'
                maxCpus:
                  $ref: '#/components/schemas/Integer'
                maxRuns:
                  $ref: '#/components/schemas/Integer'
                maxDuration:
                  $ref: '#/components/schemas/Integer'
                maxGpus:
                  $ref: '#/components/schemas/Integer'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /s3accesspolicy/{s3AccessPointArn}:
    delete:
      operationId: DeleteS3AccessPolicy
      description: |-
        Deletes an access policy for the specified store.
      parameters:
      - name: s3AccessPointArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/S3AccessPointArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetS3AccessPolicy
      description: |-
        Retrieves details about an access policy on a given store.
      parameters:
      - name: s3AccessPointArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/S3AccessPointArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: PutS3AccessPolicy
      description: |-
        Adds an access policy to the specified store.
      parameters:
      - name: s3AccessPointArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/S3AccessPointArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                s3AccessPolicy:
                  $ref: '#/components/schemas/S3AccessPolicy'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{id}:
    delete:
      operationId: DeleteSequenceStore
      description: |-
        Deletes a sequence store.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetSequenceStore
      description: |-
        Gets information about a sequence store.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    patch:
      operationId: UpdateSequenceStore
      description: |-
        Update one or more parameters for the sequence store.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/SequenceStoreName'
                description:
                  $ref: '#/components/schemas/SequenceStoreDescription'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                fallbackLocation:
                  $ref: '#/components/schemas/FallbackLocation'
                propagatedSetLevelTags:
                  $ref: '#/components/schemas/PropagatedSetLevelTags'
                s3AccessConfig:
                  $ref: '#/components/schemas/S3AccessConfig'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /variantStore/{name}:
    delete:
      operationId: DeleteVariantStore
      description: |-
        Deletes a variant store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: force
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/PrimitiveBoolean'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetVariantStore
      description: |-
        Gets information about a variant store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateVariantStore
      description: |-
        Updates a variant store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workflow/{id}:
    delete:
      operationId: DeleteWorkflow
      description: |-
        Deletes a workflow.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetWorkflow
      description: |-
        Gets information about a workflow.

        If a workflow is shared with you, you cannot export the workflow.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowType'
      - name: export
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowExportList'
      - name: workflowOwnerId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowOwnerId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateWorkflow
      description: |-
        Updates information about a workflow. For more information, see [Update a private workflow](https://docs.aws.amazon.com/omics/latest/dev/update-private-workflow.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: '#/components/schemas/WorkflowName'
                description:
                  $ref: '#/components/schemas/WorkflowDescription'
                storageType:
                  $ref: '#/components/schemas/StorageType'
                storageCapacity:
                  $ref: '#/components/schemas/Integer'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workflow/{workflowId}/version/{versionName}:
    delete:
      operationId: DeleteWorkflowVersion
      description: |-
        Deletes a workflow version. Deleting a workflow version doesn't affect any ongoing runs that are using the workflow version.

        For more information, see [Workflow versioning in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: versionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowVersionName'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetWorkflowVersion
      description: |-
        Gets information about a workflow version. For more information, see [Workflow versioning in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: versionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowVersionName'
      - name: type
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowType'
      - name: export
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowExportList'
      - name: workflowOwnerId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowOwnerId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateWorkflowVersion
      description: |-
        Updates information about the workflow version. For more information, see [Workflow versioning in Amazon Web Services HealthOmics](https://docs.aws.amazon.com/omics/latest/dev/workflow-versions.html) in the Amazon Web Services HealthOmics User Guide.
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: versionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowVersionName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/WorkflowVersionDescription'
                storageType:
                  $ref: '#/components/schemas/StorageType'
                storageCapacity:
                  $ref: '#/components/schemas/Integer'
      responses:
        '202': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore/{name}/version/{versionName}:
    get:
      operationId: GetAnnotationStoreVersion
      description: |-
        Retrieves the metadata for an annotation store version.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: versionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdateAnnotationStoreVersion
      description: |-
        Updates the description of an annotation store version.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: versionName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/readset/{id}:
    get:
      operationId: GetReadSet
      description: |-
        Gets a file from a read set.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReadSetId'
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: file
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/ReadSetFile'
      - name: partNumber
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '416':
          description: |-
            The ranges specified in the request are not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeNotSatisfiableException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/activationjob/{id}:
    get:
      operationId: GetReadSetActivationJob
      description: |-
        Gets information about a read set activation job.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ActivationJobId'
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/exportjob/{id}:
    get:
      operationId: GetReadSetExportJob
      description: |-
        Gets information about a read set export job.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ExportJobId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/importjob/{id}:
    get:
      operationId: GetReadSetImportJob
      description: |-
        Gets information about a read set import job.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ImportJobId'
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/readset/{id}/metadata:
    get:
      operationId: GetReadSetMetadata
      description: |-
        Gets details about a read set.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReadSetId'
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/importjob/{id}:
    get:
      operationId: GetReferenceImportJob
      description: |-
        Gets information about a reference import job.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ImportJobId'
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/reference/{id}/metadata:
    get:
      operationId: GetReferenceMetadata
      description: |-
        Gets information about a genome reference's metadata.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceId'
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /run/{id}/task/{taskId}:
    get:
      operationId: GetRunTask
      description: |-
        Gets information about a workflow run task.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunId'
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/annotations:
    post:
      operationId: ListAnnotationImportJobs
      description: |-
        Retrieves a list of annotation import jobs.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  $ref: '#/components/schemas/IdList'
                filter:
                  $ref: '#/components/schemas/ListAnnotationImportJobsFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStore/{name}/versions:
    post:
      operationId: ListAnnotationStoreVersions
      description: |-
        Lists the versions of an annotation store.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ListAnnotationStoreVersionsFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /annotationStores:
    post:
      operationId: ListAnnotationStores
      description: |-
        Retrieves a list of annotation stores.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  $ref: '#/components/schemas/IdList'
                filter:
                  $ref: '#/components/schemas/ListAnnotationStoresFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/uploads:
    post:
      operationId: ListMultipartReadSetUploads
      description: |-
        Lists multipart read set uploads and for in progress uploads. Once the upload is completed, a read set is created and the upload will no longer be returned in the response.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/activationjobs:
    post:
      operationId: ListReadSetActivationJobs
      description: |-
        Retrieves a list of read set activation jobs.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ActivateReadSetFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/exportjobs:
    post:
      operationId: ListReadSetExportJobs
      description: |-
        Retrieves a list of read set export jobs.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ExportReadSetFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/importjobs:
    post:
      operationId: ListReadSetImportJobs
      description: |-
        Retrieves a list of read set import jobs.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ImportReadSetFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/parts:
    post:
      operationId: ListReadSetUploadParts
      description: |-
        This operation will list all parts in a requested multipart upload for a sequence store.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UploadId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partSource:
                  $ref: '#/components/schemas/ReadSetPartSource'
                filter:
                  $ref: '#/components/schemas/ReadSetUploadPartListFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/readsets:
    post:
      operationId: ListReadSets
      description: |-
        Retrieves a list of read sets.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ReadSetFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/importjobs:
    post:
      operationId: ListReferenceImportJobs
      description: |-
        Retrieves a list of reference import jobs.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ImportReferenceFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestores:
    post:
      operationId: ListReferenceStores
      description: |-
        Retrieves a list of reference stores.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ReferenceStoreFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/references:
    post:
      operationId: ListReferences
      description: |-
        Retrieves a list of references.
      parameters:
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/ReferenceFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /run/{id}/task:
    get:
      operationId: ListRunTasks
      description: |-
        Retrieves a list of tasks for a run.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/RunId'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TaskStatus'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/TaskListToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /run:
    get:
      operationId: ListRuns
      description: |-
        Retrieves a list of runs.

        Amazon Web Services HealthOmics stores a fixed number of runs that are available to the console and API. If the ListRuns response doesn't include specific runs that you expected, you can find run logs for all runs in the CloudWatch logs. For more information about viewing the run logs, see [CloudWatch logs](https://docs.aws.amazon.com/omics/latest/dev/cloudwatch-logs.html) in the _Amazon Web Services HealthOmics User Guide_.
      parameters:
      - name: name
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunName'
      - name: runGroupId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunGroupId'
      - name: startingToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunListToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: status
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/RunStatus'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: StartRun
      description: |-
        Starts a new run or duplicates an existing run.

        For a new run, specify a unique `requestId`, the `workflowId`, and a role ARN. If you're using static run storage (the default), specify the required `storageCapacity`.

        You duplicate a run by specifing a unique `requestId`, the `runID` of the run to duplicate, and a role ARN.

        For more information about the optional parameters in the StartRun request, see [Starting a run](https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html) in the _Amazon Web Services HealthOmics User Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workflowId:
                  $ref: '#/components/schemas/WorkflowId'
                workflowType:
                  $ref: '#/components/schemas/WorkflowType'
                runId:
                  $ref: '#/components/schemas/RunId'
                roleArn:
                  $ref: '#/components/schemas/RunRoleArn'
                name:
                  $ref: '#/components/schemas/RunName'
                cacheId:
                  $ref: '#/components/schemas/NumericIdInArn'
                cacheBehavior:
                  $ref: '#/components/schemas/CacheBehavior'
                runGroupId:
                  $ref: '#/components/schemas/RunGroupId'
                priority:
                  $ref: '#/components/schemas/Integer'
                parameters:
                  $ref: '#/components/schemas/RunParameters'
                storageCapacity:
                  $ref: '#/components/schemas/Integer'
                outputUri:
                  $ref: '#/components/schemas/RunOutputUri'
                logLevel:
                  $ref: '#/components/schemas/RunLogLevel'
                tags:
                  $ref: '#/components/schemas/TagMap'
                requestId:
                  $ref: '#/components/schemas/RunRequestId'
                retentionMode:
                  $ref: '#/components/schemas/RunRetentionMode'
                storageType:
                  $ref: '#/components/schemas/StorageType'
                workflowOwnerId:
                  $ref: '#/components/schemas/WorkflowOwnerId'
                workflowVersionName:
                  $ref: '#/components/schemas/WorkflowVersionName'
      responses:
        '201': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestores:
    post:
      operationId: ListSequenceStores
      description: |-
        Retrieves a list of sequence stores.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/SequenceStoreFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /shares:
    post:
      operationId: ListShares
      description: |-
        Retrieves the resource shares associated with an account. Use the filter parameter to retrieve a specific subset of the shares.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceOwner:
                  $ref: '#/components/schemas/ResourceOwner'
                filter:
                  $ref: '#/components/schemas/Filter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Retrieves a list of tags for a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: TagResource
      description: |-
        Tags a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from a resource.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TagArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '204': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            The request cannot be applied to the target resource in its current state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/variants:
    post:
      operationId: ListVariantImportJobs
      description: |-
        Retrieves a list of variant import jobs.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  $ref: '#/components/schemas/IdList'
                filter:
                  $ref: '#/components/schemas/ListVariantImportJobsFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /variantStores:
    post:
      operationId: ListVariantStores
      description: |-
        Retrieves a list of variant stores.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Integer'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  $ref: '#/components/schemas/IdList'
                filter:
                  $ref: '#/components/schemas/ListVariantStoresFilter'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/annotation:
    post:
      operationId: StartAnnotationImportJob
      description: |-
        Starts an annotation import job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationName:
                  $ref: '#/components/schemas/StoreName'
                roleArn:
                  $ref: '#/components/schemas/Arn'
                items:
                  $ref: '#/components/schemas/AnnotationImportItemSources'
                versionName:
                  $ref: '#/components/schemas/VersionName'
                formatOptions:
                  $ref: '#/components/schemas/FormatOptions'
                runLeftNormalization:
                  $ref: '#/components/schemas/RunLeftNormalization'
                annotationFields:
                  $ref: '#/components/schemas/AnnotationFieldMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/activationjob:
    post:
      operationId: StartReadSetActivationJob
      description: |-
        Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sources:
                  $ref: '#/components/schemas/StartReadSetActivationJobSourceList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/exportjob:
    post:
      operationId: StartReadSetExportJob
      description: |-
        Exports a read set to Amazon S3.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destination:
                  $ref: '#/components/schemas/S3Destination'
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sources:
                  $ref: '#/components/schemas/ExportReadSetList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/importjob:
    post:
      operationId: StartReadSetImportJob
      description: |-
        Starts a read set import job.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sources:
                  $ref: '#/components/schemas/StartReadSetImportJobSourceList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /referencestore/{referenceStoreId}/importjob:
    post:
      operationId: StartReferenceImportJob
      description: |-
        Starts a reference import job.
      parameters:
      - name: referenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ReferenceStoreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleArn:
                  $ref: '#/components/schemas/RoleArn'
                clientToken:
                  $ref: '#/components/schemas/ClientToken'
                sources:
                  $ref: '#/components/schemas/StartReferenceImportJobSourceList'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /import/variant:
    post:
      operationId: StartVariantImportJob
      description: |-
        Starts a variant import job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationName:
                  $ref: '#/components/schemas/StoreName'
                roleArn:
                  $ref: '#/components/schemas/Arn'
                items:
                  $ref: '#/components/schemas/VariantImportItemSources'
                runLeftNormalization:
                  $ref: '#/components/schemas/RunLeftNormalization'
                annotationFields:
                  $ref: '#/components/schemas/AnnotationFieldMap'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sequencestore/{sequenceStoreId}/upload/{uploadId}/part:
    put:
      operationId: UploadReadSetPart
      description: |-
        This operation uploads a specific part of a read set. If you upload a new part using a previously used part number, the previously uploaded part will be overwritten.
      parameters:
      - name: sequenceStoreId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SequenceStoreId'
      - name: uploadId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UploadId'
      - name: partSource
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ReadSetPartSource'
      - name: partNumber
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Integer'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/ReadSetPartStreamingBlob'
      responses:
        '200': {}
        '403':
          description: |-
            You do not have sufficient access to perform this action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error occurred. Try the request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '405':
          description: |-
            The operation is not supported by Amazon Omics, or the API does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotSupportedOperationException'
        '408':
          description: |-
            The request timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
        '404':
          description: |-
            The target resource was not found in the current Region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The request exceeds a service quota.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request was denied due to request throttling.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The input fails to satisfy the constraints specified by an AWS service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AbortMultipartReadSetUploadRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store ID for the store involved in the multipart
            upload.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the multipart upload.
      required:
      - sequenceStoreId
      - uploadId
    AbortMultipartReadSetUploadResponse:
      type: object
      properties: {}
    Accelerators:
      type: string
      enum:
      - GPU
      minLength: 1
      maxLength: 64
    AcceptShareRequest:
      type: object
      properties:
        shareId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource share.
      required:
      - shareId
    AcceptShareResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ShareStatus'
          description: The status of the resource share.
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: You do not have sufficient access to perform this action.
    AccessLogLocation:
      type: string
      pattern: ^$|^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,800})/)?$
    ActivateReadSetFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          description: The filter's status.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: A read set activation job filter.
    ActivateReadSetJobItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
      required:
      - id
      - sequenceStoreId
      - status
      - creationTime
      description: A read set activation job.
    ActivateReadSetJobList:
      type: array
      items:
        $ref: '#/components/schemas/ActivateReadSetJobItem'
    ActivateReadSetSourceItem:
      type: object
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The source's read set ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobItemStatus'
          description: The source's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The source's status message.
      required:
      - readSetId
      - status
      description: A source for a read set activation job.
    ActivateReadSetSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ActivateReadSetSourceItem'
    ActivationJobId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    AnnotationFieldMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    AnnotationImportItemDetail:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The item's job status.
      required:
      - source
      - jobStatus
      description: Details about an imported annotation item.
    AnnotationImportItemDetails:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportItemDetail'
    AnnotationImportItemSource:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
      required:
      - source
      description: A source for an annotation import job.
    AnnotationImportItemSources:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportItemSource'
    AnnotationImportJobItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job's ID.
        destinationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job's destination annotation store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name of the annotation store version.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the job was updated.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          description: When the job completed.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - id
      - destinationName
      - versionName
      - roleArn
      - status
      - creationTime
      - updateTime
      description: An annotation import job.
    AnnotationImportJobItems:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationImportJobItem'
    AnnotationStoreItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          description: The store's file format.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The store's creation time.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The store's status message.
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The store's size in bytes.
      required:
      - id
      - reference
      - status
      - storeArn
      - name
      - storeFormat
      - description
      - sseConfig
      - creationTime
      - updateTime
      - statusMessage
      - storeSizeBytes
      description: An annotation store.
    AnnotationStoreItems:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationStoreItem'
    AnnotationStoreVersionItem:
      type: object
      properties:
        storeId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store ID for an annotation store version.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The annotation store version ID.
        status:
          allOf:
          - $ref: '#/components/schemas/VersionStatus'
          description: The status of an annotation store version.
        versionArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Arn for an annotation store version.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: A name given to an annotation store version to distinguish
            it from others.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name of an annotation store version.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an annotation store version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The time stamp for when an annotation store version was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: The time stamp for when an annotation store version was updated.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The status of an annotation store version.
        versionSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of an annotation store version in Bytes.
      required:
      - storeId
      - id
      - status
      - versionArn
      - name
      - versionName
      - description
      - creationTime
      - updateTime
      - statusMessage
      - versionSizeBytes
      description: Annotation store versions.
    AnnotationStoreVersionItems:
      type: array
      items:
        $ref: '#/components/schemas/AnnotationStoreVersionItem'
    AnnotationType:
      type: string
      enum:
      - GENERIC
      - CHR_POS
      - CHR_POS_REF_ALT
      - CHR_START_END_ONE_BASE
      - CHR_START_END_REF_ALT_ONE_BASE
      - CHR_START_END_ZERO_BASE
      - CHR_START_END_REF_ALT_ZERO_BASE
    Arn:
      type: string
      pattern: '^arn:([^:

        ]*):([^:

        ]*):([^:

        ]*):([0-9]{12}):([^:

        ]*)$'
      minLength: 20
      maxLength: 2048
    ArnList:
      type: array
      items:
        type: string
    AwsAccountId:
      type: string
      pattern: ^[0-9]+$
      minLength: 12
      maxLength: 12
    BatchDeleteReadSetRequest:
      type: object
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/ReadSetIdList'
          description: The read sets' IDs.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read sets' sequence store ID.
      required:
      - ids
      - sequenceStoreId
    BatchDeleteReadSetResponse:
      type: object
      properties:
        errors:
          allOf:
          - $ref: '#/components/schemas/ReadSetBatchErrorList'
          description: Errors returned by individual delete operations.
    CacheBehavior:
      type: string
      enum:
      - CACHE_ON_FAILURE
      - CACHE_ALWAYS
      minLength: 1
      maxLength: 64
    CancelAnnotationImportRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    CancelAnnotationImportResponse:
      type: object
      properties: {}
    CancelRunRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
      required:
      - id
    CancelVariantImportRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    CancelVariantImportResponse:
      type: object
      properties: {}
    ClientToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    CommentChar:
      type: string
      minLength: 1
      maxLength: 1
    CompleteMultipartReadSetUploadRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store ID for the store involved in the multipart
            upload.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the multipart upload.
        parts:
          allOf:
          - $ref: '#/components/schemas/CompleteReadSetUploadPartList'
          description: The individual uploads or parts of a multipart upload.
      required:
      - sequenceStoreId
      - uploadId
      - parts
    CompleteMultipartReadSetUploadResponse:
      type: object
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The read set ID created for an uploaded read set.
      required:
      - readSetId
    CompleteReadSetUploadPartList:
      type: array
      items:
        $ref: '#/components/schemas/CompleteReadSetUploadPartListItem'
    CompleteReadSetUploadPartListItem:
      type: object
      properties:
        partNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A number identifying the part in a read set upload.
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          description: The source file of the part being uploaded.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier used to confirm that parts are being added
            to the correct upload.
      required:
      - partNumber
      - partSource
      - checksum
      description: Part of the response to the CompleteReadSetUpload API, including
        metadata.
    CompletionTime:
      type: string
      format: date-time
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The request cannot be applied to the target resource in its current
        state.
    CreateAnnotationStoreRequest:
      type: object
      properties:
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The genome reference for the store's annotations.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version to distinguish
            it from other versions.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: Server-side encryption (SSE) settings for the store.
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          description: The annotation file format of the store.
        storeOptions:
          allOf:
          - $ref: '#/components/schemas/StoreOptions'
          description: File parsing options for the annotation store.
      required:
      - storeFormat
    CreateAnnotationStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference. Required for all stores except
            TSV format with generic annotations.
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          description: The annotation file format of the store.
        storeOptions:
          allOf:
          - $ref: '#/components/schemas/StoreOptions'
          description: The store's file parsing options.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version to distinguish
            it from other versions.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
      required:
      - id
      - status
      - name
      - versionName
      - creationTime
    CreateAnnotationStoreVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The name of an annotation store version from which versions
            are being created.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version to distinguish
            it from other versions.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an annotation store version.
        versionOptions:
          allOf:
          - $ref: '#/components/schemas/VersionOptions'
          description: The options for an annotation store version.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Any tags added to annotation store version.
      required:
      - name
      - versionName
    CreateAnnotationStoreVersionResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: A generated ID for the annotation store
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version to distinguish
            it from other versions.
        storeId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The ID for the annotation store from which new versions are
            being created.
        versionOptions:
          allOf:
          - $ref: '#/components/schemas/VersionOptions'
          description: The options for an annotation store version.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The name given to an annotation store version to distinguish
            it from other versions.
        status:
          allOf:
          - $ref: '#/components/schemas/VersionStatus'
          description: The status of a annotation store version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The time stamp for the creation of an annotation store version.
      required:
      - id
      - versionName
      - storeId
      - name
      - status
      - creationTime
    CreateMultipartReadSetUploadRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store ID for the store that is the destination
            of the multipart uploads.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: An idempotency token that can be used to avoid triggering multiple
            multipart uploads.
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The type of file being uploaded.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The source's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The source's sample ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: Where the source originated.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The ARN of the reference.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The name of the read set.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The description of the read set.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Any tags to add to the read set.
      required:
      - sequenceStoreId
      - sourceFileType
      - subjectId
      - sampleId
      - name
    CreateMultipartReadSetUploadResponse:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store ID for the store that the read set will
            be created in.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the initiated multipart upload.
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The file type of the read set source.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The source's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The source's sample ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: The source of the read set.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The read set source's reference ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The name of the read set.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The description of the read set.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags to add to the read set.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation time of the multipart upload.
      required:
      - sequenceStoreId
      - uploadId
      - sourceFileType
      - subjectId
      - sampleId
      - referenceArn
      - creationTime
    CreateReferenceStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          description: A description for the store.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: Server-side encryption (SSE) settings for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the store.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that requests don't run multiple times, specify a
            unique token for each request.
      required:
      - name
    CreateReferenceStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The store's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's SSE settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
      required:
      - id
      - arn
      - creationTime
    CreateRunCacheRequest:
      type: object
      properties:
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: 'Default cache behavior for runs that use this cache. Supported
            values are:


            `CACHE_ON_FAILURE`: Caches task outputs from completed tasks for runs
            that fail. This setting is useful if you''re debugging a workflow that
            fails after several tasks completed successfully. The subsequent run uses
            the cache outputs for previously-completed tasks if the task definition,
            inputs, and container in ECR are identical to the prior run.


            `CACHE_ALWAYS`: Caches task outputs from completed tasks for all runs.
            This setting is useful in development mode, but do not use it in a production
            setting.


            If you don''t specify a value, the default behavior is CACHE_ON_FAILURE.
            When you start a run that uses this cache, you can override the default
            cache behavior.


            For more information, see [Run cache behavior](https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior)
            in the Amazon Web Services HealthOmics User Guide.'
        cacheS3Location:
          allOf:
          - $ref: '#/components/schemas/S3UriForBucketOrObject'
          description: Specify the S3 location for storing the cached task outputs.
            This data must be immediately accessible (not in an archived state).
        description:
          allOf:
          - $ref: '#/components/schemas/UserCustomDescription'
          description: Enter a description of the run cache.
        name:
          allOf:
          - $ref: '#/components/schemas/UserCustomName'
          description: Enter a user-friendly name for the run cache.
        requestId:
          allOf:
          - $ref: '#/components/schemas/RunCacheRequestId'
          description: A unique request token, to ensure idempotency. If you don't
            specify a token, Amazon Web Services HealthOmics automatically generates
            a universally unique identifier (UUID) for the request.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Specify one or more tags to associate with this run cache.
        cacheBucketOwnerId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The Amazon Web Services account ID of the expected owner of
            the S3 bucket for the run cache. If not provided, your account ID is set
            as the owner of the bucket.
      required:
      - cacheS3Location
      - requestId
    CreateRunCacheResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunCacheArn'
          description: Unique resource identifier for the run cache.
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: Identifier for the run cache.
        status:
          allOf:
          - $ref: '#/components/schemas/RunCacheStatus'
          description: Run cache status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags associated with this run cache.
    CreateRunGroupRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          description: A name for the group.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of CPUs that can run concurrently across
            all active runs in the run group.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of runs that can be running at the same
            time.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum time for each run (in minutes). If a run exceeds
            the maximum run time, the run fails automatically.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the group.
        requestId:
          allOf:
          - $ref: '#/components/schemas/RunGroupRequestId'
          description: To ensure that requests don't run multiple times, specify a
            unique ID for each request.
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of GPUs that can run concurrently across
            all active runs in the run group.
      required:
      - requestId
    CreateRunGroupResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          description: The group's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The group's ID.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the run group.
    CreateSequenceStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: A description for the store.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: Server-side encryption (SSE) settings for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the store.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that requests don't run multiple times, specify a
            unique token for each request.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: An S3 location that is used to store files that have failed
            a direct upload.
        eTagAlgorithmFamily:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithmFamily'
          description: The ETag algorithm family to use for ingested read sets.
        propagatedSetLevelTags:
          allOf:
          - $ref: '#/components/schemas/PropagatedSetLevelTags'
          description: The tags keys to propagate to the S3 objects associated with
            read sets in the sequence store.
        s3AccessConfig:
          allOf:
          - $ref: '#/components/schemas/S3AccessConfig'
          description: S3 access configuration parameters
      required:
      - name
    CreateSequenceStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The store's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's SSE settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: An S3 location that is used to store files that have failed
            a direct upload.
        eTagAlgorithmFamily:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithmFamily'
          description: The algorithm family of the ETag.
        status:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatus'
          description: The status of the sequence store.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatusMessage'
          description: The status message of the sequence store.
        propagatedSetLevelTags:
          allOf:
          - $ref: '#/components/schemas/PropagatedSetLevelTags'
          description: The tags keys to propagate to the S3 objects associated with
            read sets in the sequence store.
        s3Access:
          $ref: '#/components/schemas/SequenceStoreS3Access'
      required:
      - id
      - arn
      - creationTime
    CreateShareRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ARN of the resource to be shared.
        principalSubscriber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The principal subscriber is the account being offered shared
            access to the resource.
        shareName:
          allOf:
          - $ref: '#/components/schemas/ShareName'
          description: A name that the owner defines for the share.
      required:
      - resourceArn
      - principalSubscriber
    CreateShareResponse:
      type: object
      properties:
        shareId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID that HealthOmics generates for the share.
        status:
          allOf:
          - $ref: '#/components/schemas/ShareStatus'
          description: The status of the share.
        shareName:
          allOf:
          - $ref: '#/components/schemas/ShareName'
          description: The name of the share.
    CreateVariantStoreRequest:
      type: object
      properties:
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The genome reference for the store's variants.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the store.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the store.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: Server-side encryption (SSE) settings for the store.
      required:
      - reference
    CreateVariantStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
      required:
      - id
      - status
      - name
      - creationTime
    CreateWorkflowRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          description: A name for the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          description: A description for the workflow.
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          description: The workflow engine for the workflow.
        definitionZip:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: A ZIP archive for the workflow.
        definitionUri:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          description: The URI of a definition for the workflow.
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          description: The path of the main definition file for the workflow.
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          description: A parameter template for the workflow.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default static storage capacity (in gibibytes) for runs
            that use this workflow or workflow version.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the workflow.
        requestId:
          allOf:
          - $ref: '#/components/schemas/WorkflowRequestId'
          description: To ensure that requests don't run multiple times, specify a
            unique ID for each request.
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          description: The computational accelerator specified to run the workflow.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for runs that use this workflow. STATIC
            storage allocates a fixed amount of storage. DYNAMIC storage dynamically
            scales the storage up or down, based on file system utilization. For more
            information about static and dynamic storage, see [Running workflows](https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html)
            in the _Amazon Web Services HealthOmics User Guide_.
      required:
      - requestId
    CreateWorkflowResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          description: The workflow's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The workflow's status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The workflow's tags.
        uuid:
          allOf:
          - $ref: '#/components/schemas/WorkflowUuid'
          description: The universally unique identifier (UUID) value for this workflow.
    CreateWorkflowVersionRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The ID of the workflow where you are creating the new version.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: 'A name for the workflow version. Provide a version name that
            is unique for this workflow. You cannot change the name after HealthOmics
            creates the version.


            The version name must start with a letter or number and it can include
            upper-case and lower-case letters, numbers, hyphens, periods and underscores.
            The maximum length is 64 characters. You can use a simple naming scheme,
            such as version1, version2, version3. You can also match your workflow
            versions with your own internal versioning conventions, such as 2.7.0,
            2.7.1, 2.7.2.'
        definitionZip:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: A zip archive containing the workflow definition for this workflow
            version.
        definitionUri:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          description: The URI specifies the location of the workflow definition for
            this workflow version.
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          description: The computational accelerator for this workflow version.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionDescription'
          description: A description for this workflow version.
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          description: The workflow engine for this workflow version.
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          description: The path of the main definition file for this workflow version.
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          description: The parameter template defines the input parameters for runs
            that use this workflow version.
        requestId:
          allOf:
          - $ref: '#/components/schemas/WorkflowRequestId'
          description: To ensure that requests don't run multiple times, specify a
            unique ID for each request.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for runs that use this workflow. STATIC
            storage allocates a fixed amount of storage. DYNAMIC storage dynamically
            scales the storage up or down, based on file system utilization. For more
            information about static and dynamic storage, see [Running workflows](https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html)
            in the _Amazon Web Services HealthOmics User Guide_.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default static storage capacity (in gibibytes) for runs
            that use this workflow or workflow version.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Optional tags to associate with this workflow version.
        workflowBucketOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowBucketOwnerId'
          description: Amazon Web Services Id of the owner of the S3 bucket that contains
            the workflow definition. You need to specify this parameter if your account
            is not the bucket owner.
      required:
      - workflowId
      - versionName
      - requestId
    CreateWorkflowVersionResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArn'
          description: ARN of the workflow version.
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The workflow version name.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The workflow version status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The workflow version's tags.
        uuid:
          allOf:
          - $ref: '#/components/schemas/WorkflowUuid'
          description: The universally unique identifier (UUID) value for this workflow
            version.
    CreationJobId:
      type: string
      pattern: ^[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 127
    CreationTime:
      type: string
      format: date-time
    CreationType:
      type: string
      enum:
      - IMPORT
      - UPLOAD
    DeleteAnnotationStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        force:
          allOf:
          - $ref: '#/components/schemas/PrimitiveBoolean'
          description: Whether to force deletion.
      required:
      - name
    DeleteAnnotationStoreResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
      required:
      - status
    DeleteAnnotationStoreVersionsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the annotation store from which versions are being
            deleted.
        versions:
          allOf:
          - $ref: '#/components/schemas/VersionList'
          description: The versions of an annotation store to be deleted.
        force:
          allOf:
          - $ref: '#/components/schemas/PrimitiveBoolean'
          description: Forces the deletion of an annotation store version when imports
            are in-progress..
      required:
      - name
      - versions
    DeleteAnnotationStoreVersionsResponse:
      type: object
      properties:
        errors:
          allOf:
          - $ref: '#/components/schemas/VersionDeleteErrorList'
          description: Any errors that occur when attempting to delete an annotation
            store version.
    DeleteReferenceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The reference's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The reference's store ID.
      required:
      - id
      - referenceStoreId
    DeleteReferenceResponse:
      type: object
      properties: {}
    DeleteReferenceStoreRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The store's ID.
      required:
      - id
    DeleteReferenceStoreResponse:
      type: object
      properties: {}
    DeleteRunCacheRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: Run cache identifier for the cache you want to delete.
      required:
      - id
    DeleteRunGroupRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The run group's ID.
      required:
      - id
    DeleteRunRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
      required:
      - id
    DeleteS3AccessPolicyRequest:
      type: object
      properties:
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: The S3 access point ARN that has the access policy.
      required:
      - s3AccessPointArn
    DeleteS3AccessPolicyResponse:
      type: object
      properties: {}
    DeleteSequenceStoreRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store's ID.
      required:
      - id
    DeleteSequenceStoreResponse:
      type: object
      properties: {}
    DeleteShareRequest:
      type: object
      properties:
        shareId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID for the resource share to be deleted.
      required:
      - shareId
    DeleteShareResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ShareStatus'
          description: The status of the share being deleted.
    DeleteVariantStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        force:
          allOf:
          - $ref: '#/components/schemas/PrimitiveBoolean'
          description: Whether to force deletion.
      required:
      - name
    DeleteVariantStoreResponse:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
      required:
      - status
    DeleteWorkflowRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
      required:
      - id
    DeleteWorkflowVersionRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The workflow version name.
      required:
      - workflowId
      - versionName
    Description:
      type: string
      minLength: 0
      maxLength: 500
    ETag:
      type: object
      properties:
        algorithm:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithm'
          description: The algorithm used to calculate the read set’s ETag(s).
        source1:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ETag hash calculated on Source1 of the read set.
        source2:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ETag hash calculated on Source2 of the read set.
      description: The entity tag (ETag) is a hash of the object representing its
        semantic content.
    ETagAlgorithm:
      type: string
      enum:
      - FASTQ_MD5up
      - BAM_MD5up
      - CRAM_MD5up
      - FASTQ_SHA256up
      - BAM_SHA256up
      - CRAM_SHA256up
      - FASTQ_SHA512up
      - BAM_SHA512up
      - CRAM_SHA512up
    ETagAlgorithmFamily:
      type: string
      enum:
      - MD5up
      - SHA256up
      - SHA512up
    Encoding:
      type: string
      minLength: 1
      maxLength: 20
    EncryptionType:
      type: string
      enum:
      - KMS
    EngineLogStream:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    EngineVersion:
      type: string
      pattern: ^[0-9]{2}.[0-9]{2}.[0-9]$
    EscapeChar:
      type: string
      minLength: 1
      maxLength: 1
    EscapeQuotes:
      type: boolean
      default: false
    ExportJobId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    ExportReadSet:
      type: object
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The set's ID.
      required:
      - readSetId
      description: A read set.
    ExportReadSetDetail:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The set's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobItemStatus'
          description: The set's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The set's status message.
      required:
      - id
      - status
      description: Details about a read set.
    ExportReadSetDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSetDetail'
    ExportReadSetFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          description: A status to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: An read set export job filter.
    ExportReadSetJobDetail:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          description: The job's destination in Amazon S3.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
      required:
      - id
      - sequenceStoreId
      - destination
      - status
      - creationTime
      description: Details about a read set export job.
    ExportReadSetJobDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSetJobDetail'
    ExportReadSetList:
      type: array
      items:
        $ref: '#/components/schemas/ExportReadSet'
    FallbackLocation:
      type: string
      pattern: ^$|^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?$
    FileInformation:
      type: object
      properties:
        totalParts:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The file's total parts.
        partSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The file's part size.
        contentLength:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The file's content length.
        s3Access:
          allOf:
          - $ref: '#/components/schemas/ReadSetS3Access'
          description: The S3 URI metadata of a sequence store.
      description: Details about a file.
    FileType:
      type: string
      enum:
      - FASTQ
      - BAM
      - CRAM
      - UBAM
    Filter:
      type: object
      properties:
        resourceArns:
          allOf:
          - $ref: '#/components/schemas/ArnList'
          description: Filter based on the Amazon Resource Number (ARN) of the resource.
            You can specify up to 10 values.
        status:
          allOf:
          - $ref: '#/components/schemas/StatusList'
          description: Filter based on the resource status. You can specify up to
            10 values.
        type:
          allOf:
          - $ref: '#/components/schemas/TypeList'
          description: The type of resources to be filtered. You can specify one or
            more of the resource types.
      description: Use filters to return a subset of resources. You can define filters
        for specific parameters, such as the resource status.
    FormatOptions:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TsvOptions'
        description: |-
          Options for a TSV file.
      - allOf:
        - $ref: '#/components/schemas/VcfOptions'
        description: |-
          Options for a VCF file.
      description: |-
        Formatting options for a file.
    FormatToHeader:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    FormatToHeaderKey:
      type: string
      enum:
      - CHR
      - START
      - END
      - REF
      - ALT
      - POS
    GeneratedFrom:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    GetAnnotationImportRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    GetAnnotationImportResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The job's destination annotation store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name of the annotation store version.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the job was updated.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          description: When the job completed.
        items:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportItemDetails'
          description: The job's imported items.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        formatOptions:
          $ref: '#/components/schemas/FormatOptions'
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - id
      - destinationName
      - versionName
      - roleArn
      - status
      - statusMessage
      - creationTime
      - updateTime
      - completionTime
      - items
      - runLeftNormalization
      - formatOptions
    GetAnnotationStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
      required:
      - name
    GetAnnotationStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The store's tags.
        storeOptions:
          allOf:
          - $ref: '#/components/schemas/StoreOptions'
          description: The store's parsing options.
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          description: The store's annotation file format.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: A status message.
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The store's size in bytes.
        numVersions:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: An integer indicating how many versions of an annotation store
            exist.
      required:
      - id
      - reference
      - status
      - storeArn
      - name
      - description
      - sseConfig
      - creationTime
      - updateTime
      - tags
      - statusMessage
      - storeSizeBytes
      - numVersions
    GetAnnotationStoreVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name given to an annotation store version to distinguish
            it from others.
        versionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name given to an annotation store version to distinguish
            it from others.
      required:
      - name
      - versionName
    GetAnnotationStoreVersionResponse:
      type: object
      properties:
        storeId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store ID for annotation store version.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The annotation store version ID.
        status:
          allOf:
          - $ref: '#/components/schemas/VersionStatus'
          description: The status of an annotation store version.
        versionArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The Arn for the annotation store.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The name of the annotation store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version to distinguish
            it from others.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for an annotation store version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The time stamp for when an annotation store version was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: The time stamp for when an annotation store version was updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Any tags associated with an annotation store version.
        versionOptions:
          allOf:
          - $ref: '#/components/schemas/VersionOptions'
          description: The options for an annotation store version.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The status of an annotation store version.
        versionSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of the annotation store version in Bytes.
      required:
      - storeId
      - id
      - status
      - versionArn
      - name
      - versionName
      - description
      - creationTime
      - updateTime
      - tags
      - statusMessage
      - versionSizeBytes
    GetReadSetActivationJobRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
      required:
      - id
      - sequenceStoreId
    GetReadSetActivationJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
        sources:
          allOf:
          - $ref: '#/components/schemas/ActivateReadSetSourceList'
          description: The job's source files.
      required:
      - id
      - sequenceStoreId
      - status
      - creationTime
    GetReadSetExportJobRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          description: The job's ID.
      required:
      - sequenceStoreId
      - id
    GetReadSetExportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          description: The job's destination in Amazon S3.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
        readSets:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetDetailList'
          description: The job's read sets.
      required:
      - id
      - sequenceStoreId
      - destination
      - status
      - creationTime
    GetReadSetImportJobRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
      required:
      - id
      - sequenceStoreId
    GetReadSetImportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
        sources:
          allOf:
          - $ref: '#/components/schemas/ImportReadSetSourceList'
          description: The job's source files.
      required:
      - id
      - sequenceStoreId
      - roleArn
      - status
      - creationTime
      - sources
    GetReadSetMetadataRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The read set's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
      required:
      - id
      - sequenceStoreId
    GetReadSetMetadataResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The read set's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReadSetArn'
          description: The read set's ARN.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The read set's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The read set's sample ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          description: The read set's status.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The read set's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The read set's description.
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The read set's file type.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the read set was created.
        sequenceInformation:
          allOf:
          - $ref: '#/components/schemas/SequenceInformation'
          description: The read set's sequence information.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The read set's genome reference ARN.
        files:
          allOf:
          - $ref: '#/components/schemas/ReadSetFiles'
          description: The read set's files.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatusMessage'
          description: The status message for a read set. It provides more detail
            as to why the read set has a status.
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          description: The creation type of the read set.
        etag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: The entity tag (ETag) is a hash of the object meant to represent
            its semantic content.
        creationJobId:
          allOf:
          - $ref: '#/components/schemas/CreationJobId'
          description: The read set's creation job ID.
      required:
      - id
      - arn
      - sequenceStoreId
      - status
      - fileType
      - creationTime
    GetReadSetRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The read set's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        file:
          allOf:
          - $ref: '#/components/schemas/ReadSetFile'
          description: The file to retrieve.
        partNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The part number to retrieve.
      required:
      - id
      - sequenceStoreId
      - partNumber
    GetReadSetResponse:
      type: object
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/ReadSetStreamingBlob'
          description: The read set file payload.
    GetReferenceImportJobRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
      required:
      - id
      - referenceStoreId
    GetReferenceImportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
        sources:
          allOf:
          - $ref: '#/components/schemas/ImportReferenceSourceList'
          description: The job's source files.
      required:
      - id
      - referenceStoreId
      - roleArn
      - status
      - creationTime
      - sources
    GetReferenceMetadataRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The reference's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The reference's reference store ID.
      required:
      - id
      - referenceStoreId
    GetReferenceMetadataResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The reference's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The reference's ARN.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The reference's reference store ID.
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          description: The reference's MD5 checksum.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceStatus'
          description: The reference's status.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          description: The reference's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          description: The reference's description.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the reference was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the reference was updated.
        files:
          allOf:
          - $ref: '#/components/schemas/ReferenceFiles'
          description: The reference's files.
        creationType:
          allOf:
          - $ref: '#/components/schemas/ReferenceCreationType'
          description: The reference's creation type.
        creationJobId:
          allOf:
          - $ref: '#/components/schemas/CreationJobId'
          description: The reference's creation job ID.
      required:
      - id
      - arn
      - referenceStoreId
      - md5
      - creationTime
      - updateTime
    GetReferenceRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The reference's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The reference's store ID.
        range:
          allOf:
          - $ref: '#/components/schemas/Range'
          description: The range to retrieve.
        partNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The part number to retrieve.
        file:
          allOf:
          - $ref: '#/components/schemas/ReferenceFile'
          description: The file to retrieve.
      required:
      - id
      - referenceStoreId
      - partNumber
    GetReferenceResponse:
      type: object
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/ReferenceStreamingBlob'
          description: The reference file payload.
    GetReferenceStoreRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The store's ID.
      required:
      - id
    GetReferenceStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The store's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
      required:
      - id
      - arn
      - creationTime
    GetRunCacheRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: The identifier of the run cache to retrieve.
      required:
      - id
    GetRunCacheResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunCacheArn'
          description: Unique resource identifier for the run cache.
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: The default cache behavior for runs using this cache.
        cacheBucketOwnerId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          description: The identifier of the bucket owner.
        cacheS3Uri:
          allOf:
          - $ref: '#/components/schemas/S3UriForBucketOrObject'
          description: The S3 URI where the cache data is stored.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunCacheTimestamp'
          description: Creation time of the run cache (an ISO 8601 formatted string).
        description:
          allOf:
          - $ref: '#/components/schemas/UserCustomDescription'
          description: The run cache description.
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: The run cache ID.
        name:
          allOf:
          - $ref: '#/components/schemas/UserCustomName'
          description: The run cache name.
        status:
          allOf:
          - $ref: '#/components/schemas/RunCacheStatus'
          description: The run cache status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The tags associated with the run cache.
    GetRunGroupRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The group's ID.
      required:
      - id
    GetRunGroupResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          description: The group's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The group's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          description: The group's name.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The group's maximum number of CPUs to use.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of concurrent runs for the group.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The group's maximum run time in minutes.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunGroupTimestamp'
          description: When the group was created.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The group's tags.
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum GPUs that can be used by a run group.
    GetRunRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        export:
          allOf:
          - $ref: '#/components/schemas/RunExportList'
          description: The run's export format.
      required:
      - id
    GetRunResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          description: The run's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        cacheId:
          allOf:
          - $ref: '#/components/schemas/NumericIdInArn'
          description: The run cache associated with the run.
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: The run cache behavior for the run.
        engineVersion:
          allOf:
          - $ref: '#/components/schemas/EngineVersion'
          description: The actual Nextflow engine version that Amazon Web Services
            HealthOmics used for the run. The other workflow definition languages
            don't provide a value for this field.
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          description: The run's status.
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The run's workflow ID.
        workflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The run's workflow type.
        runId:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RunRoleArn'
          description: The run's service role ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          description: The run's name.
        runGroupId:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The run's group ID.
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The run's priority.
        definition:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          description: The run's definition.
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          description: The run's digest.
        parameters:
          allOf:
          - $ref: '#/components/schemas/RunParameters'
          description: The run's parameters.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The run's storage capacity in gibibytes. For dynamic storage,
            after the run has completed, this value is the maximum amount of storage
            used during the run.
        outputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          description: The run's output URI.
        logLevel:
          allOf:
          - $ref: '#/components/schemas/RunLogLevel'
          description: The run's log level.
        resourceDigests:
          allOf:
          - $ref: '#/components/schemas/RunResourceDigests'
          description: The run's resource digests.
        startedBy:
          allOf:
          - $ref: '#/components/schemas/RunStartedBy'
          description: Who started the run.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: When the run was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: When the run started.
        stopTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: The run's stop time.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/RunStatusMessage'
          description: The run's status message.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The run's tags.
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          description: The computational accelerator used to run the workflow.
        retentionMode:
          allOf:
          - $ref: '#/components/schemas/RunRetentionMode'
          description: The run's retention mode.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/RunFailureReason'
          description: The reason a run has failed.
        logLocation:
          allOf:
          - $ref: '#/components/schemas/RunLogLocation'
          description: The location of the run log.
        uuid:
          allOf:
          - $ref: '#/components/schemas/RunUuid'
          description: The universally unique identifier for a run.
        runOutputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          description: The destination for workflow outputs.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The run's storage type.
        workflowOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowOwnerId'
          description: The ID of the workflow owner.
        workflowVersionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The workflow version name.
        workflowUuid:
          allOf:
          - $ref: '#/components/schemas/WorkflowUuid'
          description: The universally unique identifier (UUID) value for the workflow.
    GetRunTaskRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The workflow run ID.
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The task's ID.
      required:
      - id
      - taskId
    GetRunTaskResponse:
      type: object
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The task's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: The task's status.
        name:
          allOf:
          - $ref: '#/components/schemas/TaskName'
          description: The task's name.
        cpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The task's CPU usage.
        cacheHit:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to true if Amazon Web Services HealthOmics found a matching
            entry in the run cache for this task.
        cacheS3Uri:
          allOf:
          - $ref: '#/components/schemas/S3UriForBucketOrObject'
          description: The S3 URI of the cache location.
        memory:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The task's memory use in gigabytes.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: When the task was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: The task's start time.
        stopTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: The task's stop time.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/TaskStatusMessage'
          description: The task's status message.
        logStream:
          allOf:
          - $ref: '#/components/schemas/TaskLogStream'
          description: The task's log stream.
        gpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of Graphics Processing Units (GPU) specified in
            the task.
        instanceType:
          allOf:
          - $ref: '#/components/schemas/TaskInstanceType'
          description: The instance type for a task.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/TaskFailureReason'
          description: The reason a task has failed.
    GetS3AccessPolicyRequest:
      type: object
      properties:
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: The S3 access point ARN that has the access policy.
      required:
      - s3AccessPointArn
    GetS3AccessPolicyResponse:
      type: object
      properties:
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: The S3 access point ARN that has the access policy.
        storeId:
          allOf:
          - $ref: '#/components/schemas/StoreId'
          description: The Amazon Web Services-generated Sequence Store or Reference
            Store ID.
        storeType:
          allOf:
          - $ref: '#/components/schemas/StoreType'
          description: The type of store associated with the access point.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the policy was last updated.
        s3AccessPolicy:
          allOf:
          - $ref: '#/components/schemas/S3AccessPolicy'
          description: The current resource policy that controls S3 access on the
            store.
      required:
      - s3AccessPolicy
    GetSequenceStoreRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The store's ID.
      required:
      - id
    GetSequenceStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The store's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: An S3 location that is used to store files that have failed
            a direct upload.
        s3Access:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreS3Access'
          description: The S3 metadata of a sequence store, including the ARN and
            S3 URI of the S3 bucket.
        eTagAlgorithmFamily:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithmFamily'
          description: The algorithm family of the ETag.
        status:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatus'
          description: The status of the sequence store.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatusMessage'
          description: The status message of the sequence store.
        propagatedSetLevelTags:
          allOf:
          - $ref: '#/components/schemas/PropagatedSetLevelTags'
          description: The tags keys to propagate to the S3 objects associated with
            read sets in the sequence store.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last-updated time of the sequence store.
      required:
      - id
      - arn
      - creationTime
    GetShareRequest:
      type: object
      properties:
        shareId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the share.
      required:
      - shareId
    GetShareResponse:
      type: object
      properties:
        share:
          allOf:
          - $ref: '#/components/schemas/ShareDetails'
          description: A resource share details object. The object includes the status,
            the resourceArn, and ownerId.
    GetVariantImportRequest:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    GetVariantImportResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The job's destination variant store.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The job's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          description: The job's status message.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the job was updated.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          description: When the job completed.
        items:
          allOf:
          - $ref: '#/components/schemas/VariantImportItemDetails'
          description: The job's items.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - id
      - destinationName
      - roleArn
      - status
      - statusMessage
      - creationTime
      - updateTime
      - items
      - runLeftNormalization
    GetVariantStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
      required:
      - name
    GetVariantStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The store's tags.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The store's status message.
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The store's size in bytes.
      required:
      - id
      - reference
      - status
      - storeArn
      - name
      - description
      - sseConfig
      - creationTime
      - updateTime
      - tags
      - statusMessage
      - storeSizeBytes
    GetWorkflowRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow's type.
        export:
          allOf:
          - $ref: '#/components/schemas/WorkflowExportList'
          description: The export format for the workflow.
        workflowOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowOwnerId'
          description: The ID of the workflow owner.
      required:
      - id
    GetWorkflowResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          description: The workflow's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The workflow's status.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow's type.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          description: The workflow's name.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          description: The workflow's description.
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          description: The workflow's engine.
        definition:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          description: The workflow's definition.
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          description: The path of the main definition file for the workflow.
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          description: The workflow's digest.
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          description: The workflow's parameter template.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default static storage capacity (in gibibytes) for runs
            that use this workflow or workflow version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          description: When the workflow was created.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatusMessage'
          description: The workflow's status message.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The workflow's tags.
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          description: Gets metadata for the workflow.
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          description: The computational accelerator specified to run the workflow.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for runs using this workflow.
        uuid:
          allOf:
          - $ref: '#/components/schemas/WorkflowUuid'
          description: The universally unique identifier (UUID) value for this workflow.
    GetWorkflowVersionRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The workflow version name.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow's type.
        export:
          allOf:
          - $ref: '#/components/schemas/WorkflowExportList'
          description: The export format for the workflow.
        workflowOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowOwnerId'
          description: Amazon Web Services Id of the owner of the workflow.
      required:
      - workflowId
      - versionName
    GetWorkflowVersionResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArn'
          description: ARN of the workflow version.
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The workflow version name.
        accelerators:
          allOf:
          - $ref: '#/components/schemas/Accelerators'
          description: The accelerator for this workflow version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          description: When the workflow version was created.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionDescription'
          description: Description of the workflow version.
        definition:
          allOf:
          - $ref: '#/components/schemas/WorkflowDefinition'
          description: Definition of the workflow version.
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          description: The workflow version's digest.
        engine:
          allOf:
          - $ref: '#/components/schemas/WorkflowEngine'
          description: The workflow engine for this workflow version.
        main:
          allOf:
          - $ref: '#/components/schemas/WorkflowMain'
          description: The path of the main definition file for the workflow.
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          description: The metadata for the workflow version.
        parameterTemplate:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterTemplate'
          description: The parameter template for the workflow version.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The workflow version status
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatusMessage'
          description: The workflow version status message
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for the run.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default run storage capacity for static storage.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow version type
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The workflow version tags
        uuid:
          allOf:
          - $ref: '#/components/schemas/WorkflowUuid'
          description: The universally unique identifier (UUID) value for this workflow
            version
        workflowBucketOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowBucketOwnerId'
          description: Amazon Web Services Id of the owner of the bucket.
    Header:
      type: boolean
      default: false
    IdList:
      type: array
      items:
        $ref: '#/components/schemas/ResourceIdentifier'
    ImportJobId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    ImportReadSetFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          description: A status to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: A filter for import read set jobs.
    ImportReadSetJobItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The job's sequence store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
      required:
      - id
      - sequenceStoreId
      - roleArn
      - status
      - creationTime
      description: An import read set job.
    ImportReadSetJobList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReadSetJobItem'
    ImportReadSetSourceItem:
      type: object
      properties:
        sourceFiles:
          allOf:
          - $ref: '#/components/schemas/SourceFiles'
          description: The source files' location in Amazon S3.
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The source's file type.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobItemStatus'
          description: The source's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The source's status message.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The source's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The source's sample ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: Where the source originated.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The source's genome reference ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The source's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The source's description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The source's tags.
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The source's read set ID.
      required:
      - sourceFiles
      - sourceFileType
      - status
      - subjectId
      - sampleId
      description: A source for an import read set job.
    ImportReadSetSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReadSetSourceItem'
    ImportReferenceFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          description: A status to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: A filter for import references.
    ImportReferenceJobItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job completed.
      required:
      - id
      - referenceStoreId
      - roleArn
      - status
      - creationTime
      description: An import reference job.
    ImportReferenceJobList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReferenceJobItem'
    ImportReferenceSourceItem:
      type: object
      properties:
        sourceFile:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobItemStatus'
          description: The source's status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMessage'
          description: The source's status message.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          description: The source's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          description: The source's description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The source's tags.
        referenceId:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The source's reference ID.
      required:
      - status
      description: An genome reference source.
    ImportReferenceSourceList:
      type: array
      items:
        $ref: '#/components/schemas/ImportReferenceSourceItem'
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: An unexpected error occurred. Try the request again.
    JobStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLED
      - COMPLETED
      - FAILED
      - COMPLETED_WITH_FAILURES
    JobStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    JobStatusMsg:
      type: string
    LineSep:
      type: string
      minLength: 1
      maxLength: 20
    ListAnnotationImportJobsFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: A status to filter on.
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A store name to filter on.
      description: A filter for annotation import jobs.
    ListAnnotationImportJobsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of jobs to return in one page of results.
        ids:
          allOf:
          - $ref: '#/components/schemas/IdList'
          description: IDs of annotation import jobs to retrieve.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ListAnnotationImportJobsFilter'
          description: A filter to apply to the list.
    ListAnnotationImportJobsResponse:
      type: object
      properties:
        annotationImportJobs:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportJobItems'
          description: A list of jobs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the pagination token from a previous request to retrieve
            the next page of results.
    ListAnnotationStoreVersionsFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/VersionStatus'
          description: The status of an annotation store version.
      description: Use filters to focus the returned annotation store versions on
        a specific parameter, such as the status of the annotation store.
    ListAnnotationStoreVersionsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of an annotation store.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of annotation store versions to return in
            one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ListAnnotationStoreVersionsFilter'
          description: A filter to apply to the list of annotation store versions.
      required:
      - name
    ListAnnotationStoreVersionsResponse:
      type: object
      properties:
        annotationStoreVersions:
          allOf:
          - $ref: '#/components/schemas/AnnotationStoreVersionItems'
          description: Lists all versions of an annotation store.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the pagination token from a previous request to retrieve
            the next page of results.
    ListAnnotationStoresFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: A status to filter on.
      description: A filter for annotation stores.
    ListAnnotationStoresRequest:
      type: object
      properties:
        ids:
          allOf:
          - $ref: '#/components/schemas/IdList'
          description: IDs of stores to list.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of stores to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ListAnnotationStoresFilter'
          description: A filter to apply to the list.
    ListAnnotationStoresResponse:
      type: object
      properties:
        annotationStores:
          allOf:
          - $ref: '#/components/schemas/AnnotationStoreItems'
          description: A list of stores.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token that's included if more results are available.
    ListMultipartReadSetUploadsRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The Sequence Store ID used for the multipart uploads.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of multipart uploads returned in a page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Next token returned in the response of a previous ListMultipartReadSetUploads
            call. Used to get the next page of results.
      required:
      - sequenceStoreId
    ListMultipartReadSetUploadsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Next token returned in the response of a previous ListMultipartReadSetUploads
            call. Used to get the next page of results.
        uploads:
          allOf:
          - $ref: '#/components/schemas/MultipartReadSetUploadList'
          description: An array of multipart uploads.
    ListReadSetActivationJobsRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of read set activation jobs to return in
            one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ActivateReadSetFilter'
          description: A filter to apply to the list.
      required:
      - sequenceStoreId
    ListReadSetActivationJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        activationJobs:
          allOf:
          - $ref: '#/components/schemas/ActivateReadSetJobList'
          description: A list of jobs.
    ListReadSetExportJobsRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The jobs' sequence store ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of jobs to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetFilter'
          description: A filter to apply to the list.
      required:
      - sequenceStoreId
    ListReadSetExportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        exportJobs:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetJobDetailList'
          description: A list of jobs.
    ListReadSetImportJobsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of jobs to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The jobs' sequence store ID.
        filter:
          allOf:
          - $ref: '#/components/schemas/ImportReadSetFilter'
          description: A filter to apply to the list.
      required:
      - sequenceStoreId
    ListReadSetImportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        importJobs:
          allOf:
          - $ref: '#/components/schemas/ImportReadSetJobList'
          description: A list of jobs.
    ListReadSetUploadPartsRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The Sequence Store ID used for the multipart uploads.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the initiated multipart upload.
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          description: The source file for the upload part.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of read set upload parts returned in a page.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Next token returned in the response of a previous ListReadSetUploadPartsRequest
            call. Used to get the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ReadSetUploadPartListFilter'
          description: Attributes used to filter for a specific subset of read set
            part uploads.
      required:
      - sequenceStoreId
      - uploadId
      - partSource
    ListReadSetUploadPartsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Next token returned in the response of a previous ListReadSetUploadParts
            call. Used to get the next page of results.
        parts:
          allOf:
          - $ref: '#/components/schemas/ReadSetUploadPartList'
          description: An array of upload parts.
    ListReadSetsRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The jobs' sequence store ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of read sets to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ReadSetFilter'
          description: A filter to apply to the list.
      required:
      - sequenceStoreId
    ListReadSetsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        readSets:
          allOf:
          - $ref: '#/components/schemas/ReadSetList'
          description: A list of read sets.
      required:
      - readSets
    ListReferenceImportJobsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of jobs to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
        filter:
          allOf:
          - $ref: '#/components/schemas/ImportReferenceFilter'
          description: A filter to apply to the list.
      required:
      - referenceStoreId
    ListReferenceImportJobsResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        importJobs:
          allOf:
          - $ref: '#/components/schemas/ImportReferenceJobList'
          description: A lis of jobs.
    ListReferenceStoresRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of stores to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreFilter'
          description: A filter to apply to the list.
    ListReferenceStoresResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        referenceStores:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDetailList'
          description: A list of reference stores.
      required:
      - referenceStores
    ListReferencesRequest:
      type: object
      properties:
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The references' reference store ID.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of references to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ReferenceFilter'
          description: A filter to apply to the list.
      required:
      - referenceStoreId
    ListReferencesResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        references:
          allOf:
          - $ref: '#/components/schemas/ReferenceList'
          description: A list of references.
      required:
      - references
    ListRunCachesRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of results to return.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/ListToken'
          description: Optional pagination token returned from a prior call to the
            `ListRunCaches` API operation.
    ListRunCachesResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RunCacheList'
          description: Details about each run cache in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/ListToken'
          description: Pagination token to retrieve additional run caches. If the
            response does not have a `nextToken`value, you have reached to the end
            of the list.
    ListRunGroupsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          description: The run groups' name.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/RunGroupListToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of run groups to return in one page of results.
    ListRunGroupsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RunGroupList'
          description: A list of groups.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/RunGroupListToken'
          description: A pagination token that's included if more results are available.
    ListRunTasksRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: Filter the list by status.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/TaskListToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of run tasks to return in one page of results.
      required:
      - id
    ListRunTasksResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/TaskList'
          description: A list of tasks.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/TaskListToken'
          description: A pagination token that's included if more results are available.
    ListRunsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          description: Filter the list by run name.
        runGroupId:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: Filter the list by run group ID.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/RunListToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of runs to return in one page of results.
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          description: The status of a run.
    ListRunsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/RunList'
          description: A list of runs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/RunListToken'
          description: A pagination token that's included if more results are available.
    ListSequenceStoresRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of stores to return in one page of results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreFilter'
          description: A filter to apply to the list.
    ListSequenceStoresResponse:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that's included if more results are available.
        sequenceStores:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDetailList'
          description: A list of sequence stores.
      required:
      - sequenceStores
    ListSharesRequest:
      type: object
      properties:
        resourceOwner:
          allOf:
          - $ref: '#/components/schemas/ResourceOwner'
          description: The account that owns the resource shares.
        filter:
          allOf:
          - $ref: '#/components/schemas/Filter'
          description: Attributes that you use to filter for a specific subset of
            resource shares.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous ListReadSetUploadPartsRequest
            call. Used to get the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of shares to return in one page of results.
      required:
      - resourceOwner
    ListSharesResponse:
      type: object
      properties:
        shares:
          allOf:
          - $ref: '#/components/schemas/ShareDetailsList'
          description: The shares available and their metadata details.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Next token returned in the response of a previous ListSharesResponse
            call. Used to get the next page of results.
      required:
      - shares
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The resource's ARN.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: A list of tags.
      required:
      - tags
    ListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    ListVariantImportJobsFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: A status to filter on.
        storeName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A store name to filter on.
      description: A filter for variant import jobs.
    ListVariantImportJobsRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of import jobs to return in one page of
            results.
        ids:
          allOf:
          - $ref: '#/components/schemas/IdList'
          description: A list of job IDs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ListVariantImportJobsFilter'
          description: A filter to apply to the list.
    ListVariantImportJobsResponse:
      type: object
      properties:
        variantImportJobs:
          allOf:
          - $ref: '#/components/schemas/VariantImportJobItems'
          description: A list of jobs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token that's included if more results are available.
    ListVariantStoresFilter:
      type: object
      properties:
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: A status to filter on.
      description: A filter for variant stores.
    ListVariantStoresRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of stores to return in one page of results.
        ids:
          allOf:
          - $ref: '#/components/schemas/IdList'
          description: A list of store IDs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        filter:
          allOf:
          - $ref: '#/components/schemas/ListVariantStoresFilter'
          description: A filter to apply to the list.
    ListVariantStoresResponse:
      type: object
      properties:
        variantStores:
          allOf:
          - $ref: '#/components/schemas/VariantStoreItems'
          description: A list of variant stores.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A pagination token that's included if more results are available.
    ListWorkflowVersionsRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow type.
        workflowOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowOwnerId'
          description: Amazon Web Services Id of the owner of the workflow.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionListToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of workflows to return in one page of results.
      required:
      - workflowId
    ListWorkflowVersionsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionList'
          description: A list of workflow version items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionListToken'
          description: A pagination token that's included if more results are available.
    ListWorkflowsRequest:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: Filter the list by workflow type.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          description: Filter the list by workflow name.
        startingToken:
          allOf:
          - $ref: '#/components/schemas/WorkflowListToken'
          description: Specify the pagination token from a previous request to retrieve
            the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of workflows to return in one page of results.
    ListWorkflowsResponse:
      type: object
      properties:
        items:
          allOf:
          - $ref: '#/components/schemas/WorkflowList'
          description: A list of workflow items.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/WorkflowListToken'
          description: A pagination token that's included if more results are available.
    Md5:
      type: string
      pattern: ^[\p{L}||\p{N}]+$
      minLength: 1
      maxLength: 255
    MultipartReadSetUploadList:
      type: array
      items:
        $ref: '#/components/schemas/MultipartReadSetUploadListItem'
    MultipartReadSetUploadListItem:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The sequence store ID used for the multipart upload.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the initiated multipart upload.
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The type of file the read set originated from.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The read set source's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The read set source's sample ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: The source of an uploaded part.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The source's reference ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The name of a read set.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The description of a read set.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Any tags you wish to add to a read set.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time stamp for when a direct upload was created.
      required:
      - sequenceStoreId
      - uploadId
      - sourceFileType
      - subjectId
      - sampleId
      - generatedFrom
      - referenceArn
      - creationTime
      description: Part of the response to ListMultipartReadSetUploads, excluding
        completed and aborted multipart uploads.
    NextToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 6144
    NotSupportedOperationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The operation is not supported by Amazon Omics, or the API does
        not exist.
    NumericIdInArn:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    PropagatedSetLevelTags:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    PutS3AccessPolicyRequest:
      type: object
      properties:
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: The S3 access point ARN where you want to put the access policy.
        s3AccessPolicy:
          allOf:
          - $ref: '#/components/schemas/S3AccessPolicy'
          description: The resource policy that controls S3 access to the store.
      required:
      - s3AccessPointArn
      - s3AccessPolicy
    PutS3AccessPolicyResponse:
      type: object
      properties:
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: The S3 access point ARN that now has the access policy.
        storeId:
          allOf:
          - $ref: '#/components/schemas/StoreId'
          description: The Amazon Web Services-generated Sequence Store or Reference
            Store ID.
        storeType:
          allOf:
          - $ref: '#/components/schemas/StoreType'
          description: The type of store associated with the access point.
    Quote:
      type: string
      minLength: 1
      maxLength: 1
    QuoteAll:
      type: boolean
      default: false
    Range:
      type: string
      pattern: ^[\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    RangeNotSatisfiableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The ranges specified in the request are not valid.
    ReadOptions:
      type: object
      properties:
        sep:
          allOf:
          - $ref: '#/components/schemas/Separator'
          description: The file's field separator.
        encoding:
          allOf:
          - $ref: '#/components/schemas/Encoding'
          description: The file's encoding.
        quote:
          allOf:
          - $ref: '#/components/schemas/Quote'
          description: The file's quote character.
        quoteAll:
          allOf:
          - $ref: '#/components/schemas/QuoteAll'
          description: Whether all values need to be quoted, or just those that contain
            quotes.
        escape:
          allOf:
          - $ref: '#/components/schemas/EscapeChar'
          description: A character for escaping quotes in the file.
        escapeQuotes:
          allOf:
          - $ref: '#/components/schemas/EscapeQuotes'
          description: Whether quotes need to be escaped in the file.
        comment:
          allOf:
          - $ref: '#/components/schemas/CommentChar'
          description: The file's comment character.
        header:
          allOf:
          - $ref: '#/components/schemas/Header'
          description: Whether the file has a header row.
        lineSep:
          allOf:
          - $ref: '#/components/schemas/LineSep'
          description: A line separator for the file.
      description: Read options for an annotation import job.
    ReadSetActivationJobItemStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
    ReadSetActivationJobStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
    ReadSetArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 127
    ReadSetBatchError:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The error's ID.
        code:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error's code.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error's message.
      required:
      - id
      - code
      - message
      description: An error from a batch read set operation.
    ReadSetBatchErrorList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetBatchError'
    ReadSetDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 255
    ReadSetExportJobItemStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
    ReadSetExportJobStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
    ReadSetFile:
      type: string
      enum:
      - SOURCE1
      - SOURCE2
      - INDEX
    ReadSetFiles:
      type: object
      properties:
        source1:
          allOf:
          - $ref: '#/components/schemas/FileInformation'
          description: The location of the first file in Amazon S3.
        source2:
          allOf:
          - $ref: '#/components/schemas/FileInformation'
          description: The location of the second file in Amazon S3.
        index:
          allOf:
          - $ref: '#/components/schemas/FileInformation'
          description: The files' index.
      description: Files in a read set.
    ReadSetFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: A name to filter on.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          description: A status to filter on.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArnFilter'
          description: A genome reference ARN to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The read set source's sample ID.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The read set source's subject ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: Where the source originated.
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          description: The creation type of the read set.
      description: A filter for read sets.
    ReadSetId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    ReadSetIdList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetId'
    ReadSetImportJobItemStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
    ReadSetImportJobStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
    ReadSetList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetListItem'
    ReadSetListItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The read set's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReadSetArn'
          description: The read set's ARN.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The read set's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The read set's sample ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatus'
          description: The read set's status.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The read set's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The read set's description.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The read set's genome reference ARN.
        fileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The read set's file type.
        sequenceInformation:
          $ref: '#/components/schemas/SequenceInformation'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the read set was created.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/ReadSetStatusMessage'
          description: The status for a read set. It provides more detail as to why
            the read set has a status.
        creationType:
          allOf:
          - $ref: '#/components/schemas/CreationType'
          description: The creation type of the read set.
        etag:
          allOf:
          - $ref: '#/components/schemas/ETag'
          description: The entity tag (ETag) is a hash of the object representing
            its semantic content.
      required:
      - id
      - arn
      - sequenceStoreId
      - status
      - fileType
      - creationTime
      description: A read set.
    ReadSetName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    ReadSetPartSource:
      type: string
      enum:
      - SOURCE1
      - SOURCE2
    ReadSetPartStreamingBlob:
      type: string
      format: byte
    ReadSetS3Access:
      type: object
      properties:
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The S3 URI for each read set file.
      description: The S3 URI for each read set file.
    ReadSetStatus:
      type: string
      enum:
      - ARCHIVED
      - ACTIVATING
      - ACTIVE
      - DELETING
      - DELETED
      - PROCESSING_UPLOAD
      - UPLOAD_FAILED
    ReadSetStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 255
    ReadSetStreamingBlob:
      type: string
      format: byte
    ReadSetUploadPartList:
      type: array
      items:
        $ref: '#/components/schemas/ReadSetUploadPartListItem'
    ReadSetUploadPartListFilter:
      type: object
      properties:
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Filters for read set uploads after a specified time.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Filters for read set part uploads before a specified time.
      description: Filter settings that select for read set upload parts of interest.
    ReadSetUploadPartListItem:
      type: object
      properties:
        partNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number identifying the part in an upload.
        partSize:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The size of the the part in an upload.
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          description: The origin of the part being direct uploaded.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A unique identifier used to confirm that parts are being added
            to the correct upload.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time stamp for when a direct upload was created.
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time stamp for the most recent update to an uploaded part.
      required:
      - partNumber
      - partSize
      - partSource
      - checksum
      description: The metadata of a single part of a file that was added to a multipart
        upload. A list of these parts is returned in the response to the ListReadSetUploadParts
        API.
    ReferenceArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 127
    ReferenceArnFilter:
      type: string
      pattern: ^$|^arn:.+$
      minLength: 0
      maxLength: 127
    ReferenceCreationType:
      type: string
      enum:
      - IMPORT
    ReferenceDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 255
    ReferenceFile:
      type: string
      enum:
      - SOURCE
      - INDEX
    ReferenceFiles:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/FileInformation'
          description: The source file's location in Amazon S3.
        index:
          allOf:
          - $ref: '#/components/schemas/FileInformation'
          description: The files' index.
      description: A set of genome reference files.
    ReferenceFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          description: A name to filter on.
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          description: An MD5 checksum to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: A filter for references.
    ReferenceId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    ReferenceImportJobItemStatus:
      type: string
      enum:
      - NOT_STARTED
      - IN_PROGRESS
      - FINISHED
      - FAILED
    ReferenceImportJobStatus:
      type: string
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - CANCELLING
      - CANCELLED
      - FAILED
      - COMPLETED
      - COMPLETED_WITH_FAILURES
    ReferenceItem:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ReferenceArn'
        description: |-
          The reference's ARN.
      description: |-
        A genome reference.
    ReferenceList:
      type: array
      items:
        $ref: '#/components/schemas/ReferenceListItem'
    ReferenceListItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceId'
          description: The reference's ID.
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The reference's ARN.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The reference's store ID.
        md5:
          allOf:
          - $ref: '#/components/schemas/Md5'
          description: The reference's MD5 checksum.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceStatus'
          description: The reference's status.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          description: The reference's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          description: The reference's description.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the reference was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the reference was updated.
      required:
      - id
      - arn
      - referenceStoreId
      - md5
      - creationTime
      - updateTime
      description: A genome reference.
    ReferenceName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 3
      maxLength: 255
    ReferenceStatus:
      type: string
      enum:
      - ACTIVE
      - DELETING
      - DELETED
    ReferenceStoreArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 127
    ReferenceStoreDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 255
    ReferenceStoreDetail:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreArn'
          description: The store's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The store's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
      required:
      - arn
      - id
      - creationTime
      description: Details about a reference store.
    ReferenceStoreDetailList:
      type: array
      items:
        $ref: '#/components/schemas/ReferenceStoreDetail'
    ReferenceStoreFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreName'
          description: The name to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
      description: A filter for reference stores.
    ReferenceStoreId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    ReferenceStoreName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    ReferenceStreamingBlob:
      type: string
      format: byte
    RequestTimeoutException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The request timed out.
    ResourceId:
      type: string
      pattern: ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$
    ResourceIdentifier:
      type: string
      minLength: 1
      maxLength: 50
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The target resource was not found in the current Region.
    ResourceOwner:
      type: string
      enum:
      - SELF
      - OTHER
    RoleArn:
      type: string
      pattern: ^arn:.*
      minLength: 20
      maxLength: 2048
    RunArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    RunCacheArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    RunCacheId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    RunCacheList:
      type: array
      items:
        $ref: '#/components/schemas/RunCacheListItem'
    RunCacheListItem:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunCacheArn'
          description: Unique resource identifier for the run cache.
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: Default cache behavior for the run cache.
        cacheS3Uri:
          allOf:
          - $ref: '#/components/schemas/S3UriForBucketOrObject'
          description: The S3 uri for the run cache data.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunCacheTimestamp'
          description: The time that this run cache was created (an ISO 8601 formatted
            string).
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: The identifier for this run cache.
        name:
          allOf:
          - $ref: '#/components/schemas/UserCustomName'
          description: The name of the run cache.
        status:
          allOf:
          - $ref: '#/components/schemas/RunCacheStatus'
          description: The run cache status.
      description: List entry for one run cache.
    RunCacheRequestId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunCacheStatus:
      type: string
      enum:
      - ACTIVE
      - DELETED
      - FAILED
      minLength: 1
      maxLength: 64
    RunCacheTimestamp:
      type: string
      format: date-time
    RunExport:
      type: string
      enum:
      - DEFINITION
      minLength: 1
      maxLength: 64
    RunExportList:
      type: array
      items:
        $ref: '#/components/schemas/RunExport'
    RunFailureReason:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 64
    RunGroupArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    RunGroupId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    RunGroupList:
      type: array
      items:
        $ref: '#/components/schemas/RunGroupListItem'
    RunGroupListItem:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunGroupArn'
          description: The group's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The group's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          description: The group's name.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The group's maximum CPU count setting.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The group's maximum concurrent run setting.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The group's maximum duration setting in minutes.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunGroupTimestamp'
          description: When the group was created.
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum GPUs that can be used by a run group.
      description: A run group.
    RunGroupListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunGroupName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunGroupRequestId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunGroupTimestamp:
      type: string
      format: date-time
    RunId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    RunLeftNormalization:
      type: boolean
      default: false
    RunList:
      type: array
      items:
        $ref: '#/components/schemas/RunListItem'
    RunListItem:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          description: The run's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          description: The run's status.
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The run's workflow ID.
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          description: The run's name.
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The run's priority.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The run's storage capacity in gibibytes. For dynamic storage,
            after the run has completed, this value is the maximum amount of storage
            used during the run.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: When the run was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: When the run started.
        stopTime:
          allOf:
          - $ref: '#/components/schemas/RunTimestamp'
          description: When the run stopped.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The run's storage type.
        workflowVersionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The name of the workflow version.
      description: A workflow run.
    RunListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunLogLevel:
      type: string
      enum:
      - 'OFF'
      - FATAL
      - ERROR
      - ALL
      minLength: 1
      maxLength: 64
    RunLogLocation:
      type: object
      properties:
        engineLogStream:
          allOf:
          - $ref: '#/components/schemas/EngineLogStream'
          description: The log stream ARN for the engine log.
        runLogStream:
          allOf:
          - $ref: '#/components/schemas/RunLogStream'
          description: The log stream ARN for the run log.
      description: The URI for the run log.
    RunLogStream:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    RunName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunOutputUri:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 750
    RunParameters:
      type: object
      additionalProperties: true
    RunRequestId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    RunResourceDigest:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 0
      maxLength: 64
    RunResourceDigestKey:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    RunResourceDigests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RunResourceDigest'
    RunRetentionMode:
      type: string
      enum:
      - RETAIN
      - REMOVE
      minLength: 1
      maxLength: 64
    RunRoleArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    RunStartedBy:
      type: string
      minLength: 1
      maxLength: 128
    RunStatus:
      type: string
      enum:
      - PENDING
      - STARTING
      - RUNNING
      - STOPPING
      - COMPLETED
      - DELETED
      - CANCELLED
      - FAILED
      minLength: 1
      maxLength: 64
    RunStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    RunTimestamp:
      type: string
      format: date-time
    RunUuid:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    S3AccessConfig:
      type: object
      properties:
        accessLogLocation:
          allOf:
          - $ref: '#/components/schemas/AccessLogLocation'
          description: Location of the access logs.
      description: S3 access configuration parameters.
    S3AccessPointArn:
      type: string
      pattern: ^arn:[^:]*:s3:[^:]*:[^:]*:accesspoint/.*$
      minLength: 1
      maxLength: 1024
    S3AccessPolicy:
      type: string
      minLength: 1
      maxLength: 100000
    S3Destination:
      type: string
      pattern: ^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/?((.{1,1024})/)?$
    S3Uri:
      type: string
      pattern: ^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])/(.{1,1024})$
    S3UriForBucketOrObject:
      type: string
      pattern: ^s3://([a-z0-9][a-z0-9-.]{1,61}[a-z0-9])(/(.{0,1024}))?$
    SampleId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    Schema:
      type: array
      items:
        $ref: '#/components/schemas/SchemaItem'
    SchemaItem:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SchemaValueType'
    SchemaValueType:
      type: string
      enum:
      - LONG
      - INT
      - STRING
      - FLOAT
      - DOUBLE
      - BOOLEAN
    Separator:
      type: string
      minLength: 1
      maxLength: 20
    SequenceInformation:
      type: object
      properties:
        totalReadCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The sequence's total read count.
        totalBaseCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The sequence's total base count.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: Where the sequence originated.
        alignment:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The sequence's alignment setting.
      description: Details about a sequence.
    SequenceStoreArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 127
    SequenceStoreDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 255
    SequenceStoreDetail:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          description: The store's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The store's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the store was created.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: An S3 location that is used to store files that have failed
            a direct upload.
        eTagAlgorithmFamily:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithmFamily'
          description: The algorithm family of the ETag.
        status:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatus'
          description: Status of the sequence store.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatusMessage'
          description: The status message of the sequence store.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last-updated time of the Sequence Store.
      required:
      - arn
      - id
      - creationTime
      description: Details about a sequence store.
    SequenceStoreDetailList:
      type: array
      items:
        $ref: '#/components/schemas/SequenceStoreDetail'
    SequenceStoreFilter:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: A name to filter on.
        createdAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's start date.
        createdBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The filter's end date.
        status:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatus'
          description: Filter results based on status.
        updatedAfter:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Filter results based on stores updated after the specified
            time.
        updatedBefore:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Filter results based on stores updated before the specified
            time.
      description: A filter for a sequence store.
    SequenceStoreId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    SequenceStoreName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    SequenceStoreS3Access:
      type: object
      properties:
        s3Uri:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The S3 URI of the sequence store.
        s3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/S3AccessPointArn'
          description: This is ARN of the access point associated with the S3 bucket
            storing read sets.
        accessLogLocation:
          allOf:
          - $ref: '#/components/schemas/AccessLogLocation'
          description: Location of the access logs.
      description: The S3 access metadata of the sequence store.
    SequenceStoreStatus:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETING
      - FAILED
    SequenceStoreStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The request exceeds a service quota.
    ShareDetails:
      type: object
      properties:
        shareId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the resource share.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Arn of the shared resource.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The ID of the shared resource.
        principalSubscriber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The principal subscriber is the account that is sharing the
            resource.
        ownerId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The account ID for the data owner. The owner creates the resource
            share.
        status:
          allOf:
          - $ref: '#/components/schemas/ShareStatus'
          description: The status of the share.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The status message for a resource share. It provides additional
            details about the share status.
        shareName:
          allOf:
          - $ref: '#/components/schemas/ShareName'
          description: The name of the resource share.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The timestamp of when the resource share was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: The timestamp of the resource share update.
      description: The details of a resource share.
    ShareDetailsList:
      type: array
      items:
        $ref: '#/components/schemas/ShareDetails'
    ShareName:
      type: string
      pattern: ^[a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 256
    ShareResourceType:
      type: string
      enum:
      - VARIANT_STORE
      - ANNOTATION_STORE
      - WORKFLOW
    ShareStatus:
      type: string
      enum:
      - PENDING
      - ACTIVATING
      - ACTIVE
      - DELETING
      - DELETED
      - FAILED
    SourceFiles:
      type: object
      properties:
        source1:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The location of the first file in Amazon S3.
        source2:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The location of the second file in Amazon S3.
      required:
      - source1
      description: Source files for a sequence.
    SseConfig:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/EncryptionType'
          description: The encryption type.
        keyArn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An encryption key ARN.
      required:
      - type
      description: Server-side encryption (SSE) settings for a store.
    StartAnnotationImportRequest:
      type: object
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: A destination annotation store for the job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: A service role for the job.
        items:
          allOf:
          - $ref: '#/components/schemas/AnnotationImportItemSources'
          description: Items to import.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name of the annotation store version.
        formatOptions:
          allOf:
          - $ref: '#/components/schemas/FormatOptions'
          description: Formatting options for the annotation file.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - destinationName
      - roleArn
      - items
    StartAnnotationImportResponse:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    StartReadSetActivationJobRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that jobs don't run multiple times, specify a unique
            token for each job.
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReadSetActivationJobSourceList'
          description: The job's source files.
      required:
      - sequenceStoreId
      - sources
    StartReadSetActivationJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ActivationJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetActivationJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
      required:
      - id
      - sequenceStoreId
      - status
      - creationTime
    StartReadSetActivationJobSourceItem:
      type: object
      properties:
        readSetId:
          allOf:
          - $ref: '#/components/schemas/ReadSetId'
          description: The source's read set ID.
      required:
      - readSetId
      description: A source for a read set activation job.
    StartReadSetActivationJobSourceList:
      type: array
      items:
        $ref: '#/components/schemas/StartReadSetActivationJobSourceItem'
    StartReadSetExportJobRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          description: A location for exported files in Amazon S3.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that jobs don't run multiple times, specify a unique
            token for each job.
        sources:
          allOf:
          - $ref: '#/components/schemas/ExportReadSetList'
          description: The job's source files.
      required:
      - sequenceStoreId
      - destination
      - roleArn
      - sources
    StartReadSetExportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ExportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        destination:
          allOf:
          - $ref: '#/components/schemas/S3Destination'
          description: The job's output location.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetExportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
      required:
      - id
      - sequenceStoreId
      - destination
      - status
      - creationTime
    StartReadSetImportJobRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that jobs don't run multiple times, specify a unique
            token for each job.
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReadSetImportJobSourceList'
          description: The job's source files.
      required:
      - sequenceStoreId
      - roleArn
      - sources
    StartReadSetImportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The read set's sequence store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReadSetImportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
      required:
      - id
      - sequenceStoreId
      - roleArn
      - status
      - creationTime
    StartReadSetImportJobSourceItem:
      type: object
      properties:
        sourceFiles:
          allOf:
          - $ref: '#/components/schemas/SourceFiles'
          description: The source files' location in Amazon S3.
        sourceFileType:
          allOf:
          - $ref: '#/components/schemas/FileType'
          description: The source's file type.
        subjectId:
          allOf:
          - $ref: '#/components/schemas/SubjectId'
          description: The source's subject ID.
        sampleId:
          allOf:
          - $ref: '#/components/schemas/SampleId'
          description: The source's sample ID.
        generatedFrom:
          allOf:
          - $ref: '#/components/schemas/GeneratedFrom'
          description: Where the source originated.
        referenceArn:
          allOf:
          - $ref: '#/components/schemas/ReferenceArn'
          description: The source's reference ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/ReadSetName'
          description: The source's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReadSetDescription'
          description: The source's description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The source's tags.
      required:
      - sourceFiles
      - sourceFileType
      - subjectId
      - sampleId
      description: A source for a read set import job.
    StartReadSetImportJobSourceList:
      type: array
      items:
        $ref: '#/components/schemas/StartReadSetImportJobSourceItem'
    StartReferenceImportJobRequest:
      type: object
      properties:
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: A service role for the job.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that jobs don't run multiple times, specify a unique
            token for each job.
        sources:
          allOf:
          - $ref: '#/components/schemas/StartReferenceImportJobSourceList'
          description: The job's source files.
      required:
      - referenceStoreId
      - roleArn
      - sources
    StartReferenceImportJobResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ImportJobId'
          description: The job's ID.
        referenceStoreId:
          allOf:
          - $ref: '#/components/schemas/ReferenceStoreId'
          description: The job's reference store ID.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/ReferenceImportJobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: When the job was created.
      required:
      - id
      - referenceStoreId
      - roleArn
      - status
      - creationTime
    StartReferenceImportJobSourceItem:
      type: object
      properties:
        sourceFile:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
        name:
          allOf:
          - $ref: '#/components/schemas/ReferenceName'
          description: The source's name.
        description:
          allOf:
          - $ref: '#/components/schemas/ReferenceDescription'
          description: The source's description.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The source's tags.
      required:
      - sourceFile
      - name
      description: A source for a reference import job.
    StartReferenceImportJobSourceList:
      type: array
      items:
        $ref: '#/components/schemas/StartReferenceImportJobSourceItem'
    StartRunRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The run's workflow ID.
        workflowType:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The run's workflow type.
        runId:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The ID of a run to duplicate.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/RunRoleArn'
          description: A service role for the run.
        name:
          allOf:
          - $ref: '#/components/schemas/RunName'
          description: A name for the run.
        cacheId:
          allOf:
          - $ref: '#/components/schemas/NumericIdInArn'
          description: Identifier of the cache associated with this run. If you don't
            specify a cache ID, no task outputs are cached for this run.
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: The cache behavior for the run. You specify this value if you
            want to override the default behavior for the cache. You had set the default
            value when you created the cache. For more information, see [Run cache
            behavior](https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior)
            in the Amazon Web Services HealthOmics User Guide.
        runGroupId:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The run's group ID.
        priority:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A priority for the run.
        parameters:
          allOf:
          - $ref: '#/components/schemas/RunParameters'
          description: Parameters for the run.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The static storage capacity (in gibibytes) for this run. This
            field is not required if the storage type is dynamic (the system ignores
            any value that you enter).
        outputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          description: An output URI for the run.
        logLevel:
          allOf:
          - $ref: '#/components/schemas/RunLogLevel'
          description: A log level for the run.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the run.
        requestId:
          allOf:
          - $ref: '#/components/schemas/RunRequestId'
          description: To ensure that requests don't run multiple times, specify a
            unique ID for each request.
        retentionMode:
          allOf:
          - $ref: '#/components/schemas/RunRetentionMode'
          description: 'The retention mode for the run. The default value is RETAIN.


            Amazon Web Services HealthOmics stores a fixed number of runs that are
            available to the console and API. In the default mode (RETAIN), you need
            to remove runs manually when the number of run exceeds the maximum. If
            you set the retention mode to `REMOVE`, Amazon Web Services HealthOmics
            automatically removes runs (that have mode set to REMOVE) when the number
            of run exceeds the maximum. All run logs are available in CloudWatch logs,
            if you need information about a run that is no longer available to the
            API.


            For more information about retention mode, see [Specifying run retention
            mode](https://docs.aws.amazon.com/omics/latest/dev/starting-a-run.html)
            in the _Amazon Web Services HealthOmics User Guide_.'
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The storage type for the run. By default, the run uses STATIC
            storage type, which allocates a fixed amount of storage. If you set the
            storage type to DYNAMIC, Amazon Web Services HealthOmics dynamically scales
            the storage up or down, based on file system utilization. For more information
            about static and dynamic storage, see [Running workflows](https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html)
            in the _Amazon Web Services HealthOmics User Guide_.
        workflowOwnerId:
          allOf:
          - $ref: '#/components/schemas/WorkflowOwnerId'
          description: The ID of the workflow owner.
        workflowVersionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The name of the workflow version.
      required:
      - roleArn
      - requestId
    StartRunResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/RunArn'
          description: Unique resource identifier for the run.
        id:
          allOf:
          - $ref: '#/components/schemas/RunId'
          description: The run's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/RunStatus'
          description: The run's status.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The run's tags.
        uuid:
          allOf:
          - $ref: '#/components/schemas/RunUuid'
          description: The universally unique identifier for a run.
        runOutputUri:
          allOf:
          - $ref: '#/components/schemas/RunOutputUri'
          description: The destination for workflow outputs.
    StartVariantImportRequest:
      type: object
      properties:
        destinationName:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The destination variant store for the job.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: A service role for the job.
        items:
          allOf:
          - $ref: '#/components/schemas/VariantImportItemSources'
          description: Items to import.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - destinationName
      - roleArn
      - items
    StartVariantImportResponse:
      type: object
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The job's ID.
      required:
      - jobId
    StatusList:
      type: array
      items:
        $ref: '#/components/schemas/ShareStatus'
    StatusMessage:
      type: string
      minLength: 0
      maxLength: 1000
    StorageType:
      type: string
      enum:
      - STATIC
      - DYNAMIC
      minLength: 1
      maxLength: 64
    StoreFormat:
      type: string
      enum:
      - GFF
      - TSV
      - VCF
    StoreId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    StoreName:
      type: string
      pattern: ^([a-z]){1}([a-z0-9_]){2,254}$
      minLength: 3
      maxLength: 255
    StoreOptions:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TsvStoreOptions'
        description: |-
          File settings for a TSV store.
      description: |-
        Settings for a store.
    StoreStatus:
      type: string
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
      - FAILED
    StoreType:
      type: string
      enum:
      - SEQUENCE_STORE
      - REFERENCE_STORE
    SubjectId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 127
    TagArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The resource's ARN.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Tags for the resource.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TaskFailureReason:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 64
    TaskId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    TaskInstanceType:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    TaskList:
      type: array
      items:
        $ref: '#/components/schemas/TaskListItem'
    TaskListItem:
      type: object
      properties:
        taskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          description: The task's ID.
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          description: The task's status.
        name:
          allOf:
          - $ref: '#/components/schemas/TaskName'
          description: The task's name.
        cpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The task's CPU count.
        cacheHit:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Set to true if Amazon Web Services HealthOmics found a matching
            entry in the run cache for this task.
        cacheS3Uri:
          allOf:
          - $ref: '#/components/schemas/S3UriForBucketOrObject'
          description: The S3 URI of the cache location.
        memory:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The task's memory use in gigabyes.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: When the task was created.
        startTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: When the task started.
        stopTime:
          allOf:
          - $ref: '#/components/schemas/TaskTimestamp'
          description: When the task stopped.
        gpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of Graphics Processing Units (GPU) specified for
            the task.
        instanceType:
          allOf:
          - $ref: '#/components/schemas/TaskInstanceType'
          description: The instance type for a task.
      description: A workflow run task.
    TaskListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    TaskLogStream:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    TaskName:
      type: string
      minLength: 1
      maxLength: 128
    TaskStatus:
      type: string
      enum:
      - PENDING
      - STARTING
      - RUNNING
      - STOPPING
      - COMPLETED
      - CANCELLED
      - FAILED
      minLength: 1
      maxLength: 64
    TaskStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    TaskTimestamp:
      type: string
      format: date-time
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The request was denied due to request throttling.
    TsvOptions:
      type: object
      properties:
        readOptions:
          allOf:
          - $ref: '#/components/schemas/ReadOptions'
          description: The file's read options.
      description: Formatting options for a TSV file.
    TsvStoreOptions:
      type: object
      properties:
        annotationType:
          allOf:
          - $ref: '#/components/schemas/AnnotationType'
          description: The store's annotation type.
        formatToHeader:
          allOf:
          - $ref: '#/components/schemas/FormatToHeader'
          description: The store's header key to column name mapping.
        schema:
          allOf:
          - $ref: '#/components/schemas/Schema'
          description: The store's schema.
      description: File settings for a TSV store.
    TsvVersionOptions:
      type: object
      properties:
        annotationType:
          allOf:
          - $ref: '#/components/schemas/AnnotationType'
          description: The store version's annotation type.
        formatToHeader:
          allOf:
          - $ref: '#/components/schemas/FormatToHeader'
          description: The annotation store version's header key to column name mapping.
        schema:
          allOf:
          - $ref: '#/components/schemas/Schema'
          description: The TSV schema for an annotation store version.
      description: The options for a TSV file.
    TypeList:
      type: array
      items:
        $ref: '#/components/schemas/ShareResourceType'
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/TagArn'
          description: The resource's ARN.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: Keys of tags to remove.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateAnnotationStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the store.
      required:
      - name
    UpdateAnnotationStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
        storeOptions:
          allOf:
          - $ref: '#/components/schemas/StoreOptions'
          description: Parsing options for the store.
        storeFormat:
          allOf:
          - $ref: '#/components/schemas/StoreFormat'
          description: The annotation file format of the store.
      required:
      - id
      - reference
      - status
      - name
      - description
      - creationTime
      - updateTime
    UpdateAnnotationStoreVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of an annotation store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of an annotation store version.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an annotation store.
      required:
      - name
      - versionName
    UpdateAnnotationStoreVersionResponse:
      type: object
      properties:
        storeId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The annotation store ID.
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The annotation store version ID.
        status:
          allOf:
          - $ref: '#/components/schemas/VersionStatus'
          description: The status of an annotation store version.
        name:
          allOf:
          - $ref: '#/components/schemas/StoreName'
          description: The name of an annotation store.
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name of an annotation store version.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of an annotation store version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: The time stamp for when an annotation store version was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: The time stamp for when an annotation store version was updated.
      required:
      - storeId
      - id
      - status
      - name
      - versionName
      - description
      - creationTime
      - updateTime
    UpdateRunCacheRequest:
      type: object
      properties:
        cacheBehavior:
          allOf:
          - $ref: '#/components/schemas/CacheBehavior'
          description: Update the default run cache behavior.
        description:
          allOf:
          - $ref: '#/components/schemas/UserCustomDescription'
          description: Update the run cache description.
        id:
          allOf:
          - $ref: '#/components/schemas/RunCacheId'
          description: The identifier of the run cache you want to update.
        name:
          allOf:
          - $ref: '#/components/schemas/UserCustomName'
          description: Update the name of the run cache.
      required:
      - id
    UpdateRunGroupRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/RunGroupId'
          description: The group's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/RunGroupName'
          description: A name for the group.
        maxCpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of CPUs to use.
        maxRuns:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum number of concurrent runs for the group.
        maxDuration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: A maximum run time for the group in minutes.
        maxGpus:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The maximum GPUs that can be used by a run group.
      required:
      - id
    UpdateSequenceStoreRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The ID of the sequence store.
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: A name for the sequence store.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: A description for the sequence store.
        clientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: To ensure that requests don't run multiple times, specify a
            unique token for each request.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: The S3 URI of a bucket and folder to store Read Sets that fail
            to upload.
        propagatedSetLevelTags:
          allOf:
          - $ref: '#/components/schemas/PropagatedSetLevelTags'
          description: The tags keys to propagate to the S3 objects associated with
            read sets in the sequence store.
        s3AccessConfig:
          allOf:
          - $ref: '#/components/schemas/S3AccessConfig'
          description: S3 access configuration parameters.
      required:
      - id
    UpdateSequenceStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The ID of the sequence store.
        arn:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreArn'
          description: The ARN of the sequence store.
        name:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreName'
          description: The name of the sequence store.
        description:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreDescription'
          description: Description of the sequence store.
        sseConfig:
          $ref: '#/components/schemas/SseConfig'
        creationTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last-updated time of the Sequence Store.
        propagatedSetLevelTags:
          allOf:
          - $ref: '#/components/schemas/PropagatedSetLevelTags'
          description: The tags keys to propagate to the S3 objects associated with
            read sets in the sequence store.
        status:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatus'
          description: The status of the sequence store.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreStatusMessage'
          description: The status message of the sequence store.
        fallbackLocation:
          allOf:
          - $ref: '#/components/schemas/FallbackLocation'
          description: The S3 URI of a bucket and folder to store Read Sets that fail
            to upload.
        s3Access:
          $ref: '#/components/schemas/SequenceStoreS3Access'
        eTagAlgorithmFamily:
          allOf:
          - $ref: '#/components/schemas/ETagAlgorithmFamily'
          description: The ETag algorithm family to use on ingested read sets.
      required:
      - id
      - arn
      - creationTime
    UpdateTime:
      type: string
      format: date-time
    UpdateVariantStoreRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A name for the store.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description for the store.
      required:
      - name
    UpdateVariantStoreResponse:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
      required:
      - id
      - reference
      - status
      - name
      - description
      - creationTime
      - updateTime
    UpdateWorkflowRequest:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          description: A name for the workflow.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowDescription'
          description: A description for the workflow.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for runs that use this workflow. STATIC
            storage allocates a fixed amount of storage. DYNAMIC storage dynamically
            scales the storage up or down, based on file system utilization. For more
            information about static and dynamic storage, see [Running workflows](https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html)
            in the _Amazon Web Services HealthOmics User Guide_.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default static storage capacity (in gibibytes) for runs
            that use this workflow or workflow version.
      required:
      - id
    UpdateWorkflowVersionRequest:
      type: object
      properties:
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The name of the workflow version.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionDescription'
          description: Description of the workflow version.
        storageType:
          allOf:
          - $ref: '#/components/schemas/StorageType'
          description: The default storage type for runs that use this workflow. STATIC
            storage allocates a fixed amount of storage. DYNAMIC storage dynamically
            scales the storage up or down, based on file system utilization. For more
            information about static and dynamic storage, see [Running workflows](https://docs.aws.amazon.com/omics/latest/dev/Using-workflows.html)
            in the _Amazon Web Services HealthOmics User Guide_.
        storageCapacity:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The default static storage capacity (in gibibytes) for runs
            that use this workflow or workflow version.
      required:
      - workflowId
      - versionName
    UploadId:
      type: string
      pattern: ^[0-9]+$
      minLength: 10
      maxLength: 36
    UploadReadSetPartRequest:
      type: object
      properties:
        sequenceStoreId:
          allOf:
          - $ref: '#/components/schemas/SequenceStoreId'
          description: The Sequence Store ID used for the multipart upload.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          description: The ID for the initiated multipart upload.
        partSource:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartSource'
          description: The source file for an upload part.
        partNumber:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of the part being uploaded.
        payload:
          allOf:
          - $ref: '#/components/schemas/ReadSetPartStreamingBlob'
          description: The read set data to upload for a part.
      required:
      - sequenceStoreId
      - uploadId
      - partSource
      - partNumber
      - payload
    UploadReadSetPartResponse:
      type: object
      properties:
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An identifier used to confirm that parts are being added to
            the intended upload.
      required:
      - checksum
    UserCustomDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    UserCustomName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      required:
      - message
      description: The input fails to satisfy the constraints specified by an AWS
        service.
    VariantImportItemDetail:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The item's job status.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/JobStatusMsg'
          description: A message that provides additional context about a job
      required:
      - source
      - jobStatus
      description: Details about an imported variant item.
    VariantImportItemDetails:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportItemDetail'
    VariantImportItemSource:
      type: object
      properties:
        source:
          allOf:
          - $ref: '#/components/schemas/S3Uri'
          description: The source file's location in Amazon S3.
      required:
      - source
      description: A imported variant item's source.
    VariantImportItemSources:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportItemSource'
    VariantImportJobItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job's ID.
        destinationName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The job's destination variant store.
        roleArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The job's service role ARN.
        status:
          allOf:
          - $ref: '#/components/schemas/JobStatus'
          description: The job's status.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the job was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the job was updated.
        completionTime:
          allOf:
          - $ref: '#/components/schemas/CompletionTime'
          description: When the job completed.
        runLeftNormalization:
          allOf:
          - $ref: '#/components/schemas/RunLeftNormalization'
          description: The job's left normalization setting.
        annotationFields:
          allOf:
          - $ref: '#/components/schemas/AnnotationFieldMap'
          description: The annotation schema generated by the parsed annotation data.
      required:
      - id
      - destinationName
      - roleArn
      - status
      - creationTime
      - updateTime
      description: A variant import job.
    VariantImportJobItems:
      type: array
      items:
        $ref: '#/components/schemas/VariantImportJobItem'
    VariantStoreItem:
      type: object
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The store's ID.
        reference:
          allOf:
          - $ref: '#/components/schemas/ReferenceItem'
          description: The store's genome reference.
        status:
          allOf:
          - $ref: '#/components/schemas/StoreStatus'
          description: The store's status.
        storeArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The store's ARN.
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The store's name.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The store's description.
        sseConfig:
          allOf:
          - $ref: '#/components/schemas/SseConfig'
          description: The store's server-side encryption (SSE) settings.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/CreationTime'
          description: When the store was created.
        updateTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTime'
          description: When the store was updated.
        statusMessage:
          allOf:
          - $ref: '#/components/schemas/StatusMessage'
          description: The store's status message.
        storeSizeBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The store's size in bytes.
      required:
      - id
      - reference
      - status
      - storeArn
      - name
      - description
      - sseConfig
      - creationTime
      - updateTime
      - statusMessage
      - storeSizeBytes
      description: A variant store.
    VariantStoreItems:
      type: array
      items:
        $ref: '#/components/schemas/VariantStoreItem'
    VcfOptions:
      type: object
      properties:
        ignoreQualField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The file's ignore qual field setting.
        ignoreFilterField:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The file's ignore filter field setting.
      description: Formatting options for a VCF file.
    VersionDeleteError:
      type: object
      properties:
        versionName:
          allOf:
          - $ref: '#/components/schemas/VersionName'
          description: The name given to an annotation store version.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The message explaining the error in annotation store deletion.
      required:
      - versionName
      - message
      description: The error preventing deletion of the annotation store version.
    VersionDeleteErrorList:
      type: array
      items:
        $ref: '#/components/schemas/VersionDeleteError'
    VersionList:
      type: array
      items:
        $ref: '#/components/schemas/VersionName'
    VersionName:
      type: string
      pattern: ^([a-z]){1}([a-z0-9_]){2,254}$
      minLength: 3
      maxLength: 255
    VersionOptions:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/TsvVersionOptions'
        description: |-
          File settings for a version of a TSV store.
      description: |-
        The options for an annotation store version.
    VersionStatus:
      type: string
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
      - FAILED
    WorkflowArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    WorkflowBucketOwnerId:
      type: string
      pattern: ^[0-9]{12}$
    WorkflowDefinition:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    WorkflowDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    WorkflowDigest:
      type: string
      minLength: 1
      maxLength: 64
    WorkflowEngine:
      type: string
      enum:
      - WDL
      - NEXTFLOW
      - CWL
      minLength: 1
      maxLength: 64
    WorkflowExport:
      type: string
      enum:
      - DEFINITION
      minLength: 1
      maxLength: 64
    WorkflowExportList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowExport'
    WorkflowId:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 18
    WorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowListItem'
    WorkflowListItem:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowArn'
          description: The workflow's ARN.
        id:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        name:
          allOf:
          - $ref: '#/components/schemas/WorkflowName'
          description: The workflow's name.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The workflow's status.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The workflow's type.
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          description: The workflow's digest.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          description: When the workflow was created.
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          description: Any metadata available for workflow. The information listed
            may vary depending on the workflow, and there may also be no metadata
            to return.
      description: A workflow.
    WorkflowListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    WorkflowMain:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    WorkflowMetadata:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/WorkflowMetadataValue'
    WorkflowMetadataKey:
      type: string
      minLength: 1
      maxLength: 128
    WorkflowMetadataValue:
      type: string
      minLength: 0
      maxLength: 256
    WorkflowName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    WorkflowOwnerId:
      type: string
      pattern: ^[0-9]{12}$
    WorkflowParameter:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowParameterDescription'
          description: The parameter's description.
        optional:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Whether the parameter is optional.
      description: A workflow parameter.
    WorkflowParameterDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 0
      maxLength: 256
    WorkflowParameterName:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    WorkflowParameterTemplate:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/WorkflowParameter'
    WorkflowRequestId:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 128
    WorkflowStatus:
      type: string
      enum:
      - CREATING
      - ACTIVE
      - UPDATING
      - DELETED
      - FAILED
      - INACTIVE
      minLength: 1
      maxLength: 64
    WorkflowStatusMessage:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
    WorkflowTimestamp:
      type: string
      format: date-time
    WorkflowType:
      type: string
      enum:
      - PRIVATE
      - READY2RUN
      minLength: 1
      maxLength: 64
    WorkflowUuid:
      type: string
      pattern: ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
    WorkflowVersionArn:
      type: string
      pattern: ^arn:.+$
      minLength: 1
      maxLength: 128
    WorkflowVersionDescription:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    WorkflowVersionList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowVersionListItem'
    WorkflowVersionListItem:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionArn'
          description: ARN of the workflow version.
        workflowId:
          allOf:
          - $ref: '#/components/schemas/WorkflowId'
          description: The workflow's ID.
        versionName:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionName'
          description: The name of the workflow version.
        description:
          allOf:
          - $ref: '#/components/schemas/WorkflowVersionDescription'
          description: The description of the workflow version.
        status:
          allOf:
          - $ref: '#/components/schemas/WorkflowStatus'
          description: The status of the workflow version.
        type:
          allOf:
          - $ref: '#/components/schemas/WorkflowType'
          description: The type of the workflow version.
        digest:
          allOf:
          - $ref: '#/components/schemas/WorkflowDigest'
          description: The digist of the workflow version.
        creationTime:
          allOf:
          - $ref: '#/components/schemas/WorkflowTimestamp'
          description: The creation time of the workflow version.
        metadata:
          allOf:
          - $ref: '#/components/schemas/WorkflowMetadata'
          description: Metadata for the workflow version.
      description: A list of workflow version items.
    WorkflowVersionListToken:
      type: string
      pattern: ^[\p{L}||\p{M}||\p{Z}||\p{S}||\p{N}||\p{P}]+$
      minLength: 1
      maxLength: 256
    WorkflowVersionName:
      type: string
      pattern: ^[A-Za-z0-9][A-Za-z0-9\-\._]*$
      minLength: 1
      maxLength: 64
