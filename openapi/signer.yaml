openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: signer
  x-aws-serviceName: signer
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-05'
  version: '2017-08-25'
  title: AWS Signer
  description: |-
    AWS Signer is a fully managed code-signing service to help you ensure the trust and integrity of your code.

    Signer supports the following applications:

    With code signing for AWS Lambda, you can sign [AWS Lambda](http://docs.aws.amazon.com/lambda/latest/dg/) deployment packages. Integrated support is provided for [Amazon S3](http://docs.aws.amazon.com/AmazonS3/latest/gsg/), [Amazon CloudWatch](http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/), and [AWS CloudTrail](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/). In order to sign code, you create a signing profile and then use Signer to sign Lambda zip files in S3.

    With code signing for IoT, you can sign code for any IoT device that is supported by AWS. IoT code signing is available for [Amazon FreeRTOS](http://docs.aws.amazon.com/freertos/latest/userguide/) and [AWS IoT Device Management](http://docs.aws.amazon.com/iot/latest/developerguide/), and is integrated with [AWS Certificate Manager (ACM)](http://docs.aws.amazon.com/acm/latest/userguide/). In order to sign code, you import a third-party code-signing certificate using ACM, and use that to sign updates in Amazon FreeRTOS and AWS IoT Device Management.

    With Signer and the Notation CLI from the [Notary Project](https://notaryproject.dev/), you can sign container images stored in a container registry such as Amazon Elastic Container Registry (ECR). The signatures are stored in the registry alongside the images, where they are available for verifying image authenticity and integrity.

    For more information about Signer, see the [AWS Signer Developer Guide](https://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html).
servers:
- description: The AWS Signer regional endpoint
  url: https://signer.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths: {}
components:
  schemas:
    AccountId:
      type: string
      pattern: ^[0-9]{12}$
      minLength: 12
      maxLength: 12
    Arn:
      type: string
      minLength: 20
      maxLength: 2048
    Blob:
      type: string
      format: byte
    BucketName:
      type: string
    Category:
      type: string
      enum:
      - AWSIoT
    CertificateArn:
      type: string
    CertificateHashes:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ClientRequestToken:
      type: string
    DisplayName:
      type: string
    EncryptionAlgorithm:
      type: string
      enum:
      - RSA
      - ECDSA
    EncryptionAlgorithms:
      type: array
      items:
        $ref: '#/components/schemas/EncryptionAlgorithm'
    ErrorCode:
      type: string
    ErrorMessage:
      type: string
    HashAlgorithm:
      type: string
      enum:
      - SHA1
      - SHA256
    HashAlgorithms:
      type: array
      items:
        $ref: '#/components/schemas/HashAlgorithm'
    ImageFormat:
      type: string
      enum:
      - JSON
      - JSONEmbedded
      - JSONDetached
    ImageFormats:
      type: array
      items:
        $ref: '#/components/schemas/ImageFormat'
    Integer:
      type: integer
      default: 0
    JobId:
      type: string
    Key:
      type: string
    MaxResults:
      type: integer
      minimum: 1
      maximum: 25
    MaxSizeInMB:
      type: integer
      default: 0
    Metadata:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    NextToken:
      type: string
    Payload:
      type: string
      format: byte
      minLength: 1
      maxLength: 4096
    Permissions:
      type: array
      items:
        $ref: '#/components/schemas/Permission'
    PlatformId:
      type: string
    PolicySizeBytes:
      type: integer
      default: 0
    Prefix:
      type: string
    ProfileName:
      type: string
      pattern: ^[a-zA-Z0-9_]{2,}$
      minLength: 2
      maxLength: 64
    ProfileVersion:
      type: string
      pattern: ^[a-zA-Z0-9]{10}$
      minLength: 10
      maxLength: 10
    RequestedBy:
      type: string
    RevocationReasonString:
      type: string
      minLength: 1
      maxLength: 500
    RevokedEntities:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SigningJobs:
      type: array
      items:
        $ref: '#/components/schemas/SigningJob'
    SigningParameterKey:
      type: string
    SigningParameterValue:
      type: string
    SigningParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SigningParameterValue'
    SigningPlatforms:
      type: array
      items:
        $ref: '#/components/schemas/SigningPlatform'
    SigningProfileStatus:
      type: string
      enum:
      - Active
      - Canceled
      - Revoked
    SigningProfiles:
      type: array
      items:
        $ref: '#/components/schemas/SigningProfile'
    SigningStatus:
      type: string
      enum:
      - InProgress
      - Failed
      - Succeeded
    StatusReason:
      type: string
    Statuses:
      type: array
      items:
        $ref: '#/components/schemas/SigningProfileStatus'
    String:
      type: string
    TagKey:
      type: string
      pattern: ^(?!aws:)[a-zA-Z+-=._:/]+$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Timestamp:
      type: string
      format: date-time
    ValidityType:
      type: string
      enum:
      - DAYS
      - MONTHS
      - YEARS
    Version:
      type: string
    bool:
      type: boolean
      default: false
