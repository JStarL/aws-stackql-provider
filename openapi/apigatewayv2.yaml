openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: apigatewayv2
  x-aws-serviceName: apigatewayv2
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2018-11-29'
  title: AmazonApiGatewayV2
  description: |-
    Amazon API Gateway V2
servers:
- description: The AmazonApiGatewayV2 regional endpoint
  url: https://apigateway.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: |-
        Creates an Api resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiKeySelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                CorsConfiguration:
                  $ref: '#/components/schemas/Cors'
                CredentialsArn:
                  $ref: '#/components/schemas/Arn'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                DisableSchemaValidation:
                  $ref: '#/components/schemas/__boolean'
                DisableExecuteApiEndpoint:
                  $ref: '#/components/schemas/__boolean'
                IpAddressType:
                  $ref: '#/components/schemas/IpAddressType'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                ProtocolType:
                  $ref: '#/components/schemas/ProtocolType'
                RouteKey:
                  $ref: '#/components/schemas/SelectionKey'
                RouteSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                Tags:
                  $ref: '#/components/schemas/Tags'
                Target:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                Version:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetApis
      description: |-
        Gets a collection of Api resources.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: ImportApi
      description: |-
        Imports an API.
      parameters:
      - name: basepath
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: failOnWarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  $ref: '#/components/schemas/__string'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/domainnames/{DomainName}/apimappings:
    post:
      operationId: CreateApiMapping
      description: |-
        Creates an API mapping.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiId:
                  $ref: '#/components/schemas/Id'
                ApiMappingKey:
                  $ref: '#/components/schemas/SelectionKey'
                Stage:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetApiMappings
      description: |-
        Gets API mappings.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/authorizers:
    post:
      operationId: CreateAuthorizer
      description: |-
        Creates an Authorizer for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AuthorizerCredentialsArn:
                  $ref: '#/components/schemas/Arn'
                AuthorizerPayloadFormatVersion:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                AuthorizerResultTtlInSeconds:
                  $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
                AuthorizerType:
                  $ref: '#/components/schemas/AuthorizerType'
                AuthorizerUri:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                EnableSimpleResponses:
                  $ref: '#/components/schemas/__boolean'
                IdentitySource:
                  $ref: '#/components/schemas/IdentitySourceList'
                IdentityValidationExpression:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                JwtConfiguration:
                  $ref: '#/components/schemas/JWTConfiguration'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetAuthorizers
      description: |-
        Gets the Authorizers for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/deployments:
    post:
      operationId: CreateDeployment
      description: |-
        Creates a Deployment for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                StageName:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetDeployments
      description: |-
        Gets the Deployments for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: |-
        Creates a domain name.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainName:
                  $ref: '#/components/schemas/StringWithLengthBetween1And512'
                DomainNameConfigurations:
                  $ref: '#/components/schemas/DomainNameConfigurations'
                MutualTlsAuthentication:
                  $ref: '#/components/schemas/MutualTlsAuthenticationInput'
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetDomainNames
      description: |-
        Gets the domain names for an AWS account.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/integrations:
    post:
      operationId: CreateIntegration
      description: |-
        Creates an Integration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ConnectionId:
                  $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                ConnectionType:
                  $ref: '#/components/schemas/ConnectionType'
                ContentHandlingStrategy:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
                CredentialsArn:
                  $ref: '#/components/schemas/Arn'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                IntegrationMethod:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                IntegrationSubtype:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                IntegrationType:
                  $ref: '#/components/schemas/IntegrationType'
                IntegrationUri:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                PassthroughBehavior:
                  $ref: '#/components/schemas/PassthroughBehavior'
                PayloadFormatVersion:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                RequestParameters:
                  $ref: '#/components/schemas/IntegrationParameters'
                RequestTemplates:
                  $ref: '#/components/schemas/TemplateMap'
                ResponseParameters:
                  $ref: '#/components/schemas/ResponseParameters'
                TemplateSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                TimeoutInMillis:
                  $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
                TlsConfig:
                  $ref: '#/components/schemas/TlsConfigInput'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetIntegrations
      description: |-
        Gets the Integrations for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses:
    post:
      operationId: CreateIntegrationResponse
      description: |-
        Creates an IntegrationResponses.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ContentHandlingStrategy:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
                IntegrationResponseKey:
                  $ref: '#/components/schemas/SelectionKey'
                ResponseParameters:
                  $ref: '#/components/schemas/IntegrationParameters'
                ResponseTemplates:
                  $ref: '#/components/schemas/TemplateMap'
                TemplateSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetIntegrationResponses
      description: |-
        Gets the IntegrationResponses for an Integration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/models:
    post:
      operationId: CreateModel
      description: |-
        Creates a Model for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ContentType:
                  $ref: '#/components/schemas/StringWithLengthBetween1And256'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                Schema:
                  $ref: '#/components/schemas/StringWithLengthBetween0And32K'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetModels
      description: |-
        Gets the Models for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/routes:
    post:
      operationId: CreateRoute
      description: |-
        Creates a Route for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiKeyRequired:
                  $ref: '#/components/schemas/__boolean'
                AuthorizationScopes:
                  $ref: '#/components/schemas/AuthorizationScopes'
                AuthorizationType:
                  $ref: '#/components/schemas/AuthorizationType'
                AuthorizerId:
                  $ref: '#/components/schemas/Id'
                ModelSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                OperationName:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                RequestModels:
                  $ref: '#/components/schemas/RouteModels'
                RequestParameters:
                  $ref: '#/components/schemas/RouteParameters'
                RouteKey:
                  $ref: '#/components/schemas/SelectionKey'
                RouteResponseSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                Target:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetRoutes
      description: |-
        Gets the Routes for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/routes/{RouteId}/routeresponses:
    post:
      operationId: CreateRouteResponse
      description: |-
        Creates a RouteResponse for a Route.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ModelSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                ResponseModels:
                  $ref: '#/components/schemas/RouteModels'
                ResponseParameters:
                  $ref: '#/components/schemas/RouteParameters'
                RouteResponseKey:
                  $ref: '#/components/schemas/SelectionKey'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetRouteResponses
      description: |-
        Gets the RouteResponses for a Route.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/stages:
    post:
      operationId: CreateStage
      description: |-
        Creates a Stage for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccessLogSettings:
                  $ref: '#/components/schemas/AccessLogSettings'
                AutoDeploy:
                  $ref: '#/components/schemas/__boolean'
                ClientCertificateId:
                  $ref: '#/components/schemas/Id'
                DefaultRouteSettings:
                  $ref: '#/components/schemas/RouteSettings'
                DeploymentId:
                  $ref: '#/components/schemas/Id'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                RouteSettings:
                  $ref: '#/components/schemas/RouteSettingsMap'
                StageName:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                StageVariables:
                  $ref: '#/components/schemas/StageVariablesMap'
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetStages
      description: |-
        Gets the Stages for an API.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/vpclinks:
    post:
      operationId: CreateVpcLink
      description: |-
        Creates a VPC link.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                SecurityGroupIds:
                  $ref: '#/components/schemas/SecurityGroupIdList'
                SubnetIds:
                  $ref: '#/components/schemas/SubnetIdList'
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetVpcLinks
      description: |-
        Gets a collection of VPC links.
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/stages/{StageName}/accesslogsettings:
    delete:
      operationId: DeleteAccessLogSettings
      description: |-
        Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}:
    delete:
      operationId: DeleteApi
      description: |-
        Deletes an Api resource.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetApi
      description: |-
        Gets an Api resource.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    put:
      operationId: ReimportApi
      description: |-
        Puts an Api resource.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: basepath
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: failOnWarnings
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__boolean'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Body:
                  $ref: '#/components/schemas/__string'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateApi
      description: |-
        Updates an Api resource.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiKeySelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                CorsConfiguration:
                  $ref: '#/components/schemas/Cors'
                CredentialsArn:
                  $ref: '#/components/schemas/Arn'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                DisableSchemaValidation:
                  $ref: '#/components/schemas/__boolean'
                DisableExecuteApiEndpoint:
                  $ref: '#/components/schemas/__boolean'
                IpAddressType:
                  $ref: '#/components/schemas/IpAddressType'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                RouteKey:
                  $ref: '#/components/schemas/SelectionKey'
                RouteSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                Target:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                Version:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/domainnames/{DomainName}/apimappings/{ApiMappingId}:
    delete:
      operationId: DeleteApiMapping
      description: |-
        Deletes an API mapping.
      parameters:
      - name: ApiMappingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetApiMapping
      description: |-
        Gets an API mapping.
      parameters:
      - name: ApiMappingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateApiMapping
      description: |-
        The API mapping.
      parameters:
      - name: ApiMappingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiId:
                  $ref: '#/components/schemas/Id'
                ApiMappingKey:
                  $ref: '#/components/schemas/SelectionKey'
                Stage:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/authorizers/{AuthorizerId}:
    delete:
      operationId: DeleteAuthorizer
      description: |-
        Deletes an Authorizer.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: AuthorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetAuthorizer
      description: |-
        Gets an Authorizer.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: AuthorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateAuthorizer
      description: |-
        Updates an Authorizer.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: AuthorizerId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AuthorizerCredentialsArn:
                  $ref: '#/components/schemas/Arn'
                AuthorizerPayloadFormatVersion:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                AuthorizerResultTtlInSeconds:
                  $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
                AuthorizerType:
                  $ref: '#/components/schemas/AuthorizerType'
                AuthorizerUri:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                EnableSimpleResponses:
                  $ref: '#/components/schemas/__boolean'
                IdentitySource:
                  $ref: '#/components/schemas/IdentitySourceList'
                IdentityValidationExpression:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                JwtConfiguration:
                  $ref: '#/components/schemas/JWTConfiguration'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/cors:
    delete:
      operationId: DeleteCorsConfiguration
      description: |-
        Deletes a CORS configuration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/deployments/{DeploymentId}:
    delete:
      operationId: DeleteDeployment
      description: |-
        Deletes a Deployment.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetDeployment
      description: |-
        Gets a Deployment.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateDeployment
      description: |-
        Updates a Deployment.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: DeploymentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/domainnames/{DomainName}:
    delete:
      operationId: DeleteDomainName
      description: |-
        Deletes a domain name.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetDomainName
      description: |-
        Gets a domain name.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateDomainName
      description: |-
        Updates a domain name.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainNameConfigurations:
                  $ref: '#/components/schemas/DomainNameConfigurations'
                MutualTlsAuthentication:
                  $ref: '#/components/schemas/MutualTlsAuthenticationInput'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/integrations/{IntegrationId}:
    delete:
      operationId: DeleteIntegration
      description: |-
        Deletes an Integration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetIntegration
      description: |-
        Gets an Integration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateIntegration
      description: |-
        Updates an Integration.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ConnectionId:
                  $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                ConnectionType:
                  $ref: '#/components/schemas/ConnectionType'
                ContentHandlingStrategy:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
                CredentialsArn:
                  $ref: '#/components/schemas/Arn'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                IntegrationMethod:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                IntegrationSubtype:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                IntegrationType:
                  $ref: '#/components/schemas/IntegrationType'
                IntegrationUri:
                  $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                PassthroughBehavior:
                  $ref: '#/components/schemas/PassthroughBehavior'
                PayloadFormatVersion:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                RequestParameters:
                  $ref: '#/components/schemas/IntegrationParameters'
                RequestTemplates:
                  $ref: '#/components/schemas/TemplateMap'
                ResponseParameters:
                  $ref: '#/components/schemas/ResponseParameters'
                TemplateSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                TimeoutInMillis:
                  $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
                TlsConfig:
                  $ref: '#/components/schemas/TlsConfigInput'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/integrations/{IntegrationId}/integrationresponses/{IntegrationResponseId}:
    delete:
      operationId: DeleteIntegrationResponse
      description: |-
        Deletes an IntegrationResponses.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetIntegrationResponse
      description: |-
        Gets an IntegrationResponses.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateIntegrationResponse
      description: |-
        Updates an IntegrationResponses.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: IntegrationResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ContentHandlingStrategy:
                  $ref: '#/components/schemas/ContentHandlingStrategy'
                IntegrationResponseKey:
                  $ref: '#/components/schemas/SelectionKey'
                ResponseParameters:
                  $ref: '#/components/schemas/IntegrationParameters'
                ResponseTemplates:
                  $ref: '#/components/schemas/TemplateMap'
                TemplateSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/models/{ModelId}:
    delete:
      operationId: DeleteModel
      description: |-
        Deletes a Model.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ModelId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetModel
      description: |-
        Gets a Model.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ModelId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateModel
      description: |-
        Updates a Model.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ModelId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ContentType:
                  $ref: '#/components/schemas/StringWithLengthBetween1And256'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
                Schema:
                  $ref: '#/components/schemas/StringWithLengthBetween0And32K'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/routes/{RouteId}:
    delete:
      operationId: DeleteRoute
      description: |-
        Deletes a Route.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetRoute
      description: |-
        Gets a Route.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateRoute
      description: |-
        Updates a Route.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ApiKeyRequired:
                  $ref: '#/components/schemas/__boolean'
                AuthorizationScopes:
                  $ref: '#/components/schemas/AuthorizationScopes'
                AuthorizationType:
                  $ref: '#/components/schemas/AuthorizationType'
                AuthorizerId:
                  $ref: '#/components/schemas/Id'
                ModelSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                OperationName:
                  $ref: '#/components/schemas/StringWithLengthBetween1And64'
                RequestModels:
                  $ref: '#/components/schemas/RouteModels'
                RequestParameters:
                  $ref: '#/components/schemas/RouteParameters'
                RouteKey:
                  $ref: '#/components/schemas/SelectionKey'
                RouteResponseSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                Target:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/routes/{RouteId}/requestparameters/{RequestParameterKey}:
    delete:
      operationId: DeleteRouteRequestParameter
      description: |-
        Deletes a route request parameter. Supported only for WebSocket APIs.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RequestParameterKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/routes/{RouteId}/routeresponses/{RouteResponseId}:
    delete:
      operationId: DeleteRouteResponse
      description: |-
        Deletes a RouteResponse.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetRouteResponse
      description: |-
        Gets a RouteResponse.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateRouteResponse
      description: |-
        Updates a RouteResponse.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteResponseId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ModelSelectionExpression:
                  $ref: '#/components/schemas/SelectionExpression'
                ResponseModels:
                  $ref: '#/components/schemas/RouteModels'
                ResponseParameters:
                  $ref: '#/components/schemas/RouteParameters'
                RouteResponseKey:
                  $ref: '#/components/schemas/SelectionKey'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/stages/{StageName}/routesettings/{RouteKey}:
    delete:
      operationId: DeleteRouteSettings
      description: |-
        Deletes the RouteSettings for a stage.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: RouteKey
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/stages/{StageName}:
    delete:
      operationId: DeleteStage
      description: |-
        Deletes a Stage.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetStage
      description: |-
        Gets a Stage.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateStage
      description: |-
        Updates a Stage.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccessLogSettings:
                  $ref: '#/components/schemas/AccessLogSettings'
                AutoDeploy:
                  $ref: '#/components/schemas/__boolean'
                ClientCertificateId:
                  $ref: '#/components/schemas/Id'
                DefaultRouteSettings:
                  $ref: '#/components/schemas/RouteSettings'
                DeploymentId:
                  $ref: '#/components/schemas/Id'
                Description:
                  $ref: '#/components/schemas/StringWithLengthBetween0And1024'
                RouteSettings:
                  $ref: '#/components/schemas/RouteSettingsMap'
                StageVariables:
                  $ref: '#/components/schemas/StageVariablesMap'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/vpclinks/{VpcLinkId}:
    delete:
      operationId: DeleteVpcLink
      description: |-
        Deletes a VPC link.
      parameters:
      - name: VpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '202': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    get:
      operationId: GetVpcLink
      description: |-
        Gets a VPC link.
      parameters:
      - name: VpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    patch:
      operationId: UpdateVpcLink
      description: |-
        Updates a VPC link.
      parameters:
      - name: VpcLinkId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Name:
                  $ref: '#/components/schemas/StringWithLengthBetween1And128'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/exports/{Specification}:
    get:
      operationId: ExportApi
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: exportVersion
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      - name: includeExtensions
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__boolean'
      - name: outputType
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: Specification
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: stageName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/models/{ModelId}/template:
    get:
      operationId: GetModelTemplate
      description: |-
        Gets a model template.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: ModelId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/tags/{ResourceArn}:
    get:
      operationId: GetTags
      description: |-
        Gets a collection of Tag resources.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    post:
      operationId: TagResource
      description: |-
        Creates a new Tag resource to represent a tag.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Tags:
                  $ref: '#/components/schemas/Tags'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
    delete:
      operationId: UntagResource
      description: |-
        Deletes a Tag.
      parameters:
      - name: ResourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/__listOf__string'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
  /v2/apis/{ApiId}/stages/{StageName}/cache/authorizers:
    delete:
      operationId: ResetAuthorizersCache
      description: |-
        Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
      parameters:
      - name: ApiId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      - name: StageName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/__string'
      responses:
        '204': {}
        '404':
          description: |-
            The resource specified in the request was not found. See the message field for more information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '429':
          description: |-
            A limit has been exceeded. See the accompanying error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        Message:
          $ref: '#/components/schemas/__string'
    AccessLogSettings:
      type: object
      properties:
        DestinationArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the CloudWatch Logs log group to receive access
            logs.
        Format:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: A single line format of the access logs of data, as specified
            by selected $context variables. The format must include at least $context.requestId.
      description: Settings for logging access in a stage.
    Api:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
      required:
      - Name
      - ProtocolType
      - RouteSelectionExpression
      description: Represents an API.
    ApiMapping:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      required:
      - ApiId
      - Stage
      description: Represents an API mapping.
    Arn:
      type: string
    AuthorizationScopes:
      type: array
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
      description: <p>A list of authorization scopes configured on a route. The scopes
        are used with a JWT authorizer to authorize the method invocation. The authorization
        works by matching the route scopes against the scopes parsed from the access
        token in the incoming request. The method invocation is authorized if any
        route scope matches a claimed scope in the access token. Otherwise, the invocation
        is not authorized. When the route scope is configured, the client must provide
        an access token instead of an identity token for authorization purposes.</p>
    AuthorizationType:
      type: string
      enum:
      - NONE
      - AWS_IAM
      - CUSTOM
      - JWT
      description: <p>The authorization type. For WebSocket APIs, valid values are
        NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for
        using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access,
        JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and
        CUSTOM for using a Lambda authorizer.</p>
    Authorizer:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter. Supported only for
            REQUEST authorizers.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. If enabled, the Lambda authorizer can return a boolean
            value instead of an IAM policy. Supported only for HTTP APIs. To learn
            more, see [Working with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      required:
      - Name
      description: Represents an authorizer.
    AuthorizerType:
      type: string
      enum:
      - REQUEST
      - JWT
      description: <p>The authorizer type. Specify REQUEST for a Lambda function using
        incoming request parameters. Specify JWT to use JSON Web Tokens (supported
        only for HTTP APIs).</p>
    BadRequestException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the error encountered.
      description: The request is not valid, for example, the input is incomplete
        or incorrect. See the accompanying error message for details.
    ConflictException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the error encountered.
      description: The requested operation would cause a conflict with the current
        state of a service resource associated with the request. Resolve the conflict
        before retrying this request. See the accompanying error message for details.
    ConnectionType:
      type: string
      enum:
      - INTERNET
      - VPC_LINK
      description: <p>Represents a connection type.</p>
    ContentHandlingStrategy:
      type: string
      enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
      description: <p>Specifies how to handle response payload content type conversions.
        Supported only for WebSocket APIs.</p>
    Cors:
      type: object
      properties:
        AllowCredentials:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether credentials are included in the CORS request.
            Supported only for HTTP APIs.
        AllowHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          description: Represents a collection of allowed headers. Supported only
            for HTTP APIs.
        AllowMethods:
          allOf:
          - $ref: '#/components/schemas/CorsMethodList'
          description: Represents a collection of allowed HTTP methods. Supported
            only for HTTP APIs.
        AllowOrigins:
          allOf:
          - $ref: '#/components/schemas/CorsOriginList'
          description: Represents a collection of allowed origins. Supported only
            for HTTP APIs.
        ExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/CorsHeaderList'
          description: Represents a collection of exposed headers. Supported only
            for HTTP APIs.
        MaxAge:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
          description: The number of seconds that the browser should cache preflight
            request results. Supported only for HTTP APIs.
      description: Represents a CORS configuration. Supported only for HTTP APIs.
        See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html)
        for more information.
    CorsHeaderList:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: <p>Represents a collection of allowed headers. Supported only for
        HTTP APIs.</p>
    CorsMethodList:
      type: array
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
      description: <p>Represents a collection of methods. Supported only for HTTP
        APIs.</p>
    CorsOriginList:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: <p>Represents a collection of origins. Supported only for HTTP
        APIs.</p>
    CreateApiMappingRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      required:
      - ApiId
      - DomainName
      - Stage
      description: Creates a new ApiMapping resource to represent an API mapping.
    CreateApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    CreateApiRequest:
      type: object
      properties:
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs. See [Configuring
            CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html)
            for more information.
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: This property is part of quick create. It specifies the credentials
            required for the integration, if any. For a Lambda integration, three
            options are available. To specify an IAM Role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To require that the caller's
            identity be passed through from the request, specify arn:aws:iam::*:user/*.
            To use resource-based permissions on supported AWS services, specify null.
            Currently, this property is not used for HTTP integrations. Supported
            only for HTTP APIs.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: This property is part of quick create. If you don't specify
            a routeKey, a default route of $default is created. The $default route
            acts as a catch-all for any request made to your API, for a particular
            stage. The $default route key can't be modified. You can add routes after
            creating the API, and you can update the route keys of additional routes.
            Supported only for HTTP APIs.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
        Target:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: This property is part of quick create. Quick create produces
            an API with an integration, a default catch-all route, and a default stage
            which is configured to automatically deploy changes. For HTTP integrations,
            specify a fully qualified URL. For Lambda integrations, specify a function
            ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively.
            Supported only for HTTP APIs.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
      required:
      - Name
      - ProtocolType
      description: Creates a new Api resource to represent an API.
    CreateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
    CreateAuthorizerRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter. Supported only for
            REQUEST authorizers.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. By default, a Lambda authorizer must return an IAM policy.
            If enabled, the Lambda authorizer can return a boolean value instead of
            an IAM policy. Supported only for HTTP APIs. To learn more, see [Working
            with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: This parameter is not used.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      required:
      - ApiId
      - AuthorizerType
      - IdentitySource
      - Name
      description: Creates a new Authorizer resource to represent an authorizer.
    CreateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter. Supported only for
            REQUEST authorizers.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. If enabled, the Lambda authorizer can return a boolean
            value instead of an IAM policy. Supported only for HTTP APIs. To learn
            more, see [Working with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    CreateDeploymentRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment resource.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the Stage resource for the Deployment resource
            to create.
      required:
      - ApiId
      description: Creates a new Deployment resource to represent a deployment.
    CreateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    CreateDomainNameRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The domain name.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthenticationInput'
          description: The mutual TLS authentication configuration for a custom domain
            name.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
      required:
      - DomainName
      description: Creates a new DomainName resource to represent a domain name.
    CreateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthentication'
          description: The mutual TLS authentication configuration for a custom domain
            name.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    CreateIntegrationRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the integration.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY
            integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to the backend. The key should follow the pattern
            <action>:<header|querystring|path>.<location> where action can be append,
            overwrite or remove. For values, you can provide static values, or map
            request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfigInput'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
      required:
      - ApiId
      - IntegrationType
      description: Creates a new Integration resource to represent an integration.
    CreateIntegrationResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Specifies how to handle response payload content type conversions.
            Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following
            behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name}, where {name}
            is a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression},
            where {name} is a valid and unique response header name and {JSON-expression}
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration response.
            Supported only for WebSocket APIs.
      required:
      - ApiId
      - IntegrationId
      - IntegrationResponseKey
      description: Creates a new IntegrationResponse resource to represent an integration
        response.
    CreateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name}, where name is
            a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression},
            where name is a valid and unique response header name and JSON-expression
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    CreateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an integration is managed by API Gateway.
            If you created an API using using quick create, the resulting integration
            is managed by API Gateway. You can update a managed integration, but you
            can't delete it.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The integration response selection expression for the integration.
            Supported only for WebSocket APIs. See [Integration Response Selection
            Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions).
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations, without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to backend integrations. The key should follow the
            pattern <action>:<header|querystring|path>.<location>. The action can
            be append, overwrite or remove. For values, you can provide static values,
            or map request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported
            only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfig'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
    CreateModelRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
      required:
      - ApiId
      - Name
      - Schema
      description: Creates a new Model.
    CreateModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
    CreateRouteRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for the route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: The authorization scopes supported by this route.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      required:
      - ApiId
      - RouteKey
      description: Creates a new Route resource to represent a route.
    CreateRouteResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route response. Supported
            only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The response models for the route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route response key.
      required:
      - ApiId
      - RouteId
      - RouteResponseKey
      description: Creates a new RouteResponse resource to represent a route response.
    CreateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response.
            Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    CreateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a route is managed by API Gateway. If you
            created an API using quick create, the $default route is managed by API
            Gateway. You can't modify the $default route key.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: A list of authorization scopes configured on a route. The scopes
            are used with a JWT authorizer to authorize the method invocation. The
            authorization works by matching the route scopes against the scopes parsed
            from the access token in the incoming request. The method invocation is
            authorized if any route scope matches a claimed scope in the access token.
            Otherwise, the invocation is not authorized. When the route scope is configured,
            the client must provide an access token instead of an identity token for
            authorization purposes.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    CreateStageRequest:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported
            only for WebSocket APIs.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: The default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The deployment identifier of the API stage.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the API stage.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage, by routeKey.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a Stage. Variable
            names can have alphanumeric and underscore characters, and the values
            must match [A-Za-z0-9-._~:/?#&=,]+.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      required:
      - ApiId
      - StageName
      description: Creates a new Stage resource to represent a stage.
    CreateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a stage is managed by API Gateway. If you
            created an API using quick create, the $default stage is managed by API
            Gateway. You can't modify the $default stage.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported
            only for WebSocket APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated
            with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported
            only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage, by routeKey.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match [A-Za-z0-9-._~:/?#&=,]+.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
    CreateVpcLinkRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A list of tags.
      required:
      - Name
      - SubnetIds
      description: Creates a VPC link
    CreateVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the VPC link was created.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags for the VPC link.
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          description: The version of the VPC link.
    DeleteAccessLogSettingsRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can only contain alphanumeric characters,
            hyphens, and underscores. Maximum length is 128 characters.
      required:
      - ApiId
      - StageName
    DeleteApiMappingRequest:
      type: object
      properties:
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API mapping identifier.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
      required:
      - ApiMappingId
      - DomainName
    DeleteApiRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
      required:
      - ApiId
    DeleteAuthorizerRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The authorizer identifier.
      required:
      - ApiId
      - AuthorizerId
    DeleteCorsConfigurationRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
      required:
      - ApiId
    DeleteDeploymentRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The deployment ID.
      required:
      - ApiId
      - DeploymentId
    DeleteDomainNameRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
      required:
      - DomainName
    DeleteIntegrationRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
      required:
      - ApiId
      - IntegrationId
    DeleteIntegrationResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration response ID.
      required:
      - ApiId
      - IntegrationId
      - IntegrationResponseId
    DeleteModelRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The model ID.
      required:
      - ApiId
      - ModelId
    DeleteRouteRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
      required:
      - ApiId
      - RouteId
    DeleteRouteRequestParameterRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RequestParameterKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route request parameter key.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
      required:
      - ApiId
      - RequestParameterKey
      - RouteId
    DeleteRouteResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route response ID.
      required:
      - ApiId
      - RouteId
      - RouteResponseId
    DeleteRouteSettingsRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route key.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can only contain alphanumeric characters,
            hyphens, and underscores. Maximum length is 128 characters.
      required:
      - ApiId
      - RouteKey
      - StageName
    DeleteStageRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can only contain alphanumeric characters,
            hyphens, and underscores. Maximum length is 128 characters.
      required:
      - ApiId
      - StageName
    DeleteVpcLinkRequest:
      type: object
      properties:
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the VPC link.
      required:
      - VpcLinkId
    DeleteVpcLinkResponse:
      type: object
      properties: {}
    Deployment:
      type: object
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
      description: An immutable representation of an API that can be called by users.
        A Deployment must be associated with a Stage for it to be callable over the
        internet.
    DeploymentStatus:
      type: string
      enum:
      - PENDING
      - FAILED
      - DEPLOYED
      description: <p>Represents a deployment status.</p>
    DomainName:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthentication'
          description: The mutual TLS authentication configuration for a custom domain
            name.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
      required:
      - DomainName
      description: Represents a domain name.
    DomainNameConfiguration:
      type: object
      properties:
        ApiGatewayDomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: A domain name for the API.
        CertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: An AWS-managed certificate that will be used by the edge-optimized
            endpoint for this domain name. AWS Certificate Manager is the only supported
            source.
        CertificateName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The user-friendly name of the certificate that will be used
            by the edge-optimized endpoint for this domain name.
        CertificateUploadDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the certificate that was used by edge-optimized
            endpoint for this domain name was uploaded.
        DomainNameStatus:
          allOf:
          - $ref: '#/components/schemas/DomainNameStatus'
          description: The status of the domain name migration. The valid values are
            AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION.
            If the status is UPDATING, the domain cannot be modified further until
            the existing operation is complete. If it is AVAILABLE, the domain can
            be updated.
        DomainNameStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: An optional text message containing detailed information about
            status of the domain name migration.
        EndpointType:
          allOf:
          - $ref: '#/components/schemas/EndpointType'
          description: The endpoint type.
        HostedZoneId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The Amazon Route 53 Hosted Zone ID of the endpoint.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the domain name. Use ipv4
            to allow only IPv4 addresses to invoke your domain name, or use dualstack
            to allow both IPv4 and IPv6 addresses to invoke your domain name.
        SecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/SecurityPolicy'
          description: The Transport Layer Security (TLS) version of the security
            policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
        OwnershipVerificationCertificateArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: The ARN of the public certificate issued by ACM to validate
            ownership of your custom domain. Only required when configuring mutual
            TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn
      description: The domain name configuration.
    DomainNameConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/DomainNameConfiguration'
      description: <p>The domain name configurations.</p>
    DomainNameStatus:
      type: string
      enum:
      - AVAILABLE
      - UPDATING
      - PENDING_CERTIFICATE_REIMPORT
      - PENDING_OWNERSHIP_VERIFICATION
      description: <p>The status of the domain name migration. The valid values are
        AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION.
        If the status is UPDATING, the domain cannot be modified further until the
        existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
    EndpointType:
      type: string
      enum:
      - REGIONAL
      - EDGE
      description: <p>Represents an endpoint type.</p>
    ExportApiRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ExportVersion:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the API Gateway export algorithm. API Gateway
            uses the latest version by default. Currently, the only supported version
            is 1.0.
        IncludeExtensions:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether to include [API Gateway extensions](https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html)
            in the exported API definition. API Gateway extensions are included by
            default.
        OutputType:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The output type of the exported definition file. Valid values
            are JSON and YAML.
        Specification:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The version of the API specification to use. OAS30, for OpenAPI
            3.0, is the only supported value.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The name of the API stage to export. If you don't specify this
            property, a representation of the latest API configuration is exported.
      required:
      - ApiId
      - OutputType
      - Specification
    ExportApiResponse:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/ExportedApi'
    ExportedApi:
      type: string
      format: byte
      description: <p>Represents an exported definition of an API in a particular
        output format, for example, YAML. The API is serialized to the requested specification,
        for example, OpenAPI 3.0.</p>
    GetApiMappingRequest:
      type: object
      properties:
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API mapping identifier.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
      required:
      - ApiMappingId
      - DomainName
    GetApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    GetApiMappingsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - DomainName
    GetApiMappingsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfApiMapping'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetApiRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
      required:
      - ApiId
    GetApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
    GetApisRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetApisResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfApi'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetAuthorizerRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The authorizer identifier.
      required:
      - ApiId
      - AuthorizerId
    GetAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter. Supported only for
            REQUEST authorizers.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. If enabled, the Lambda authorizer can return a boolean
            value instead of an IAM policy. Supported only for HTTP APIs. To learn
            more, see [Working with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    GetAuthorizersRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetAuthorizersResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfAuthorizer'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetDeploymentRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The deployment ID.
      required:
      - ApiId
      - DeploymentId
    GetDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    GetDeploymentsRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetDeploymentsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfDeployment'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetDomainNameRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
      required:
      - DomainName
    GetDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthentication'
          description: The mutual TLS authentication configuration for a custom domain
            name.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    GetDomainNamesRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetDomainNamesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfDomainName'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetIntegrationRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
      required:
      - ApiId
      - IntegrationId
    GetIntegrationResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration response ID.
      required:
      - ApiId
      - IntegrationId
      - IntegrationResponseId
    GetIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name}, where name is
            a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression},
            where name is a valid and unique response header name and JSON-expression
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    GetIntegrationResponsesRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
      - IntegrationId
    GetIntegrationResponsesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfIntegrationResponse'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an integration is managed by API Gateway.
            If you created an API using using quick create, the resulting integration
            is managed by API Gateway. You can update a managed integration, but you
            can't delete it.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The integration response selection expression for the integration.
            Supported only for WebSocket APIs. See [Integration Response Selection
            Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions).
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations, without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to backend integrations. The key should follow the
            pattern <action>:<header|querystring|path>.<location>. The action can
            be append, overwrite or remove. For values, you can provide static values,
            or map request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported
            only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfig'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
    GetIntegrationsRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfIntegration'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetModelRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The model ID.
      required:
      - ApiId
      - ModelId
    GetModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
    GetModelTemplateRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The model ID.
      required:
      - ApiId
      - ModelId
    GetModelTemplateResponse:
      type: object
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The template value.
    GetModelsRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetModelsResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfModel'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetRouteRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
      required:
      - ApiId
      - RouteId
    GetRouteResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route response ID.
      required:
      - ApiId
      - RouteId
      - RouteResponseId
    GetRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response.
            Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    GetRouteResponsesRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
      required:
      - ApiId
      - RouteId
    GetRouteResponsesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfRouteResponse'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a route is managed by API Gateway. If you
            created an API using quick create, the $default route is managed by API
            Gateway. You can't modify the $default route key.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: A list of authorization scopes configured on a route. The scopes
            are used with a JWT authorizer to authorize the method invocation. The
            authorization works by matching the route scopes against the scopes parsed
            from the access token in the incoming request. The method invocation is
            authorized if any route scope matches a claimed scope in the access token.
            Otherwise, the invocation is not authorized. When the route scope is configured,
            the client must provide an access token instead of an identity token for
            authorization purposes.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    GetRoutesRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetRoutesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfRoute'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetStageRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can only contain alphanumeric characters,
            hyphens, and underscores. Maximum length is 128 characters.
      required:
      - ApiId
      - StageName
    GetStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a stage is managed by API Gateway. If you
            created an API using quick create, the $default stage is managed by API
            Gateway. You can't modify the $default stage.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported
            only for WebSocket APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated
            with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported
            only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage, by routeKey.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match [A-Za-z0-9-._~:/?#&=,]+.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
    GetStagesRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
      required:
      - ApiId
    GetStagesResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfStage'
          description: The elements from this collection.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetTagsRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource ARN for the tag.
      required:
      - ResourceArn
    GetTagsResponse:
      type: object
      properties:
        Tags:
          $ref: '#/components/schemas/Tags'
    GetVpcLinkRequest:
      type: object
      properties:
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the VPC link.
      required:
      - VpcLinkId
    GetVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the VPC link was created.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags for the VPC link.
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          description: The version of the VPC link.
    GetVpcLinksRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The maximum number of elements to be returned for this resource.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    GetVpcLinksResponse:
      type: object
      properties:
        Items:
          allOf:
          - $ref: '#/components/schemas/__listOfVpcLink'
          description: A collection of VPC links.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The next page of elements from this collection. Not valid for
            the last element of the collection.
    Id:
      type: string
    IdentitySourceList:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: <p>The identity source for which authorization is requested. For
        the REQUEST authorizer, this is required when authorization caching is enabled.
        The value is a comma-separated string of one or more mapping expressions of
        the specified request parameters. For example, if an Auth header, a Name query
        string parameter are defined as identity sources, this value is $method.request.header.Auth,
        $method.request.querystring.Name. These parameters will be used to derive
        the authorization caching key and to perform runtime validation of the REQUEST
        authorizer by verifying all of the identity-related request parameters are
        present, not null and non-empty. Only when this is true does the authorizer
        invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized
        response without calling the Lambda function. The valid value is a string
        of comma-separated mapping expressions of the specified request parameters.
        When the authorization caching is not enabled, this property is optional.</p>
    ImportApiRequest:
      type: object
      properties:
        Basepath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Specifies how to interpret the base path of the API during
            import. Valid values are ignore, prepend, and split. The default value
            is ignore. To learn more, see [Set the OpenAPI basePath Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html).
            Supported only for HTTP APIs.
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The OpenAPI definition. Supported only for HTTP APIs.
        FailOnWarnings:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether to rollback the API creation when a warning
            is encountered. By default, API creation continues if a warning is encountered.
      required:
      - Body
      description: ''
    ImportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
    IntegerWithLengthBetween0And3600:
      type: integer
      minimum: 0
      maximum: 3600
      description: <p>An integer with a value between [0-3600].</p>
    IntegerWithLengthBetween50And30000:
      type: integer
      minimum: 50
      maximum: 30000
      description: <p>An integer with a value between [50-30000].</p>
    IntegerWithLengthBetweenMinus1And86400:
      type: integer
      minimum: -1
      maximum: 86400
      description: <p>An integer with a value between -1 and 86400. Supported only
        for HTTP APIs.</p>
    Integration:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an integration is managed by API Gateway.
            If you created an API using using quick create, the resulting integration
            is managed by API Gateway. You can update a managed integration, but you
            can't delete it.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The integration response selection expression for the integration.
            Supported only for WebSocket APIs. See [Integration Response Selection
            Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions).
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations, without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to backend integrations. The key should follow the
            pattern <action>:<header|querystring|path>.<location>. The action can
            be append, overwrite or remove. For values, you can provide static values,
            or map request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported
            only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfig'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
      description: Represents an integration.
    IntegrationParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And512'
      description: "<p>For WebSocket APIs, a key-value map specifying request parameters\
        \ that are passed from the method request to the backend. The key is an integration\
        \ request parameter name and the associated value is a method request parameter\
        \ value or static value that must be enclosed within single quotes and pre-encoded\
        \ as required by the backend. The method request parameter value must match\
        \ the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>\n\
        \          , where \n            <replaceable>{location}</replaceable>\n \
        \          is querystring, path, or header; and \n            <replaceable>{name}</replaceable>\n\
        \           must be a valid and unique method request parameter name.</p>\
        \ <p>For HTTP API integrations with a specified integrationSubtype, request\
        \ parameters are a key-value map specifying parameters that are passed to\
        \ AWS_PROXY integrations. You can provide static values, or map request data,\
        \ stage variables, or context variables that are evaluated at runtime. To\
        \ learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\"\
        >Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP\
        \ API integrations without a specified integrationSubtype request parameters\
        \ are a key-value map specifying how to transform HTTP requests before sending\
        \ them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;\
        \ where action can be append, overwrite or remove. For values, you can provide\
        \ static values, or map request data, stage variables, or context variables\
        \ that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\"\
        >Transforming API requests and responses</a>.</p>"
    IntegrationResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name}, where name is
            a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression},
            where name is a valid and unique response header name and JSON-expression
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
      required:
      - IntegrationResponseKey
      description: Represents an integration response.
    IntegrationType:
      type: string
      enum:
      - AWS
      - HTTP
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
      description: <p>Represents an API method integration type.</p>
    IpAddressType:
      type: string
      enum:
      - ipv4
      - dualstack
      description: <p>The IP address types that can invoke your API or domain name.</p>
    JWTConfiguration:
      type: object
      properties:
        Audience:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: A list of the intended recipients of the JWT. A valid JWT must
            provide an aud that matches at least one entry in this list. See [RFC
            7519](https://tools.ietf.org/html/rfc7519#section-4.1.3). Supported only
            for HTTP APIs.
        Issuer:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The base domain of the identity provider that issues JSON
            Web Tokens. For example, an Amazon Cognito user pool has the following
            format: https://cognito-idp.{region}.amazonaws.com/{userPoolId} . Required
            for the JWT authorizer type. Supported only for HTTP APIs.'
      description: Represents the configuration of a JWT authorizer. Required for
        the JWT authorizer type. Supported only for HTTP APIs.
    LoggingLevel:
      type: string
      enum:
      - ERROR
      - INFO
      - 'OFF'
      description: <p>The logging level.</p>
    Model:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
      required:
      - Name
      description: Represents a data model for an API. Supported only for WebSocket
        APIs. See [Create Models and Mapping Templates for Request and Response Mappings](https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html).
    MutualTlsAuthentication:
      type: object
      properties:
        TruststoreUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: An Amazon S3 URL that specifies the truststore for mutual TLS
            authentication, for example, s3://bucket-name/key-name. The truststore
            can contain certificates from public or private certificate authorities.
            To update the truststore, upload a new version to S3, and then update
            your custom domain name to use the new version. To update the truststore,
            you must have permissions to access the S3 object.
        TruststoreVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The version of the S3 object that contains your truststore.
            To specify a version, you must have versioning enabled for the S3 bucket.
        TruststoreWarnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: A list of warnings that API Gateway returns while processing
            your truststore. Invalid certificates produce warnings. Mutual TLS is
            still enabled, but some clients might not be able to access your API.
            To resolve warnings, upload a new truststore to S3, and then update you
            domain name to use the new version.
    MutualTlsAuthenticationInput:
      type: object
      properties:
        TruststoreUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: An Amazon S3 URL that specifies the truststore for mutual TLS
            authentication, for example, s3://bucket-name/key-name. The truststore
            can contain certificates from public or private certificate authorities.
            To update the truststore, upload a new version to S3, and then update
            your custom domain name to use the new version. To update the truststore,
            you must have permissions to access the S3 object.
        TruststoreVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The version of the S3 object that contains your truststore.
            To specify a version, you must have versioning enabled for the S3 bucket.
    NextToken:
      type: string
    NotFoundException:
      type: object
      properties:
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the error encountered.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource type.
      description: The resource specified in the request was not found. See the message
        field for more information.
    ParameterConstraints:
      type: object
      properties:
        Required:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Whether or not the parameter is required.
      description: Validation constraints imposed on parameters of a request (path,
        query string, headers).
    PassthroughBehavior:
      type: string
      enum:
      - WHEN_NO_MATCH
      - NEVER
      - WHEN_NO_TEMPLATES
      description: <p>Represents passthrough behavior for an integration response.
        Supported only for WebSocket APIs.</p>
    ProtocolType:
      type: string
      enum:
      - WEBSOCKET
      - HTTP
      description: Represents a protocol type.
    ReimportApiRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        Basepath:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Specifies how to interpret the base path of the API during
            import. Valid values are ignore, prepend, and split. The default value
            is ignore. To learn more, see [Set the OpenAPI basePath Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html).
            Supported only for HTTP APIs.
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The OpenAPI definition. Supported only for HTTP APIs.
        FailOnWarnings:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether to rollback the API creation when a warning
            is encountered. By default, API creation continues if a warning is encountered.
      required:
      - ApiId
      - Body
      description: ''
    ReimportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
    ResetAuthorizersCacheRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can contain only alphanumeric characters,
            hyphens, and underscores, or be $default. Maximum length is 128 characters.
      required:
      - ApiId
      - StageName
    ResponseParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/IntegrationParameters'
      description: <p>Supported only for HTTP APIs. You use response parameters to
        transform the HTTP response from a backend integration before returning the
        response to clients.</p>
    Route:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a route is managed by API Gateway. If you
            created an API using quick create, the $default route is managed by API
            Gateway. You can't modify the $default route key.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: A list of authorization scopes configured on a route. The scopes
            are used with a JWT authorizer to authorize the method invocation. The
            authorization works by matching the route scopes against the scopes parsed
            from the access token in the incoming request. The method invocation is
            authorized if any route scope matches a claimed scope in the access token.
            Otherwise, the invocation is not authorized. When the route scope is configured,
            the client must provide an access token instead of an identity token for
            authorization purposes.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      required:
      - RouteKey
      description: Represents a route.
    RouteModels:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And128'
      description: <p>The route models.</p>
    RouteParameters:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ParameterConstraints'
      description: <p>The route parameters.</p>
    RouteResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response.
            Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
      required:
      - RouteResponseKey
      description: Represents a route response.
    RouteSettings:
      type: object
      properties:
        DataTraceEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether (true) or not (false) data trace logging
            is enabled for this route. This property affects the log entries pushed
            to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
        DetailedMetricsEnabled:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether detailed metrics are enabled.
        LoggingLevel:
          allOf:
          - $ref: '#/components/schemas/LoggingLevel'
          description: 'Specifies the logging level for this route: INFO, ERROR, or
            OFF. This property affects the log entries pushed to Amazon CloudWatch
            Logs. Supported only for WebSocket APIs.'
        ThrottlingBurstLimit:
          allOf:
          - $ref: '#/components/schemas/__integer'
          description: Specifies the throttling burst limit.
        ThrottlingRateLimit:
          allOf:
          - $ref: '#/components/schemas/__double'
          description: Specifies the throttling rate limit.
      description: Represents a collection of route settings.
    RouteSettingsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/RouteSettings'
      description: <p>The route settings map.</p>
    SecurityGroupIdList:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: <p>A list of security group IDs for the VPC link.</p>
    SecurityPolicy:
      type: string
      enum:
      - TLS_1_0
      - TLS_1_2
      description: <p>The Transport Layer Security (TLS) version of the security policy
        for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
    SelectionExpression:
      type: string
    SelectionKey:
      type: string
    Stage:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a stage is managed by API Gateway. If you
            created an API using quick create, the $default stage is managed by API
            Gateway. You can't modify the $default stage.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported
            only for WebSocket APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated
            with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported
            only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage, by routeKey.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match [A-Za-z0-9-._~:/?#&=,]+.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      required:
      - StageName
      description: Represents an API stage.
    StageVariablesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And2048'
      description: <p>The stage variable map.</p>
    StringWithLengthBetween0And1024:
      type: string
    StringWithLengthBetween0And2048:
      type: string
    StringWithLengthBetween0And32K:
      type: string
    StringWithLengthBetween1And1024:
      type: string
    StringWithLengthBetween1And128:
      type: string
    StringWithLengthBetween1And1600:
      type: string
    StringWithLengthBetween1And256:
      type: string
    StringWithLengthBetween1And512:
      type: string
    StringWithLengthBetween1And64:
      type: string
    SubnetIdList:
      type: array
      items:
        $ref: '#/components/schemas/__string'
      description: <p>A list of subnet IDs to include in the VPC link.</p>
    TagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource ARN for the tag.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
      required:
      - ResourceArn
      description: Creates a new Tag resource to represent a tag.
    TagResourceResponse:
      type: object
      properties: {}
    Tags:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And1600'
      description: <p>Represents a collection of tags associated with the resource.</p>
    TemplateMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And32K'
      description: <p>A mapping of identifier keys to templates. The value is an actual
        template script. The key is typically a SelectionKey which is chosen based
        on evaluating a selection expression.</p>
    TlsConfig:
      type: object
      properties:
        ServerNameToVerify:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: If you specify a server name, API Gateway uses it to verify
            the hostname on the integration's certificate. The server name is also
            included in the TLS handshake to support Server Name Indication (SNI)
            or virtual hosting.
      description: The TLS configuration for a private integration. If you specify
        a TLS configuration, private integration traffic uses the HTTPS protocol.
        Supported only for HTTP APIs.
    TlsConfigInput:
      type: object
      properties:
        ServerNameToVerify:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: If you specify a server name, API Gateway uses it to verify
            the hostname on the integration's certificate. The server name is also
            included in the TLS handshake to support Server Name Indication (SNI)
            or virtual hosting.
      description: The TLS configuration for a private integration. If you specify
        a TLS configuration, private integration traffic uses the HTTPS protocol.
        Supported only for HTTP APIs.
    TooManyRequestsException:
      type: object
      properties:
        LimitType:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The limit type.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the error encountered.
      description: A limit has been exceeded. See the accompanying error message for
        details.
    UntagResourceRequest:
      type: object
      properties:
        ResourceArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The resource ARN for the tag.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The Tag keys to delete
      required:
      - ResourceArn
      - TagKeys
    UpdateApiMappingRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API mapping identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
      required:
      - ApiId
      - ApiMappingId
      - DomainName
      description: Updates an ApiMapping.
    UpdateApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API identifier.
        ApiMappingId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API mapping identifier.
        ApiMappingKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The API mapping key.
        Stage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The API stage.
    UpdateApiRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: This property is part of quick create. It specifies the credentials
            required for the integration, if any. For a Lambda integration, three
            options are available. To specify an IAM Role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To require that the caller's
            identity be passed through from the request, specify arn:aws:iam::*:user/*.
            To use resource-based permissions on supported AWS services, don't specify
            this parameter. Currently, this property is not used for HTTP integrations.
            If provided, this value replaces the credentials associated with the quick
            create integration. Supported only for HTTP APIs.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke your API or domain name.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: This property is part of quick create. If not specified, the
            route created using quick create is kept. Otherwise, this value replaces
            the route key of the quick create route. Additional routes may still be
            added after the API is updated. Supported only for HTTP APIs.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: This property is part of quick create. For HTTP integrations,
            specify a fully qualified URL. For Lambda integrations, specify a function
            ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively.
            The value provided updates the integration URI and integration type. You
            can update a quick-created target, but you can't remove it from an API.
            Supported only for HTTP APIs.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
      required:
      - ApiId
      description: Updates an Api.
    UpdateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com.
            The stage name is typically appended to this URI to form a complete path
            to a deployed API stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API is managed by API Gateway. You can't
            update or delete a managed API by using API Gateway. A managed API can
            be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The API ID.
        ApiKeySelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: An API key selection expression. Supported only for WebSocket
            APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
        CorsConfiguration:
          allOf:
          - $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the API was created.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the API.
        DisableSchemaValidation:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Avoid validating models when creating a deployment. Supported
            only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether clients can invoke your API by using the
            default execute-api endpoint. By default, clients can invoke your API
            with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint.
            To require that clients use a custom domain name to invoke your API, disable
            the default endpoint.
        ImportInfo:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The validation information during API import. This may include
            particular properties of your OpenAPI definition which are ignored during
            import. Supported only for HTTP APIs.
        IpAddressType:
          allOf:
          - $ref: '#/components/schemas/IpAddressType'
          description: The IP address types that can invoke the API.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the API.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          description: The API protocol.
        RouteSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route selection expression for the API. For HTTP APIs,
            the routeSelectionExpression must be ${request.method} ${request.path}.
            If not provided, this will be the default for HTTP APIs. This property
            is required for WebSocket APIs.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: A collection of tags associated with the API.
        Version:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: A version identifier for the API.
        Warnings:
          allOf:
          - $ref: '#/components/schemas/__listOf__string'
          description: The warning messages reported when failonwarnings is turned
            on during API import.
    UpdateAuthorizerRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. By default, a Lambda authorizer must return an IAM policy.
            If enabled, the Lambda authorizer can return a boolean value instead of
            an IAM policy. Supported only for HTTP APIs. To learn more, see [Working
            with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: This parameter is not used.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
      required:
      - ApiId
      - AuthorizerId
      description: Updates an Authorizer.
    UpdateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the required credentials as an IAM role for API Gateway
            to invoke the authorizer. To specify an IAM role for API Gateway to assume,
            use the role's Amazon Resource Name (ARN). To use resource-based permissions
            on the Lambda function, don't specify this parameter. Supported only for
            REQUEST authorizers.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an HTTP API Lambda
            authorizer. Required for HTTP API Lambda authorizers. Supported values
            are 1.0 and 2.0. To learn more, see [Working with AWS Lambda authorizers
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerResultTtlInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
          description: The time to live (TTL) for cached authorizer results, in seconds.
            If it equals 0, authorization caching is disabled. If it is greater than
            0, API Gateway caches authorizer responses. The maximum value is 3600,
            or 1 hour. Supported only for HTTP API Lambda authorizers.
        AuthorizerType:
          allOf:
          - $ref: '#/components/schemas/AuthorizerType'
          description: The authorizer type. Specify REQUEST for a Lambda function
            using incoming request parameters. Specify JWT to use JSON Web Tokens
            (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'The authorizer''s Uniform Resource Identifier (URI). For REQUEST
            authorizers, this must be a well-formed Lambda function URI, for example,
            arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations.
            In general, the URI has this form: arn:aws:apigateway:{region}:lambda:path/{service_api}
            , where {region} is the same as the region hosting the Lambda function,
            path indicates that the remaining substring in the URI should be treated
            as the path to the resource, including the initial /. For Lambda functions,
            this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations.
            Supported only for REQUEST authorizers.'
        EnableSimpleResponses:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a Lambda authorizer returns a response in
            a simple format. If enabled, the Lambda authorizer can return a boolean
            value instead of an IAM policy. Supported only for HTTP APIs. To learn
            more, see [Working with AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html)
        IdentitySource:
          allOf:
          - $ref: '#/components/schemas/IdentitySourceList'
          description: 'The identity source for which authorization is requested.


            For a REQUEST authorizer, this is optional. The value is a set of one
            or more mapping expressions of the specified request parameters. The identity
            source can be headers, query string parameters, stage variables, and context
            parameters. For example, if an Auth header and a Name query string parameter
            are defined as identity sources, this value is route.request.header.Auth,
            route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use
            selection expressions prefixed with $, for example, $request.header.Auth,
            $request.querystring.Name. These parameters are used to perform runtime
            validation for Lambda-based authorizers by verifying all of the identity-related
            request parameters are present in the request, not null, and non-empty.
            Only when this is true does the authorizer invoke the authorizer Lambda
            function. Otherwise, it returns a 401 Unauthorized response without calling
            the Lambda function. For HTTP APIs, identity sources are also used as
            the cache key when caching is enabled. To learn more, see [Working with
            AWS Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).


            For JWT, a single entry that specifies where to extract the JSON Web Token
            (JWT) from inbound requests. Currently only header-based and query parameter-based
            selections are supported, for example $request.header.Authorization.'
        IdentityValidationExpression:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
          - $ref: '#/components/schemas/JWTConfiguration'
          description: Represents the configuration of a JWT authorizer. Required
            for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the authorizer.
    UpdateDeploymentRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The deployment ID.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment resource.
      required:
      - ApiId
      - DeploymentId
      description: Updates a Deployment.
    UpdateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the deployment.
    UpdateDomainNameRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The domain name.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthenticationInput'
          description: The mutual TLS authentication configuration for a custom domain
            name.
      required:
      - DomainName
      description: Updates a DomainName.
    UpdateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The API mapping selection expression.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And512'
          description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
          - $ref: '#/components/schemas/DomainNameConfigurations'
          description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
          - $ref: '#/components/schemas/MutualTlsAuthentication'
          description: The mutual TLS authentication configuration for a custom domain
            name.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags associated with a domain name.
    UpdateIntegrationRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the integration
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY
            integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations, without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to the backend. The key should follow the pattern
            <action>:<header|querystring|path>.<location> where action can be append,
            overwrite or remove. For values, you can provide static values, or map
            request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfigInput'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
      required:
      - ApiId
      - IntegrationId
      description: Updates an Integration.
    UpdateIntegrationResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration ID.
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The integration response ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name} , where name is
            a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}
            , where {name} is a valid and unique response header name and {JSON-expression}
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration response.
            Supported only for WebSocket APIs.
      required:
      - ApiId
      - IntegrationId
      - IntegrationResponseId
      description: Updates an IntegrationResponses.
    UpdateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        IntegrationResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The integration response ID.
        IntegrationResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The integration response key.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: A key-value map specifying response parameters that are passed
            to the method response from the backend. The key is a method response
            header parameter name and the mapped value is an integration response
            header value, a static value enclosed within a pair of single quotes,
            or a JSON expression from the integration response body. The mapping key
            must match the pattern of method.response.header.{name}, where name is
            a valid and unique header name. The mapped non-static value must match
            the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression},
            where name is a valid and unique response header name and JSON-expression
            is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: The collection of response templates for the integration response
            as a string-to-string map of key-value pairs. Response templates are represented
            as a key/value map, with a content-type as the key and a template as the
            value.
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expressions for the integration response.
    UpdateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an integration is managed by API Gateway.
            If you created an API using using quick create, the resulting integration
            is managed by API Gateway. You can update a managed integration, but you
            can't delete it.
        ConnectionId:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
          description: The ID of the VPC link for a private integration. Supported
            only for HTTP APIs.
        ConnectionType:
          allOf:
          - $ref: '#/components/schemas/ConnectionType'
          description: The type of the network connection to the integration endpoint.
            Specify INTERNET for connections through the public routable internet
            or VPC_LINK for private connections between API Gateway and resources
            in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
          - $ref: '#/components/schemas/ContentHandlingStrategy'
          description: 'Supported only for WebSocket APIs. Specifies how to handle
            response payload content type conversions. Supported values are CONVERT_TO_BINARY
            and CONVERT_TO_TEXT, with the following behaviors:


            CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string
            to the corresponding binary blob.


            CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded
            string.


            If this property is not defined, the response payload will be passed through
            from the integration response to the route response or method response
            without modification.'
        CredentialsArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          description: Specifies the credentials required for the integration, if
            any. For AWS integrations, three options are available. To specify an
            IAM Role for API Gateway to assume, use the role's Amazon Resource Name
            (ARN). To require that the caller's identity be passed through from the
            request, specify the string arn:aws:iam::*:user/*. To use resource-based
            permissions on supported AWS services, specify null.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: Represents the description of an integration.
        IntegrationId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The integration response selection expression for the integration.
            Supported only for WebSocket APIs. See [Integration Response Selection
            Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions).
        IntegrationSubtype:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: Supported only for HTTP API AWS_PROXY integrations. Specifies
            the AWS service action to invoke. To learn more, see [Integration subtype
            reference](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html).
        IntegrationType:
          allOf:
          - $ref: '#/components/schemas/IntegrationType'
          description: 'The integration type of an integration. One of the following:


            AWS: for integrating the route or method request with an AWS service action,
            including the Lambda function-invoking action. With the Lambda function-invoking
            action, this is referred to as the Lambda custom integration. With any
            other AWS service action, this is known as AWS integration. Supported
            only for WebSocket APIs.


            AWS_PROXY: for integrating the route or method request with a Lambda function
            or other AWS service action. This integration is also referred to as a
            Lambda proxy integration.


            HTTP: for integrating the route or method request with an HTTP endpoint.
            This integration is also referred to as the HTTP custom integration. Supported
            only for WebSocket APIs.


            HTTP_PROXY: for integrating the route or method request with an HTTP endpoint,
            with the client request passed through as-is. This is also referred to
            as HTTP proxy integration.


            MOCK: for integrating the route or method request with API Gateway as
            a "loopback" endpoint without invoking any backend. Supported only for
            WebSocket APIs.'
        IntegrationUri:
          allOf:
          - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
          description: 'For a Lambda integration, specify the URI of a Lambda function.


            For an HTTP integration, specify a fully-qualified URL.


            For an HTTP API private integration, specify the ARN of an Application
            Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map
            service. If you specify the ARN of an AWS Cloud Map service, API Gateway
            uses DiscoverInstances to identify resources. You can use query parameters
            to target specific resources. To learn more, see [DiscoverInstances](https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html).
            For private integrations, all resources must be owned by the same AWS
            account.'
        PassthroughBehavior:
          allOf:
          - $ref: '#/components/schemas/PassthroughBehavior'
          description: 'Specifies the pass-through behavior for incoming requests
            based on the Content-Type header in the request, and the available mapping
            templates specified as the requestTemplates property on the Integration
            resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES,
            and NEVER. Supported only for WebSocket APIs.


            WHEN_NO_MATCH passes the request body for unmapped content types through
            to the integration backend without transformation.


            NEVER rejects unmapped content types with an HTTP 415 Unsupported Media
            Type response.


            WHEN_NO_TEMPLATES allows pass-through when the integration has no content
            types mapped to templates. However, if there is at least one content type
            defined, unmapped content types will be rejected with the same HTTP 415
            Unsupported Media Type response.'
        PayloadFormatVersion:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: Specifies the format of the payload sent to an integration.
            Required for HTTP APIs. Supported values for Lambda proxy integrations
            are 1.0 and 2.0. For all other integrations, 1.0 is the only supported
            value. To learn more, see [Working with AWS Lambda proxy integrations
            for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/IntegrationParameters'
          description: 'For WebSocket APIs, a key-value map specifying request parameters
            that are passed from the method request to the backend. The key is an
            integration request parameter name and the associated value is a method
            request parameter value or static value that must be enclosed within single
            quotes and pre-encoded as required by the backend. The method request
            parameter value must match the pattern of method.request.{location}.{name}
            , where {location} is querystring, path, or header; and {name} must be
            a valid and unique method request parameter name.


            For HTTP API integrations with a specified integrationSubtype, request
            parameters are a key-value map specifying parameters that are passed to
            AWS_PROXY integrations. You can provide static values, or map request
            data, stage variables, or context variables that are evaluated at runtime.
            To learn more, see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).


            For HTTP API integrations, without a specified integrationSubtype request
            parameters are a key-value map specifying how to transform HTTP requests
            before sending them to backend integrations. The key should follow the
            pattern <action>:<header|querystring|path>.<location>. The action can
            be append, overwrite or remove. For values, you can provide static values,
            or map request data, stage variables, or context variables that are evaluated
            at runtime. To learn more, see [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).'
        RequestTemplates:
          allOf:
          - $ref: '#/components/schemas/TemplateMap'
          description: Represents a map of Velocity templates that are applied on
            the request payload based on the value of the Content-Type header sent
            by the client. The content type value is the key in this map, and the
            template (as a String) is the value. Supported only for WebSocket APIs.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/ResponseParameters'
          description: Supported only for HTTP APIs. You use response parameters to
            transform the HTTP response from a backend integration before returning
            the response to clients. Specify a key-value map from a selection key
            to response parameters. The selection key must be a valid HTTP status
            code within the range of 200-599. Response parameters are a key-value
            map. The key must match pattern <action>:<header>.<location> or overwrite.statuscode.
            The action can be append, overwrite or remove. The value can be a static
            value, or map to response data, stage variables, or context variables
            that are evaluated at runtime. To learn more, see [Transforming API requests
            and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
        TemplateSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The template selection expression for the integration. Supported
            only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
          - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
          description: Custom timeout between 50 and 29,000 milliseconds for WebSocket
            APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default
            timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
        TlsConfig:
          allOf:
          - $ref: '#/components/schemas/TlsConfig'
          description: The TLS configuration for a private integration. If you specify
            a TLS configuration, private integration traffic uses the HTTPS protocol.
            Supported only for HTTP APIs.
    UpdateModelRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The model ID.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
      required:
      - ApiId
      - ModelId
      description: Updates a Model.
    UpdateModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And256'
          description: The content-type for the model, for example, "application/json".
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the model.
        ModelId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The model identifier.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
          description: The schema for the model. For application/json models, this
            should be JSON schema draft 4 model.
    UpdateRouteRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for the route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: The authorization scopes supported by this route.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
      required:
      - ApiId
      - RouteId
      description: Updates a Route.
    UpdateRouteResponseRequest:
      type: object
      properties:
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route response. Supported
            only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The response models for the route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route ID.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The route response ID.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route response key.
      required:
      - ApiId
      - RouteId
      - RouteResponseId
      description: Updates a RouteResponse.
    UpdateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: Represents the model selection expression of a route response.
            Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: Represents the route response key of a route response.
    UpdateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a route is managed by API Gateway. If you
            created an API using quick create, the $default route is managed by API
            Gateway. You can't modify the $default route key.
        ApiKeyRequired:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether an API key is required for this route. Supported
            only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
          - $ref: '#/components/schemas/AuthorizationScopes'
          description: A list of authorization scopes configured on a route. The scopes
            are used with a JWT authorizer to authorize the method invocation. The
            authorization works by matching the route scopes against the scopes parsed
            from the access token in the incoming request. The method invocation is
            authorized if any route scope matches a claimed scope in the access token.
            Otherwise, the invocation is not authorized. When the route scope is configured,
            the client must provide an access token instead of an identity token for
            authorization purposes.
        AuthorizationType:
          allOf:
          - $ref: '#/components/schemas/AuthorizationType'
          description: The authorization type for the route. For WebSocket APIs, valid
            values are NONE for open access, AWS_IAM for using AWS IAM permissions,
            and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are
            NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using
            AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
        AuthorizerId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Authorizer resource to be associated
            with this route. The authorizer identifier is generated by API Gateway
            when you created the authorizer.
        ModelSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The model selection expression for the route. Supported only
            for WebSocket APIs.
        OperationName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And64'
          description: The operation name for the route.
        RequestModels:
          allOf:
          - $ref: '#/components/schemas/RouteModels'
          description: The request models for the route. Supported only for WebSocket
            APIs.
        RequestParameters:
          allOf:
          - $ref: '#/components/schemas/RouteParameters'
          description: The request parameters for the route. Supported only for WebSocket
            APIs.
        RouteId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The route ID.
        RouteKey:
          allOf:
          - $ref: '#/components/schemas/SelectionKey'
          description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
          - $ref: '#/components/schemas/SelectionExpression'
          description: The route response selection expression for the route. Supported
            only for WebSocket APIs.
        Target:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The target for the route.
    UpdateStageRequest:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The API identifier.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: The default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The deployment identifier for the API stage. Can't be updated
            if autoDeploy is enabled.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description for the API stage.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage.
        StageName:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The stage name. Stage names can contain only alphanumeric characters,
            hyphens, and underscores, or be $default. Maximum length is 128 characters.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a Stage. Variable
            names can have alphanumeric and underscore characters, and the values
            must match [A-Za-z0-9-._~:/?#&=,]+.
      required:
      - ApiId
      - StageName
      description: Updates a Stage.
    UpdateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
          - $ref: '#/components/schemas/AccessLogSettings'
          description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether a stage is managed by API Gateway. If you
            created an API using quick create, the $default stage is managed by API
            Gateway. You can't modify the $default stage.
        AutoDeploy:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          description: Specifies whether updates to an API automatically trigger a
            new deployment. The default value is false.
        ClientCertificateId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of a client certificate for a Stage. Supported
            only for WebSocket APIs.
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettings'
          description: Default route settings for the stage.
        DeploymentId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The identifier of the Deployment that the Stage is associated
            with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: Describes the status of the last deployment of a stage. Supported
            only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
          - $ref: '#/components/schemas/RouteSettingsMap'
          description: Route settings for the stage, by routeKey.
        StageName:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the stage.
        StageVariables:
          allOf:
          - $ref: '#/components/schemas/StageVariablesMap'
          description: A map that defines the stage variables for a stage resource.
            Variable names can have alphanumeric and underscore characters, and the
            values must match [A-Za-z0-9-._~:/?#&=,]+.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: The collection of tags. Each tag element is associated with
            a given resource.
    UpdateVpcLinkRequest:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/__string'
          description: The ID of the VPC link.
      required:
      - VpcLinkId
      description: Updates a VPC link.
    UpdateVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the VPC link was created.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags for the VPC link.
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          description: The version of the VPC link.
    UriWithLengthBetween1And2048:
      type: string
    VpcLink:
      type: object
      properties:
        CreatedDate:
          allOf:
          - $ref: '#/components/schemas/__timestampIso8601'
          description: The timestamp when the VPC link was created.
        Name:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween1And128'
          description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/SecurityGroupIdList'
          description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/SubnetIdList'
          description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
          - $ref: '#/components/schemas/Tags'
          description: Tags for the VPC link.
        VpcLinkId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
          - $ref: '#/components/schemas/VpcLinkStatus'
          description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
          - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
          description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
          - $ref: '#/components/schemas/VpcLinkVersion'
          description: The version of the VPC link.
      required:
      - Name
      - SecurityGroupIds
      - SubnetIds
      - VpcLinkId
      description: Represents a VPC link.
    VpcLinkStatus:
      type: string
      enum:
      - PENDING
      - AVAILABLE
      - DELETING
      - FAILED
      - INACTIVE
      description: <p>The status of the VPC link.</p>
    VpcLinkVersion:
      type: string
      enum:
      - V2
      description: <p>The version of the VPC link.</p>
    __boolean:
      type: boolean
    __double:
      type: number
      format: double
    __integer:
      type: integer
    __listOfApi:
      type: array
      items:
        $ref: '#/components/schemas/Api'
    __listOfApiMapping:
      type: array
      items:
        $ref: '#/components/schemas/ApiMapping'
    __listOfAuthorizer:
      type: array
      items:
        $ref: '#/components/schemas/Authorizer'
    __listOfDeployment:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    __listOfDomainName:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
    __listOfIntegration:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    __listOfIntegrationResponse:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationResponse'
    __listOfModel:
      type: array
      items:
        $ref: '#/components/schemas/Model'
    __listOfRoute:
      type: array
      items:
        $ref: '#/components/schemas/Route'
    __listOfRouteResponse:
      type: array
      items:
        $ref: '#/components/schemas/RouteResponse'
    __listOfStage:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    __listOfVpcLink:
      type: array
      items:
        $ref: '#/components/schemas/VpcLink'
    __listOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    __string:
      type: string
    __timestampIso8601:
      type: string
      format: date-time
