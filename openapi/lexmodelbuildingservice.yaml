openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: lex_model_building_service
  x-aws-serviceName: lexmodelbuildingservice
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2017-04-19'
  title: Amazon Lex Model Building Service
  description: |-
    Amazon Lex Build-Time Actions

    Amazon Lex is an AWS service for building conversational voice and text interfaces. Use these actions to create, update, and delete conversational bots for new and existing client applications.
servers:
- description: The Amazon Lex Model Building Service regional endpoint
  url: https://models.lex.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /bots/{name}/versions:
    post:
      operationId: CreateBotVersion
      description: |-
        Creates a new version of the bot based on the `$LATEST` version. If the `$LATEST` version of this resource hasn't changed since you created the last version, Amazon Lex doesn't create a new version. It returns the last created version.

        You can update only the `$LATEST` version of the bot. You can't update the numbered versions that you create with the `CreateBotVersion` operation.

        When you create the first version of a bot, Amazon Lex sets the version to 1. Subsequent versions increment by 1. For more information, see versioning-intro.

        This operation requires permission for the `lex:CreateBotVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
    get:
      operationId: GetBotVersions
      description: |-
        Gets information about all of the versions of a bot.

        The `GetBotVersions` operation returns a `BotMetadata` object for each version of a bot. For example, if a bot has three numbered versions, the `GetBotVersions` operation returns four `BotMetadata` objects in the response, one for each numbered version and one for the `$LATEST` version.

        The `GetBotVersions` operation always returns at least one version, the `$LATEST` version.

        This operation requires permissions for the `lex:GetBotVersions` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /intents/{name}/versions:
    post:
      operationId: CreateIntentVersion
      description: |-
        Creates a new version of an intent based on the `$LATEST` version of the intent. If the `$LATEST` version of this intent hasn't changed since you last updated it, Amazon Lex doesn't create a new version. It returns the last version you created.

        You can update only the `$LATEST` version of the intent. You can't update the numbered versions that you create with the `CreateIntentVersion` operation.

        When you create a version of an intent, Amazon Lex sets the version to 1\. Subsequent versions increment by 1. For more information, see versioning-intro.

        This operation requires permissions to perform the `lex:CreateIntentVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
    get:
      operationId: GetIntentVersions
      description: |-
        Gets information about all of the versions of an intent.

        The `GetIntentVersions` operation returns an `IntentMetadata` object for each version of an intent. For example, if an intent has three numbered versions, the `GetIntentVersions` operation returns four `IntentMetadata` objects in the response, one for each numbered version and one for the `$LATEST` version.

        The `GetIntentVersions` operation always returns at least one version, the `$LATEST` version.

        This operation requires permissions for the `lex:GetIntentVersions` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /slottypes/{name}/versions:
    post:
      operationId: CreateSlotTypeVersion
      description: |-
        Creates a new version of a slot type based on the `$LATEST` version of the specified slot type. If the `$LATEST` version of this resource has not changed since the last version that you created, Amazon Lex doesn't create a new version. It returns the last version that you created.

        You can update only the `$LATEST` version of a slot type. You can't update the numbered versions that you create with the `CreateSlotTypeVersion` operation.

        When you create a version of a slot type, Amazon Lex sets the version to 1\. Subsequent versions increment by 1. For more information, see versioning-intro.

        This operation requires permissions for the `lex:CreateSlotTypeVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                checksum:
                  $ref: '#/components/schemas/String'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
    get:
      operationId: GetSlotTypeVersions
      description: |-
        Gets information about all versions of a slot type.

        The `GetSlotTypeVersions` operation returns a `SlotTypeMetadata` object for each version of a slot type. For example, if a slot type has three numbered versions, the `GetSlotTypeVersions` operation returns four `SlotTypeMetadata` objects in the response, one for each numbered version and one for the `$LATEST` version.

        The `GetSlotTypeVersions` operation always returns at least one version, the `$LATEST` version.

        This operation requires permissions for the `lex:GetSlotTypeVersions` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{name}:
    delete:
      operationId: DeleteBot
      description: |-
        Deletes all versions of the bot, including the `$LATEST` version. To delete a specific version of the bot, use the DeleteBotVersion operation. The `DeleteBot` operation doesn't immediately remove the bot schema. Instead, it is marked for deletion and removed later.

        Amazon Lex stores utterances indefinitely for improving the ability of your bot to respond to user inputs. These utterances are not removed when the bot is deleted. To remove the utterances, use the DeleteUtterances operation.

        If a bot has an alias, you can't delete it. Instead, the `DeleteBot` operation returns a `ResourceInUseException` exception that includes a reference to the alias that refers to the bot. To remove the reference to the bot, delete the alias. If you get the same exception again, delete the referring alias until the `DeleteBot` operation is successful.

        This operation requires permissions for the `lex:DeleteBot` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{botName}/aliases/{name}:
    delete:
      operationId: DeleteBotAlias
      description: |-
        Deletes an alias for the specified bot.

        You can't delete an alias that is used in the association between a bot and a messaging channel. If an alias is used in a channel association, the `DeleteBot` operation returns a `ResourceInUseException` exception that includes a reference to the channel association that refers to the bot. You can remove the reference to the alias by deleting the channel association. If you get the same exception again, delete the referring association until the `DeleteBotAlias` operation is successful.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasName'
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetBotAlias
      description: |-
        Returns information about an Amazon Lex bot alias. For more information about aliases, see versioning-aliases.

        This operation requires permissions for the `lex:GetBotAlias` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasName'
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    put:
      operationId: PutBotAlias
      description: |-
        Creates an alias for the specified version of the bot or replaces an alias for the specified bot. To change the version of the bot that the alias points to, replace the alias. For more information about aliases, see versioning-aliases.

        This operation requires permissions for the `lex:PutBotAlias` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasName'
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                botVersion:
                  $ref: '#/components/schemas/Version'
                checksum:
                  $ref: '#/components/schemas/String'
                conversationLogs:
                  $ref: '#/components/schemas/ConversationLogsRequest'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
  /bots/{botName}/aliases/{botAlias}/channels/{name}:
    delete:
      operationId: DeleteBotChannelAssociation
      description: |-
        Deletes the association between an Amazon Lex bot and a messaging platform.

        This operation requires permission for the `lex:DeleteBotChannelAssociation` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotChannelName'
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasName'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetBotChannelAssociation
      description: |-
        Returns information about the association between an Amazon Lex bot and a messaging platform.

        This operation requires permissions for the `lex:GetBotChannelAssociation` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotChannelName'
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{name}/versions/{version}:
    delete:
      operationId: DeleteBotVersion
      description: |-
        Deletes a specific version of a bot. To delete all versions of a bot, use the DeleteBot operation.

        This operation requires permissions for the `lex:DeleteBotVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /intents/{name}:
    delete:
      operationId: DeleteIntent
      description: |-
        Deletes all versions of the intent, including the `$LATEST` version. To delete a specific version of the intent, use the DeleteIntentVersion operation.

        You can delete a version of an intent only if it is not referenced. To delete an intent that is referred to in one or more bots (see how-it-works), you must remove those references first.

        If you get the `ResourceInUseException` exception, it provides an example reference that shows where the intent is referenced. To remove the reference to the intent, either update the bot or delete it. If you get the same exception when you attempt to delete the intent again, repeat until the intent has no references and the call to `DeleteIntent` is successful.

        This operation requires permission for the `lex:DeleteIntent` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /intents/{name}/versions/{version}:
    delete:
      operationId: DeleteIntentVersion
      description: |-
        Deletes a specific version of an intent. To delete all versions of a intent, use the DeleteIntent operation.

        This operation requires permissions for the `lex:DeleteIntentVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    get:
      operationId: GetIntent
      description: |-
        Returns information about an intent. In addition to the intent name, you must specify the intent version.

        This operation requires permissions to perform the `lex:GetIntent` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /slottypes/{name}:
    delete:
      operationId: DeleteSlotType
      description: |-
        Deletes all versions of the slot type, including the `$LATEST` version. To delete a specific version of the slot type, use the DeleteSlotTypeVersion operation.

        You can delete a version of a slot type only if it is not referenced. To delete a slot type that is referred to in one or more intents, you must remove those references first.

        If you get the `ResourceInUseException` exception, the exception provides an example reference that shows the intent where the slot type is referenced. To remove the reference to the slot type, either update the intent or delete it. If you get the same exception when you attempt to delete the slot type again, repeat until the slot type has no references and the `DeleteSlotType` call is successful.

        This operation requires permission for the `lex:DeleteSlotType` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /slottypes/{name}/version/{version}:
    delete:
      operationId: DeleteSlotTypeVersion
      description: |-
        Deletes a specific version of a slot type. To delete all versions of a slot type, use the DeleteSlotType operation.

        This operation requires permissions for the `lex:DeleteSlotTypeVersion` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      responses:
        '204': {}
        '400':
          description: |-
            The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.

            The body of the exception contains a JSON object that describes the resource.

            `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`

            `"resourceReference": {`

            `"name": _string_ , "version": _string_ } }`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{botName}/utterances/{userId}:
    delete:
      operationId: DeleteUtterances
      description: |-
        Deletes stored utterances.

        Amazon Lex stores the utterances that users send to your bot. Utterances are stored for 15 days for use with the GetUtterancesView operation, and then stored indefinitely for use in improving the ability of your bot to respond to user input.

        Use the `DeleteUtterances` operation to manually delete stored utterances for a specific user. When you use the `DeleteUtterances` operation, utterances stored for improving your bot's ability to respond to user input are deleted immediately. Utterances stored for use with the `GetUtterancesView` operation are deleted after 15 days.

        This operation requires permissions for the `lex:DeleteUtterances` action.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{name}/versions/{versionOrAlias}:
    get:
      operationId: GetBot
      description: |-
        Returns metadata information for a specific bot. You must provide the bot name and the bot version or alias.

        This operation requires permissions for the `lex:GetBot` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: versionOrAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{botName}/aliases:
    get:
      operationId: GetBotAliases
      description: |-
        Returns a list of aliases for a specified Amazon Lex bot.

        This operation requires permissions for the `lex:GetBotAliases` action.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/AliasName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
  /bots/{botName}/aliases/{botAlias}/channels:
    get:
      operationId: GetBotChannelAssociations
      description: |-
        Returns a list of all of the channels associated with the specified bot.

        The `GetBotChannelAssociations` operation requires permissions for the `lex:GetBotChannelAssociations` action.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: botAlias
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AliasNameOrListAll'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BotChannelName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
  /bots:
    get:
      operationId: GetBots
      description: |-
        Returns bot information as follows:

          * If you provide the `nameContains` field, the response includes information for the `$LATEST` version of all bots whose name contains the specified string.

          * If you don't specify the `nameContains` field, the operation returns information about the `$LATEST` version of all of your bots.

        This operation requires permission for the `lex:GetBots` action.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BotName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /builtins/intents/{signature}:
    get:
      operationId: GetBuiltinIntent
      description: |-
        Returns information about a built-in intent.

        This operation requires permission for the `lex:GetBuiltinIntent` action.
      parameters:
      - name: signature
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BuiltinIntentSignature'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /builtins/intents:
    get:
      operationId: GetBuiltinIntents
      description: |-
        Gets a list of built-in intents that meet the specified criteria.

        This operation requires permission for the `lex:GetBuiltinIntents` action.
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Locale'
      - name: signatureContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
  /builtins/slottypes:
    get:
      operationId: GetBuiltinSlotTypes
      description: |-
        Gets a list of built-in slot types that meet the specified criteria.

        For a list of built-in slot types, see [Slot Type Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference) in the _Alexa Skills Kit_.

        This operation requires permission for the `lex:GetBuiltInSlotTypes` action.
      parameters:
      - name: locale
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Locale'
      - name: signatureContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/String'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
  /exports:
    get:
      operationId: GetExport
      description: |-
        Exports the contents of a Amazon Lex resource in a specified format.
      parameters:
      - name: name
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Name'
      - name: version
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/NumericalVersion'
      - name: resourceType
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ResourceType'
      - name: exportType
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ExportType'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /imports/{importId}:
    get:
      operationId: GetImport
      description: |-
        Gets information about an import job started with the `StartImport` operation.
      parameters:
      - name: importId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/String'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /intents:
    get:
      operationId: GetIntents
      description: "Returns intent information as follows:\n\n  * If you specify the\
        \ `nameContains` field, returns the `$LATEST` version of all intents that\
        \ contain the specified string.\n\n  * If you don't specify the `nameContains`\
        \ field, returns information about the `$LATEST` version of all intents. \n\
        \nThe operation requires permission for the `lex:GetIntents` action."
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IntentName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /migrations/{migrationId}:
    get:
      operationId: GetMigration
      description: |-
        Provides details about an ongoing or complete migration from an Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration alerts and warnings related to the migration.
      parameters:
      - name: migrationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MigrationId'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /migrations:
    get:
      operationId: GetMigrations
      description: |-
        Gets a list of migrations between Amazon Lex V1 and Amazon Lex V2.
      parameters:
      - name: sortByAttribute
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MigrationSortAttribute'
      - name: sortByOrder
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: v1BotNameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BotName'
      - name: migrationStatusEquals
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MigrationStatus'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
    post:
      operationId: StartMigration
      description: |-
        Starts migrating a bot from Amazon Lex V1 to Amazon Lex V2. Migrate your bot when you want to take advantage of the new features of Amazon Lex V2.

        For more information, see [Migrating a bot](https://docs.aws.amazon.com/lex/latest/dg/migrate.html) in the _Amazon Lex developer guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                v1BotName:
                  $ref: '#/components/schemas/BotName'
                v1BotVersion:
                  $ref: '#/components/schemas/Version'
                v2BotName:
                  $ref: '#/components/schemas/V2BotName'
                v2BotRole:
                  $ref: '#/components/schemas/IamRoleArn'
                migrationStrategy:
                  $ref: '#/components/schemas/MigrationStrategy'
      responses:
        '202': {}
        '403':
          description: |-
            Your IAM user or role does not have permission to call the Amazon Lex V2 APIs required to migrate your bot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /slottypes/{name}/versions/{version}:
    get:
      operationId: GetSlotType
      description: |-
        Returns information about a specific version of a slot type. In addition to specifying the slot type name, you must specify the slot type version.

        This operation requires permissions for the `lex:GetSlotType` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      - name: version
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Version'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /slottypes:
    get:
      operationId: GetSlotTypes
      description: "Returns slot type information as follows:\n\n  * If you specify\
        \ the `nameContains` field, returns the `$LATEST` version of all slot types\
        \ that contain the specified string.\n\n  * If you don't specify the `nameContains`\
        \ field, returns information about the `$LATEST` version of all slot types.\
        \ \n\nThe operation requires permission for the `lex:GetSlotTypes` action."
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nameContains
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{botName}/utterances?view=aggregation:
    get:
      operationId: GetUtterancesView
      description: |-
        Use the `GetUtterancesView` operation to get information about the utterances that your users have made to your bot. You can use this list to tune the utterances that your bot responds to.

        For example, say that you have created a bot to order flowers. After your users have used your bot for a while, use the `GetUtterancesView` operation to see the requests that they have made and whether they have been successful. You might find that the utterance "I want flowers" is not being recognized. You could add this utterance to the `OrderFlowers` intent so that your bot recognizes that utterance.

        After you publish a new version of a bot, you can get information about the old version and the new so that you can compare the performance across the two versions.

        Utterance statistics are generated once a day. Data is available for the last 15 days. You can request information for up to 5 versions of your bot in each request. Amazon Lex returns the most frequent utterances received by the bot in the last 15 days. The response contains information about a maximum of 100 utterances for each version.

        If you set `childDirected` field to true when you created your bot, if you are using slot obfuscation with one or more slots, or if you opted out of participating in improving Amazon Lex, utterances are not available.

        This operation requires permissions for the `lex:GetUtterancesView` action.
      parameters:
      - name: botName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      - name: bot_versions
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/BotVersions'
      - name: status_type
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/StatusType'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
  /tags/{resourceArn}:
    get:
      operationId: ListTagsForResource
      description: |-
        Gets a list of tags associated with the specified resource. Only bots, bot aliases, and bot channels can have tags associated with them.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    post:
      operationId: TagResource
      description: |-
        Adds the specified tags to the specified resource. If a tag key already exists, the existing value is replaced with the new value.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from a bot, bot alias or bot channel.
      parameters:
      - name: resourceArn
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AmazonResourceName'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '204': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '404':
          description: |-
            The resource specified in the request was not found. Check the resource and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
  /bots/{name}/versions/$LATEST:
    put:
      operationId: PutBot
      description: |-
        Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum information, the bot is created or updated but Amazon Lex returns the `` response `FAILED`. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see how-it-works.

        If you specify the name of an existing bot, the fields in the request replace the existing values in the `$LATEST` version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the `idleTTLInSeconds` and `privacySettings` fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.

        This operation requires permissions for the `lex:PutBot` action. For more information, see security-iam.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BotName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                intents:
                  $ref: '#/components/schemas/IntentList'
                enableModelImprovements:
                  $ref: '#/components/schemas/Boolean'
                nluIntentConfidenceThreshold:
                  $ref: '#/components/schemas/ConfidenceThreshold'
                clarificationPrompt:
                  $ref: '#/components/schemas/Prompt'
                abortStatement:
                  $ref: '#/components/schemas/Statement'
                idleSessionTTLInSeconds:
                  $ref: '#/components/schemas/SessionTTL'
                voiceId:
                  $ref: '#/components/schemas/String'
                checksum:
                  $ref: '#/components/schemas/String'
                processBehavior:
                  $ref: '#/components/schemas/ProcessBehavior'
                locale:
                  $ref: '#/components/schemas/Locale'
                childDirected:
                  $ref: '#/components/schemas/Boolean'
                detectSentiment:
                  $ref: '#/components/schemas/Boolean'
                createVersion:
                  $ref: '#/components/schemas/Boolean'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
  /intents/{name}/versions/$LATEST:
    put:
      operationId: PutIntent
      description: "Creates an intent or replaces an existing intent.\n\nTo define\
        \ the interaction between the user and your bot, you use one or more intents.\
        \ For a pizza ordering bot, for example, you would create an `OrderPizza`\
        \ intent.\n\nTo create an intent or replace an existing intent, you must provide\
        \ the following:\n\n  * Intent name. For example, `OrderPizza`.\n\n  * Sample\
        \ utterances. For example, \"Can I order a pizza, please.\" and \"I want to\
        \ order a pizza.\"\n\n  * Information to be gathered. You specify slot types\
        \ for the information that your bot will request from the user. You can specify\
        \ standard slot types, such as a date or a time, or custom slot types such\
        \ as the size and crust of a pizza.\n\n  * How the intent will be fulfilled.\
        \ You can provide a Lambda function or configure the intent to return the\
        \ intent information to the client application. If you use a Lambda function,\
        \ when all of the intent information is available, Amazon Lex invokes your\
        \ Lambda function. If you configure your intent to return the intent information\
        \ to the client application. \n\nYou can specify other optional information\
        \ in the request, such as:\n\n  * A confirmation prompt to ask the user to\
        \ confirm an intent. For example, \"Shall I order your pizza?\"\n\n  * A conclusion\
        \ statement to send to the user after the intent has been fulfilled. For example,\
        \ \"I placed your pizza order.\"\n\n  * A follow-up prompt that asks the user\
        \ for additional activity. For example, asking \"Do you want to order a drink\
        \ with your pizza?\"\n\nIf you specify an existing intent name to update the\
        \ intent, Amazon Lex replaces the values in the `$LATEST` version of the intent\
        \ with the values in the request. Amazon Lex removes fields that you don't\
        \ provide in the request. If you don't specify the required fields, Amazon\
        \ Lex throws an exception. When you update the `$LATEST` version of an intent,\
        \ the `status` field of any bot that uses the `$LATEST` version of the intent\
        \ is set to `NOT_BUILT`.\n\nFor more information, see how-it-works.\n\nThis\
        \ operation requires permissions for the `lex:PutIntent` action."
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IntentName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                slots:
                  $ref: '#/components/schemas/SlotList'
                sampleUtterances:
                  $ref: '#/components/schemas/IntentUtteranceList'
                confirmationPrompt:
                  $ref: '#/components/schemas/Prompt'
                rejectionStatement:
                  $ref: '#/components/schemas/Statement'
                followUpPrompt:
                  $ref: '#/components/schemas/FollowUpPrompt'
                conclusionStatement:
                  $ref: '#/components/schemas/Statement'
                dialogCodeHook:
                  $ref: '#/components/schemas/CodeHook'
                fulfillmentActivity:
                  $ref: '#/components/schemas/FulfillmentActivity'
                parentIntentSignature:
                  $ref: '#/components/schemas/BuiltinIntentSignature'
                checksum:
                  $ref: '#/components/schemas/String'
                createVersion:
                  $ref: '#/components/schemas/Boolean'
                kendraConfiguration:
                  $ref: '#/components/schemas/KendraConfiguration'
                inputContexts:
                  $ref: '#/components/schemas/InputContextList'
                outputContexts:
                  $ref: '#/components/schemas/OutputContextList'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
  /slottypes/{name}/versions/$LATEST:
    put:
      operationId: PutSlotType
      description: |-
        Creates a custom slot type or replaces an existing custom slot type.

        To create a custom slot type, specify a name for the slot type and a set of enumeration values, which are the values that a slot of this type can assume. For more information, see how-it-works.

        If you specify the name of an existing slot type, the fields in the request replace the existing values in the `$LATEST` version of the slot type. Amazon Lex removes the fields that you don't provide in the request. If you don't specify required fields, Amazon Lex throws an exception. When you update the `$LATEST` version of a slot type, if a bot uses the `$LATEST` version of an intent that contains the slot type, the bot's `status` field is set to `NOT_BUILT`.

        This operation requires permissions for the `lex:PutSlotType` action.
      parameters:
      - name: name
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SlotTypeName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                enumerationValues:
                  $ref: '#/components/schemas/EnumerationValues'
                checksum:
                  $ref: '#/components/schemas/String'
                valueSelectionStrategy:
                  $ref: '#/components/schemas/SlotValueSelectionStrategy'
                createVersion:
                  $ref: '#/components/schemas/Boolean'
                parentSlotTypeSignature:
                  $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
                slotTypeConfigurations:
                  $ref: '#/components/schemas/SlotTypeConfigurations'
      responses:
        '200': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '409':
          description: |-
            There was a conflict processing the request. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '412':
          description: |-
            The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionFailedException'
  /imports:
    post:
      operationId: StartImport
      description: |-
        Starts a job to import a resource to Amazon Lex.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/Blob'
                resourceType:
                  $ref: '#/components/schemas/ResourceType'
                mergeStrategy:
                  $ref: '#/components/schemas/MergeStrategy'
                tags:
                  $ref: '#/components/schemas/TagList'
      responses:
        '201': {}
        '400':
          description: |-
            The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '500':
          description: |-
            An internal Amazon Lex error occurred. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
        '429':
          description: |-
            The request exceeded a limit. Try your request again.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Your IAM user or role does not have permission to call the Amazon
        Lex V2 APIs required to migrate your bot.
    AliasName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    AliasNameOrListAll:
      type: string
      pattern: ^(-|^([A-Za-z]_?)+$)$
      minLength: 1
      maxLength: 100
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    BadRequestException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The request is not well formed. For example, a value is invalid
        or a required field is missing. Check the field values, and try again.
    Blob:
      type: string
      format: byte
    Boolean:
      type: boolean
    BotAliasMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the Amazon Lex bot to which the alias points.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot to which the alias points.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was updated. When you create a
            resource, the creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the bot alias.
        conversationLogs:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsResponse'
          description: Settings that determine how Amazon Lex uses conversation logs
            for the alias.
      description: Provides information about a bot alias.
    BotAliasMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/BotAliasMetadata'
    BotChannelAssociation:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          description: The name of the association between the bot and the channel.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A text description of the association you are creating.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: An alias pointing to the specific version of the Amazon Lex
            bot to which this association is being made.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: 'The name of the Amazon Lex bot to which this association is
            being made.


            Currently, Amazon Lex supports associations with Facebook and Slack, and
            Twilio.'
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the association between the Amazon Lex bot and
            the channel was created.
        type:
          allOf:
          - $ref: '#/components/schemas/ChannelType'
          description: Specifies the type of association by indicating the type of
            channel being established between the Amazon Lex bot and the external
            messaging platform.
        botConfiguration:
          allOf:
          - $ref: '#/components/schemas/ChannelConfigurationMap'
          description: Provides information necessary to communicate with the messaging
            platform.
        status:
          allOf:
          - $ref: '#/components/schemas/ChannelStatus'
          description: "The status of the bot channel.\n\n  * `CREATED` \\- The channel\
            \ has been created and is ready for use.\n\n  * `IN_PROGRESS` \\- Channel\
            \ creation is in progress.\n\n  * `FAILED` \\- There was an error creating\
            \ the channel. For information about the reason for the failure, see the\
            \ `failureReason` field."
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex provides the reason that
            it failed to create the association.
      description: Represents an association between an Amazon Lex bot and an external
        messaging platform.
    BotChannelAssociationList:
      type: array
      items:
        $ref: '#/components/schemas/BotChannelAssociation'
    BotChannelName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    BotMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the bot.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was updated. When you create a bot, the
            creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot. For a new bot, the version is always
            `$LATEST`.
      description: Provides information about a bot. .
    BotMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/BotMetadata'
    BotName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 2
      maxLength: 50
    BotVersions:
      type: array
      items:
        $ref: '#/components/schemas/Version'
    BuiltinIntentMetadata:
      type: object
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: A unique identifier for the built-in intent. To find the signature
            for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
            in the _Alexa Skills Kit_.
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          description: A list of identifiers for the locales that the intent supports.
      description: Provides metadata for a built-in intent.
    BuiltinIntentMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltinIntentMetadata'
    BuiltinIntentSignature:
      type: string
    BuiltinIntentSlot:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A list of the slots defined for the intent.
      description: Provides information about a slot used in a built-in intent.
    BuiltinIntentSlotList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltinIntentSlot'
    BuiltinSlotTypeMetadata:
      type: object
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinSlotTypeSignature'
          description: A unique identifier for the built-in slot type. To find the
            signature for a slot type, see [Slot Type Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference)
            in the _Alexa Skills Kit_.
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          description: A list of target locales for the slot.
      description: Provides information about a built in slot type.
    BuiltinSlotTypeMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/BuiltinSlotTypeMetadata'
    BuiltinSlotTypeSignature:
      type: string
    ChannelConfigurationMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    ChannelStatus:
      type: string
      enum:
      - IN_PROGRESS
      - CREATED
      - FAILED
    ChannelType:
      type: string
      enum:
      - Facebook
      - Slack
      - Twilio-Sms
      - Kik
    CodeHook:
      type: object
      properties:
        uri:
          allOf:
          - $ref: '#/components/schemas/LambdaARN'
          description: The Amazon Resource Name (ARN) of the Lambda function.
        messageVersion:
          allOf:
          - $ref: '#/components/schemas/MessageVersion'
          description: The version of the request-response that you want Amazon Lex
            to use to invoke your Lambda function. For more information, see using-lambda.
      required:
      - uri
      - messageVersion
      description: Specifies a Lambda function that verifies requests to a bot or
        fulfills the user's request to a bot..
    ConfidenceThreshold:
      type: number
      format: double
      minimum: 0
      maximum: 1
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: There was a conflict processing the request. Try your request again.
    ContentString:
      type: string
      minLength: 1
      maxLength: 1000
    ContentType:
      type: string
      enum:
      - PlainText
      - SSML
      - CustomPayload
    ContextTimeToLiveInSeconds:
      type: integer
      minimum: 5
      maximum: 86400
    ContextTurnsToLive:
      type: integer
      minimum: 1
      maximum: 20
    ConversationLogsRequest:
      type: object
      properties:
        logSettings:
          allOf:
          - $ref: '#/components/schemas/LogSettingsRequestList'
          description: The settings for your conversation logs. You can log the conversation
            text, conversation audio, or both.
        iamRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of an IAM role with permission
            to write to your CloudWatch Logs for text logs and your S3 bucket for
            audio logs. If audio encryption is enabled, this role also provides access
            permission for the AWS KMS key used for encrypting audio logs. For more
            information, see [Creating an IAM Role and Policy for Conversation Logs](https://docs.aws.amazon.com/lex/latest/dg/conversation-logs-role-and-policy.html).
      required:
      - logSettings
      - iamRoleArn
      description: Provides the settings needed for conversation logs.
    ConversationLogsResponse:
      type: object
      properties:
        logSettings:
          allOf:
          - $ref: '#/components/schemas/LogSettingsResponseList'
          description: The settings for your conversation logs. You can log text,
            audio, or both.
        iamRoleArn:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The Amazon Resource Name (ARN) of the IAM role used to write
            your logs to CloudWatch Logs or an S3 bucket.
      description: Contains information about conversation log settings.
    Count:
      type: integer
    CreateBotVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that you want to create a new version of.
            The name is case sensitive.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Identifies a specific revision of the `$LATEST` version of
            the bot. If you specify a checksum and the `$LATEST` version of the bot
            has a different checksum, a `PreconditionFailedException` exception is
            returned and Amazon Lex doesn't publish a new version. If you don't specify
            a checksum, Amazon Lex publishes the `$LATEST` version.
      required:
      - name
    CreateBotVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          description: An array of `Intent` objects. For more information, see PutBot.
        clarificationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: The message that Amazon Lex uses when it doesn't understand
            the user's request. For more information, see PutBot.
        abortStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: The message that Amazon Lex uses to cancel a conversation.
            For more information, see PutBot.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: When you send a request to create or update a bot, Amazon Lex
            sets the `status` response element to `BUILDING`. After Amazon Lex builds
            the bot, it sets `status` to `READY`. If Amazon Lex can't build the bot,
            it sets `status` to `FAILED`. Amazon Lex returns the reason for the failure
            in the `failureReason` response element.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex provides the reason that
            it failed to build the bot.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date when the `$LATEST` version of this bot was updated.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date when the bot version was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The maximum time in seconds that Amazon Lex retains the data
            gathered in a conversation. For more information, see PutBot.
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interactions
            with the user.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum identifying the version of the bot that was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot.
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: Specifies the target locale for the bot.
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'For each Amazon Lex bot created with the Amazon Lex Model
            Building Service, you must specify whether your use of Amazon Lex is related
            to a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to the Children''s
            Online Privacy Protection Act (COPPA) by specifying `true` or `false`
            in the `childDirected` field. By specifying `true` in the `childDirected`
            field, you confirm that your use of Amazon Lex **is** related to a website,
            program, or other application that is directed or targeted, in whole or
            in part, to children under age 13 and subject to COPPA. By specifying
            `false` in the `childDirected` field, you confirm that your use of Amazon
            Lex **is not** related to a website, program, or other application that
            is directed or targeted, in whole or in part, to children under age 13
            and subject to COPPA. You may not specify a default value for the `childDirected`
            field that does not accurately reflect whether your use of Amazon Lex
            is related to a website, program, or other application that is directed
            or targeted, in whole or in part, to children under age 13 and subject
            to COPPA.


            If your use of Amazon Lex relates to a website, program, or other application
            that is directed in whole or in part, to children under age 13, you must
            obtain any required verifiable parental consent under COPPA. For information
            regarding the use of Amazon Lex in connection with websites, programs,
            or other applications that are directed or targeted, in whole or in part,
            to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)'
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the bot uses accuracy improvements. `true`
            indicates that the bot is using the improvements, otherwise, `false`.
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether utterances entered by the user should be
            sent to Amazon Comprehend for sentiment analysis.
    CreateIntentVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent that you want to create a new version
            of. The name is case sensitive.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the `$LATEST` version of the intent that should
            be used to create the new version. If you specify a checksum and the `$LATEST`
            version of the intent has a different checksum, Amazon Lex returns a `PreconditionFailedException`
            exception and doesn't publish a new version. If you don't specify a checksum,
            Amazon Lex publishes the `$LATEST` version.
      required:
      - name
    CreateIntentVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          description: An array of slot types that defines the information required
            to fulfill the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          description: An array of sample utterances configured for the intent.
        confirmationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: If defined, the prompt that Amazon Lex uses to confirm the
            user's intent before fulfilling it.
        rejectionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: If the user answers "no" to the question defined in `confirmationPrompt`,
            Amazon Lex responds with this statement to acknowledge that the intent
            was canceled.
        followUpPrompt:
          allOf:
          - $ref: '#/components/schemas/FollowUpPrompt'
          description: If defined, Amazon Lex uses this prompt to solicit additional
            user activity after the intent is fulfilled.
        conclusionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: After the Lambda function specified in the `fulfillmentActivity`
            field fulfills the intent, Amazon Lex conveys this statement to the user.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/CodeHook'
          description: If defined, Amazon Lex invokes this Lambda function for each
            user input.
        fulfillmentActivity:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivity'
          description: Describes how the intent is fulfilled.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: A unique identifier for a built-in intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was updated.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version number assigned to the new version of the intent.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the intent version created.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information, if any, for connecting an Amazon
            Kendra index with the `AMAZON.KendraSearchIntent` intent.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          description: An array of `InputContext` objects that lists the contexts
            that must be active for Amazon Lex to choose the intent in a conversation
            with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          description: An array of `OutputContext` objects that lists the contexts
            that the intent activates when the intent is fulfilled.
    CreateSlotTypeVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type that you want to create a new version
            for. The name is case sensitive.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum for the `$LATEST` version of the slot type that you
            want to publish. If you specify a checksum and the `$LATEST` version of
            the slot type has a different checksum, Amazon Lex returns a `PreconditionFailedException`
            exception and doesn't publish the new version. If you don't specify a
            checksum, Amazon Lex publishes the `$LATEST` version.
      required:
      - name
    CreateSlotTypeVersionResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          description: A list of `EnumerationValue` objects that defines the values
            that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was updated. When you create a
            resource, the creation date and last update date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version assigned to the new slot type version.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the `$LATEST` version of the slot type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          description: The strategy that Amazon Lex uses to determine the value of
            the slot. For more information, see PutSlotType.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          description: The built-in slot type used a the parent of the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          description: Configuration information that extends the parent built-in
            slot type.
    CustomOrBuiltinSlotTypeName:
      type: string
      pattern: ^((AMAZON\.)_?|[A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    DeleteBotAliasRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the alias to delete. The name is case sensitive.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that the alias points to.
      required:
      - name
      - botName
    DeleteBotChannelAssociationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          description: The name of the association. The name is case sensitive.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex bot.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: An alias that points to the specific version of the Amazon
            Lex bot to which this association is being made.
      required:
      - name
      - botName
      - botAlias
    DeleteBotRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot. The name is case sensitive.
      required:
      - name
    DeleteBotVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the bot to delete. You cannot delete the `$LATEST`
            version of the bot. To delete the `$LATEST` version, use the DeleteBot
            operation.
      required:
      - name
      - version
    DeleteIntentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent. The name is case sensitive.
      required:
      - name
    DeleteIntentVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the intent to delete. You cannot delete the
            `$LATEST` version of the intent. To delete the `$LATEST` version, use
            the DeleteIntent operation.
      required:
      - name
      - version
    DeleteSlotTypeRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type. The name is case sensitive.
      required:
      - name
    DeleteSlotTypeVersionRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the slot type to delete. You cannot delete the
            `$LATEST` version of the slot type. To delete the `$LATEST` version, use
            the DeleteSlotType operation.
      required:
      - name
      - version
    DeleteUtterancesRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that stored the utterances.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          description: The unique identifier for the user that made the utterances.
            This is the user ID that was sent in the [PostContent](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html)
            or [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html)
            operation request that contained the utterance.
      required:
      - botName
      - userId
    Description:
      type: string
      minLength: 0
      maxLength: 200
    Destination:
      type: string
      enum:
      - CLOUDWATCH_LOGS
      - S3
    EnumerationValue:
      type: object
      properties:
        value:
          allOf:
          - $ref: '#/components/schemas/Value'
          description: The value of the slot type.
        synonyms:
          allOf:
          - $ref: '#/components/schemas/SynonymList'
          description: Additional values related to the slot type value.
      required:
      - value
      description: "Each slot type can have a set of values. Each enumeration value\
        \ represents a value the slot type can take.\n\nFor example, a pizza ordering\
        \ bot could have a slot type that specifies the type of crust that the pizza\
        \ should have. The slot type could include the values\n\n  * thick\n\n  *\
        \ thin\n\n  * stuffed"
    EnumerationValues:
      type: array
      items:
        $ref: '#/components/schemas/EnumerationValue'
    ExportStatus:
      type: string
      enum:
      - IN_PROGRESS
      - READY
      - FAILED
    ExportType:
      type: string
      enum:
      - ALEXA_SKILLS_KIT
      - LEX
    FollowUpPrompt:
      type: object
      properties:
        prompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: Prompts for information from the user.
        rejectionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: If the user answers "no" to the question defined in the `prompt`
            field, Amazon Lex responds with this statement to acknowledge that the
            intent was canceled.
      required:
      - prompt
      - rejectionStatement
      description: A prompt for additional activity after an intent is fulfilled.
        For example, after the `OrderPizza` intent is fulfilled, you might prompt
        the user to find out whether the user wants to order drinks.
    FulfillmentActivity:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivityType'
          description: How the intent should be fulfilled, either by running a Lambda
            function or by returning the slot data to the client application.
        codeHook:
          allOf:
          - $ref: '#/components/schemas/CodeHook'
          description: A description of the Lambda function that is run to fulfill
            the intent.
      required:
      - type
      description: "Describes how the intent is fulfilled after the user provides\
        \ all of the information required for the intent. You can provide a Lambda\
        \ function to process the intent, or you can return the intent information\
        \ to the client application. We recommend that you use a Lambda function so\
        \ that the relevant logic lives in the Cloud and limit the client-side code\
        \ primarily to presentation. If you need to update the logic, you only update\
        \ the Lambda function; you don't need to upgrade your client application.\n\
        \nConsider the following examples:\n\n  * In a pizza ordering application,\
        \ after the user provides all of the information for placing an order, you\
        \ use a Lambda function to place an order with a pizzeria. \n\n  * In a gaming\
        \ application, when a user says \"pick up a rock,\" this information must\
        \ go back to the client application so that it can perform the operation and\
        \ update the graphics. In this case, you want Amazon Lex to return the intent\
        \ data to the client."
    FulfillmentActivityType:
      type: string
      enum:
      - ReturnIntent
      - CodeHook
    GetBotAliasRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the bot alias. The name is case sensitive.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
      required:
      - name
      - botName
    GetBotAliasResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the bot alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot that the alias points to.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that the alias points to.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was updated. When you create a
            resource, the creation date and the last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the bot alias.
        conversationLogs:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsResponse'
          description: The settings that determine how Amazon Lex uses conversation
            logs for the alias.
    GetBotAliasesRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of aliases. If
            the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of aliases, specify the
            pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of aliases to return in the response. The
            default is 50. .
        nameContains:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: Substring to match in bot alias names. An alias will be returned
            if any part of its name matches the substring. For example, "xyz" matches
            both "xyzabc" and "abcxyz."
      required:
      - botName
    GetBotAliasesResponse:
      type: object
      properties:
        BotAliases:
          allOf:
          - $ref: '#/components/schemas/BotAliasMetadataList'
          description: An array of `BotAliasMetadata` objects, each describing a bot
            alias.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching next page of aliases. If the
            response to this call is truncated, Amazon Lex returns a pagination token
            in the response. To fetch the next page of aliases, specify the pagination
            token in the next request.
    GetBotChannelAssociationRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          description: The name of the association between the bot and the channel.
            The name is case sensitive.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex bot.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: An alias pointing to the specific version of the Amazon Lex
            bot to which this association is being made.
      required:
      - name
      - botName
      - botAlias
    GetBotChannelAssociationResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          description: The name of the association between the bot and the channel.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the association between the bot and the channel.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: An alias pointing to the specific version of the Amazon Lex
            bot to which this association is being made.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex bot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the association between the bot and the channel
            was created.
        type:
          allOf:
          - $ref: '#/components/schemas/ChannelType'
          description: The type of the messaging platform.
        botConfiguration:
          allOf:
          - $ref: '#/components/schemas/ChannelConfigurationMap'
          description: Provides information that the messaging platform needs to communicate
            with the Amazon Lex bot.
        status:
          allOf:
          - $ref: '#/components/schemas/ChannelStatus'
          description: "The status of the bot channel.\n\n  * `CREATED` \\- The channel\
            \ has been created and is ready for use.\n\n  * `IN_PROGRESS` \\- Channel\
            \ creation is in progress.\n\n  * `FAILED` \\- There was an error creating\
            \ the channel. For information about the reason for the failure, see the\
            \ `failureReason` field."
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex provides the reason that
            it failed to create the association.
    GetBotChannelAssociationsRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex bot in the association.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/AliasNameOrListAll'
          description: An alias pointing to the specific version of the Amazon Lex
            bot to which this association is being made.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of associations.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of associations, specify
            the pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of associations to return in the response.
            The default is 50.
        nameContains:
          allOf:
          - $ref: '#/components/schemas/BotChannelName'
          description: Substring to match in channel association names. An association
            will be returned if any part of its name matches the substring. For example,
            "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations,
            use a hyphen ("-") as the `nameContains` parameter.
      required:
      - botName
      - botAlias
    GetBotChannelAssociationsResponse:
      type: object
      properties:
        botChannelAssociations:
          allOf:
          - $ref: '#/components/schemas/BotChannelAssociationList'
          description: An array of objects, one for each association, that provides
            information about the Amazon Lex bot and its association with the channel.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of associations.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of associations, specify
            the pagination token in the next request.
    GetBotRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot. The name is case sensitive.
        versionOrAlias:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The version or alias of the bot.
      required:
      - name
      - versionOrAlias
    GetBotResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          description: An array of `intent` objects. For more information, see PutBot.
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the bot uses accuracy improvements. `true`
            indicates that the bot is using the improvements, otherwise, `false`.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The score that determines where Amazon Lex inserts the `AMAZON.FallbackIntent`,
            `AMAZON.KendraSearchIntent`, or both when returning alternative intents
            in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html)
            or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html)
            response. `AMAZON.FallbackIntent` is inserted if the confidence score
            for all intents is below this value. `AMAZON.KendraSearchIntent` is only
            inserted if it is configured for the bot.
        clarificationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: The message Amazon Lex uses when it doesn't understand the
            user's request. For more information, see PutBot.
        abortStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: The message that Amazon Lex returns when the user elects to
            end the conversation without completing it. For more information, see
            PutBot.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: 'The status of the bot.


            When the status is `BUILDING` Amazon Lex is building the bot for testing
            and use.


            If the status of the bot is `READY_BASIC_TESTING`, you can test the bot
            using the exact utterances specified in the bot''s intents. When the bot
            is ready for full testing or to run, the status is `READY`.


            If there was a problem with building the bot, the status is `FAILED` and
            the `failureReason` field explains why the bot did not build.


            If the bot was saved but not built, the status is `NOT_BUILT`.'
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex explains why it failed
            to build the bot.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was updated. When you create a resource,
            the creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The maximum time in seconds that Amazon Lex retains the data
            gathered in a conversation. For more information, see PutBot.
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction
            with the user. For more information, see PutBot.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the bot used to identify a specific revision of
            the bot's `$LATEST` version.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot. For a new bot, the version is always
            `$LATEST`.
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: The target locale for the bot.
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'For each Amazon Lex bot created with the Amazon Lex Model
            Building Service, you must specify whether your use of Amazon Lex is related
            to a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to the Children''s
            Online Privacy Protection Act (COPPA) by specifying `true` or `false`
            in the `childDirected` field. By specifying `true` in the `childDirected`
            field, you confirm that your use of Amazon Lex **is** related to a website,
            program, or other application that is directed or targeted, in whole or
            in part, to children under age 13 and subject to COPPA. By specifying
            `false` in the `childDirected` field, you confirm that your use of Amazon
            Lex **is not** related to a website, program, or other application that
            is directed or targeted, in whole or in part, to children under age 13
            and subject to COPPA. You may not specify a default value for the `childDirected`
            field that does not accurately reflect whether your use of Amazon Lex
            is related to a website, program, or other application that is directed
            or targeted, in whole or in part, to children under age 13 and subject
            to COPPA.


            If your use of Amazon Lex relates to a website, program, or other application
            that is directed in whole or in part, to children under age 13, you must
            obtain any required verifiable parental consent under COPPA. For information
            regarding the use of Amazon Lex in connection with websites, programs,
            or other applications that are directed or targeted, in whole or in part,
            to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)'
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether user utterances should be sent to Amazon
            Comprehend for sentiment analysis.
    GetBotVersionsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot for which versions should be returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of bot versions.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of versions, specify the
            pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bot versions to return in the response.
            The default is 10.
      required:
      - name
    GetBotVersionsResponse:
      type: object
      properties:
        bots:
          allOf:
          - $ref: '#/components/schemas/BotMetadataList'
          description: An array of `BotMetadata` objects, one for each numbered version
            of the bot plus one for the `$LATEST` version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of bot versions.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of versions, specify the
            pagination token in the next request.
    GetBotsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of bots. If the
            response to this call is truncated, Amazon Lex returns a pagination token
            in the response. To fetch the next page of bots, specify the pagination
            token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of bots to return in the response that the
            request will return. The default is 10.
        nameContains:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: Substring to match in bot names. A bot will be returned if
            any part of its name matches the substring. For example, "xyz" matches
            both "xyzabc" and "abcxyz."
    GetBotsResponse:
      type: object
      properties:
        bots:
          allOf:
          - $ref: '#/components/schemas/BotMetadataList'
          description: An array of `botMetadata` objects, with one entry for each
            bot.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response is truncated, it includes a pagination token
            that you can specify in your next request to fetch the next page of bots.
    GetBuiltinIntentRequest:
      type: object
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: The unique identifier for a built-in intent. To find the signature
            for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
            in the _Alexa Skills Kit_.
      required:
      - signature
    GetBuiltinIntentResponse:
      type: object
      properties:
        signature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: The unique identifier for a built-in intent.
        supportedLocales:
          allOf:
          - $ref: '#/components/schemas/LocaleList'
          description: A list of locales that the intent supports.
        slots:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSlotList'
          description: An array of `BuiltinIntentSlot` objects, one entry for each
            slot type in the intent.
    GetBuiltinIntentsRequest:
      type: object
      properties:
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: A list of locales that the intent supports.
        signatureContains:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Substring to match in built-in intent signatures. An intent
            will be returned if any part of its signature matches the substring. For
            example, "xyz" matches both "xyzabc" and "abcxyz." To find the signature
            for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
            in the _Alexa Skills Kit_.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of intents. If
            this API call is truncated, Amazon Lex returns a pagination token in the
            response. To fetch the next page of intents, use the pagination token
            in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of intents to return in the response. The
            default is 10.
    GetBuiltinIntentsResponse:
      type: object
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentMetadataList'
          description: An array of `builtinIntentMetadata` objects, one for each intent
            in the response.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of intents. If
            the response to this API call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of intents, specify the
            pagination token in the next request.
    GetBuiltinSlotTypesRequest:
      type: object
      properties:
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: A list of locales that the slot type supports.
        signatureContains:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Substring to match in built-in slot type signatures. A slot
            type will be returned if any part of its signature matches the substring.
            For example, "xyz" matches both "xyzabc" and "abcxyz."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of slot types.
            If the response to this API call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of slot types, specify the
            pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of slot types to return in the response.
            The default is 10.
    GetBuiltinSlotTypesResponse:
      type: object
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/BuiltinSlotTypeMetadataList'
          description: An array of `BuiltInSlotTypeMetadata` objects, one entry for
            each slot type returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response is truncated, the response includes a pagination
            token that you can use in your next request to fetch the next page of
            slot types.
    GetExportRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot to export.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the bot to export.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource to export.
        exportType:
          allOf:
          - $ref: '#/components/schemas/ExportType'
          description: The format of the exported data.
      required:
      - name
      - version
      - resourceType
      - exportType
    GetExportResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the bot being exported.
        version:
          allOf:
          - $ref: '#/components/schemas/NumericalVersion'
          description: The version of the bot being exported.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of the exported resource.
        exportType:
          allOf:
          - $ref: '#/components/schemas/ExportType'
          description: The format of the exported data.
        exportStatus:
          allOf:
          - $ref: '#/components/schemas/ExportStatus'
          description: "The status of the export.\n\n  * `IN_PROGRESS` \\- The export\
            \ is in progress.\n\n  * `READY` \\- The export is complete.\n\n  * `FAILED`\
            \ \\- The export could not be completed."
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex provides the reason that
            it failed to export the resource.
        url:
          allOf:
          - $ref: '#/components/schemas/String'
          description: An S3 pre-signed URL that provides the location of the exported
            resource. The exported resource is a ZIP archive that contains the exported
            resource in JSON format. The structure of the archive may change. Your
            code should not rely on the archive structure.
    GetImportRequest:
      type: object
      properties:
        importId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of the import job information to return.
      required:
      - importId
    GetImportResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name given to the import job.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource imported.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The action taken when there was a conflict between an existing
            resource and a resource in the import file.
        importId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the specific import job.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The status of the import job. If the status is `FAILED`, you
            can get the reason for the failure from the `failureReason` field.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: A string that describes why an import job failed to complete.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp for the date and time that the import job was created.
    GetIntentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent. The name is case sensitive.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the intent.
      required:
      - name
      - version
    GetIntentResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          description: An array of intent slots configured for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          description: An array of sample utterances configured for the intent.
        confirmationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: If defined in the bot, Amazon Lex uses prompt to confirm the
            intent before fulfilling the user's request. For more information, see
            PutIntent.
        rejectionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: If the user answers "no" to the question defined in `confirmationPrompt`,
            Amazon Lex responds with this statement to acknowledge that the intent
            was canceled.
        followUpPrompt:
          allOf:
          - $ref: '#/components/schemas/FollowUpPrompt'
          description: If defined in the bot, Amazon Lex uses this prompt to solicit
            additional user activity after the intent is fulfilled. For more information,
            see PutIntent.
        conclusionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: After the Lambda function specified in the `fulfillmentActivity`
            element fulfills the intent, Amazon Lex conveys this statement to the
            user.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/CodeHook'
          description: If defined in the bot, Amazon Amazon Lex invokes this Lambda
            function for each user input. For more information, see PutIntent.
        fulfillmentActivity:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivity'
          description: Describes how the intent is fulfilled. For more information,
            see PutIntent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: A unique identifier for a built-in intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was updated. When you create a resource,
            the creation date and the last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the intent.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the intent.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information, if any, to connect to an Amazon
            Kendra index with the `AMAZON.KendraSearchIntent` intent.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          description: An array of `InputContext` objects that lists the contexts
            that must be active for Amazon Lex to choose the intent in a conversation
            with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          description: An array of `OutputContext` objects that lists the contexts
            that the intent activates when the intent is fulfilled.
    GetIntentVersionsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent for which versions should be returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of intent versions.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of versions, specify the
            pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of intent versions to return in the response.
            The default is 10.
      required:
      - name
    GetIntentVersionsResponse:
      type: object
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentMetadataList'
          description: An array of `IntentMetadata` objects, one for each numbered
            version of the intent plus one for the `$LATEST` version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of intent versions.
            If the response to this call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of versions, specify the
            pagination token in the next request.
    GetIntentsRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of intents. If
            the response to this API call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of intents, specify the
            pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of intents to return in the response. The
            default is 10.
        nameContains:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: Substring to match in intent names. An intent will be returned
            if any part of its name matches the substring. For example, "xyz" matches
            both "xyzabc" and "abcxyz."
    GetIntentsResponse:
      type: object
      properties:
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentMetadataList'
          description: An array of `Intent` objects. For more information, see PutBot.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response is truncated, the response includes a pagination
            token that you can specify in your next request to fetch the next page
            of intents.
    GetMigrationRequest:
      type: object
      properties:
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          description: The unique identifier of the migration to view. The `migrationID`
            is returned by the operation.
      required:
      - migrationId
    GetMigrationResponse:
      type: object
      properties:
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          description: The unique identifier of the migration. This is the same as
            the identifier used when calling the `GetMigration` operation.
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex V1 bot migrated to Amazon Lex V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the Amazon Lex V1 bot migrated to Amazon Lex
            V2.
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: The locale of the Amazon Lex V1 bot migrated to Amazon Lex
            V2.
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          description: The unique identifier of the Amazon Lex V2 bot that the Amazon
            Lex V1 is being migrated to.
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
            bot.
        migrationStatus:
          allOf:
          - $ref: '#/components/schemas/MigrationStatus'
          description: Indicates the status of the migration. When the status is `COMPLETE`
            the migration is finished and the bot is available in Amazon Lex V2. There
            may be alerts and warnings that need to be resolved to complete the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          description: "The strategy used to conduct the migration.\n\n  * `CREATE_NEW`\
            \ \\- Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot\
            \ to the new bot.\n\n  * `UPDATE_EXISTING` \\- Overwrites the existing\
            \ Amazon Lex V2 bot metadata and the locale being migrated. It doesn't\
            \ change any other locales in the Amazon Lex V2 bot. If the locale doesn't\
            \ exist, a new locale is created in the Amazon Lex V2 bot."
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the migration started.
        alerts:
          allOf:
          - $ref: '#/components/schemas/MigrationAlerts'
          description: 'A list of alerts and warnings that indicate issues with the
            migration for the Amazon Lex V1 bot to Amazon Lex V2. You receive a warning
            when an Amazon Lex V1 feature has a different implementation if Amazon
            Lex V2.


            For more information, see [Migrating a bot](https://docs.aws.amazon.com/lexv2/latest/dg/migrate.html)
            in the _Amazon Lex V2 developer guide_.'
    GetMigrationsRequest:
      type: object
      properties:
        sortByAttribute:
          allOf:
          - $ref: '#/components/schemas/MigrationSortAttribute'
          description: The field to sort the list of migrations by. You can sort by
            the Amazon Lex V1 bot name or the date and time that the migration was
            started.
        sortByOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The order so sort the list.
        v1BotNameContains:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: Filters the list to contain only bots whose name contains the
            specified string. The string is matched anywhere in bot name.
        migrationStatusEquals:
          allOf:
          - $ref: '#/components/schemas/MigrationStatus'
          description: Filters the list to contain only migrations in the specified
            state.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of migrations to return in the response.
            The default is 10.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of migrations.
            If the response to this operation is truncated, Amazon Lex returns a pagination
            token in the response. To fetch the next page of migrations, specify the
            pagination token in the request.
    GetMigrationsResponse:
      type: object
      properties:
        migrationSummaries:
          allOf:
          - $ref: '#/components/schemas/MigrationSummaryList'
          description: An array of summaries for migrations from Amazon Lex V1 to
            Amazon Lex V2. To see details of the migration, use the `migrationId`
            from the summary in a call to the operation.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response is truncated, it includes a pagination token
            that you can specify in your next request to fetch the next page of migrations.
    GetSlotTypeRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type. The name is case sensitive.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the slot type.
      required:
      - name
      - version
    GetSlotTypeResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          description: A list of `EnumerationValue` objects that defines the values
            that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was updated. When you create a
            resource, the creation date and last update date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the slot type.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the `$LATEST` version of the slot type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          description: The strategy that Amazon Lex uses to determine the value of
            the slot. For more information, see PutSlotType.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          description: The built-in slot type used as a parent for the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          description: Configuration information that extends the parent built-in
            slot type.
    GetSlotTypeVersionsRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type for which versions should be returned.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of slot type
            versions. If the response to this call is truncated, Amazon Lex returns
            a pagination token in the response. To fetch the next page of versions,
            specify the pagination token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of slot type versions to return in the response.
            The default is 10.
      required:
      - name
    GetSlotTypeVersionsResponse:
      type: object
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/SlotTypeMetadataList'
          description: An array of `SlotTypeMetadata` objects, one for each numbered
            version of the slot type plus one for the `$LATEST` version.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token for fetching the next page of slot type
            versions. If the response to this call is truncated, Amazon Lex returns
            a pagination token in the response. To fetch the next page of versions,
            specify the pagination token in the next request.
    GetSlotTypesRequest:
      type: object
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: A pagination token that fetches the next page of slot types.
            If the response to this API call is truncated, Amazon Lex returns a pagination
            token in the response. To fetch next page of slot types, specify the pagination
            token in the next request.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of slot types to return in the response.
            The default is 10.
        nameContains:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: Substring to match in slot type names. A slot type will be
            returned if any part of its name matches the substring. For example, "xyz"
            matches both "xyzabc" and "abcxyz."
    GetSlotTypesResponse:
      type: object
      properties:
        slotTypes:
          allOf:
          - $ref: '#/components/schemas/SlotTypeMetadataList'
          description: An array of objects, one for each slot type, that provides
            information such as the name of the slot type, the version, and a description.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If the response is truncated, it includes a pagination token
            that you can specify in your next request to fetch the next page of slot
            types.
    GetUtterancesViewRequest:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot for which utterance information should
            be returned.
        botVersions:
          allOf:
          - $ref: '#/components/schemas/BotVersions'
          description: An array of bot versions for which utterance information should
            be returned. The limit is 5 versions per request.
        statusType:
          allOf:
          - $ref: '#/components/schemas/StatusType'
          description: To return utterances that were recognized and handled, use
            `Detected`. To return utterances that were not recognized, use `Missed`.
      required:
      - botName
      - botVersions
      - statusType
    GetUtterancesViewResponse:
      type: object
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot for which utterance information was returned.
        utterances:
          allOf:
          - $ref: '#/components/schemas/ListsOfUtterances'
          description: An array of UtteranceList objects, each containing a list of
            UtteranceData objects describing the utterances that were processed by
            your bot. The response contains a maximum of 100 `UtteranceData` objects
            for each version. Amazon Lex returns the most frequent utterances received
            by the bot in the last 15 days.
    GroupNumber:
      type: integer
      minimum: 1
      maximum: 5
    IamRoleArn:
      type: string
      pattern: ^arn:[\w\-]+:iam::[\d]{12}:role/.+$
      minLength: 20
      maxLength: 2048
    ImportStatus:
      type: string
      enum:
      - IN_PROGRESS
      - COMPLETE
      - FAILED
    InputContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/InputContextName'
          description: The name of the context.
      required:
      - name
      description: The name of a context that must be active for an intent to be selected
        by Amazon Lex.
    InputContextList:
      type: array
      items:
        $ref: '#/components/schemas/InputContext'
    InputContextName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    Intent:
      type: object
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        intentVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the intent.
      required:
      - intentName
      - intentVersion
      description: Identifies the specific version of an intent.
    IntentList:
      type: array
      items:
        $ref: '#/components/schemas/Intent'
    IntentMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was updated. When you create an intent,
            the creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the intent.
      description: Provides information about an intent.
    IntentMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/IntentMetadata'
    IntentName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    IntentUtteranceList:
      type: array
      items:
        $ref: '#/components/schemas/Utterance'
    InternalFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: An internal Amazon Lex error occurred. Try your request again.
    KendraConfiguration:
      type: object
      properties:
        kendraIndex:
          allOf:
          - $ref: '#/components/schemas/KendraIndexArn'
          description: The Amazon Resource Name (ARN) of the Amazon Kendra index that
            you want the AMAZON.KendraSearchIntent intent to search. The index must
            be in the same account and Region as the Amazon Lex bot. If the Amazon
            Kendra index does not exist, you get an exception when you call the `PutIntent`
            operation.
        queryFilterString:
          allOf:
          - $ref: '#/components/schemas/QueryFilterString'
          description: 'A query filter that Amazon Lex sends to Amazon Kendra to filter
            the response from the query. The filter is in the format defined by Amazon
            Kendra. For more information, see [Filtering queries](http://docs.aws.amazon.com/kendra/latest/dg/filtering.html).


            You can override this filter string with a new filter string at runtime.'
        role:
          allOf:
          - $ref: '#/components/schemas/roleArn'
          description: The Amazon Resource Name (ARN) of an IAM role that has permission
            to search the Amazon Kendra index. The role must be in the same account
            and Region as the Amazon Lex bot. If the role does not exist, you get
            an exception when you call the `PutIntent` operation.
      required:
      - kendraIndex
      - role
      description: Provides configuration information for the AMAZON.KendraSearchIntent
        intent. When you use this intent, Amazon Lex searches the specified Amazon
        Kendra index and returns documents from the index that match the user's utterance.
        For more information, see [ AMAZON.KendraSearchIntent](http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html).
    KendraIndexArn:
      type: string
      pattern: ^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\/[a-zA-Z0-9][a-zA-Z0-9_-]*$
      minLength: 20
      maxLength: 2048
    KmsKeyArn:
      type: string
      pattern: ^arn:[\w\-]+:kms:[\w\-]+:[\d]{12}:(?:key\/[\w\-]+|alias\/[a-zA-Z0-9:\/_\-]{1,256})$
      minLength: 20
      maxLength: 2048
    LambdaARN:
      type: string
      pattern: ^arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+(-[a-z]+)*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?$
      minLength: 20
      maxLength: 2048
    LimitExceededException:
      type: object
      properties:
        retryAfterSeconds:
          $ref: '#/components/schemas/String'
        message:
          $ref: '#/components/schemas/String'
      description: The request exceeded a limit. Try your request again.
    ListOfUtterance:
      type: array
      items:
        $ref: '#/components/schemas/UtteranceData'
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the resource to get a list
            of tags for.
      required:
      - resourceArn
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: The tags associated with a resource.
    ListsOfUtterances:
      type: array
      items:
        $ref: '#/components/schemas/UtteranceList'
    Locale:
      type: string
      enum:
      - de-DE
      - en-AU
      - en-GB
      - en-IN
      - en-US
      - es-419
      - es-ES
      - es-US
      - fr-FR
      - fr-CA
      - it-IT
      - ja-JP
      - ko-KR
    LocaleList:
      type: array
      items:
        $ref: '#/components/schemas/Locale'
    LogSettingsRequest:
      type: object
      properties:
        logType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          description: The type of logging to enable. Text logs are delivered to a
            CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: Where the logs will be delivered. Text logs are delivered to
            a CloudWatch Logs log group. Audio logs are delivered to an S3 bucket.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the AWS KMS customer managed
            key for encrypting audio logs delivered to an S3 bucket. The key does
            not apply to CloudWatch Logs and is optional for S3 buckets.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group
            or S3 bucket where the logs should be delivered.
      required:
      - logType
      - destination
      - resourceArn
      description: Settings used to configure delivery mode and destination for conversation
        logs.
    LogSettingsRequestList:
      type: array
      items:
        $ref: '#/components/schemas/LogSettingsRequest'
    LogSettingsResponse:
      type: object
      properties:
        logType:
          allOf:
          - $ref: '#/components/schemas/LogType'
          description: The type of logging that is enabled.
        destination:
          allOf:
          - $ref: '#/components/schemas/Destination'
          description: The destination where logs are delivered.
        kmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          description: The Amazon Resource Name (ARN) of the key used to encrypt audio
            logs in an S3 bucket.
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/ResourceArn'
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group
            or S3 bucket where the logs are delivered.
        resourcePrefix:
          allOf:
          - $ref: '#/components/schemas/ResourcePrefix'
          description: The resource prefix is the first part of the S3 object key
            within the S3 bucket that you specified to contain audio logs. For CloudWatch
            Logs it is the prefix of the log stream name within the log group that
            you specified.
      description: The settings for conversation logs.
    LogSettingsResponseList:
      type: array
      items:
        $ref: '#/components/schemas/LogSettingsResponse'
    LogType:
      type: string
      enum:
      - AUDIO
      - TEXT
    MaxResults:
      type: integer
      minimum: 1
      maximum: 50
    MergeStrategy:
      type: string
      enum:
      - OVERWRITE_LATEST
      - FAIL_ON_CONFLICT
    Message:
      type: object
      properties:
        contentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          description: The content type of the message string.
        content:
          allOf:
          - $ref: '#/components/schemas/ContentString'
          description: The text of the message.
        groupNumber:
          allOf:
          - $ref: '#/components/schemas/GroupNumber'
          description: Identifies the message group that the message belongs to. When
            a group is assigned to a message, Amazon Lex returns one message from
            each group in the response.
      required:
      - contentType
      - content
      description: The message object that provides the message text and its type.
    MessageList:
      type: array
      items:
        $ref: '#/components/schemas/Message'
    MessageVersion:
      type: string
      minLength: 1
      maxLength: 5
    MigrationAlert:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertType'
          description: "The type of alert. There are two kinds of alerts:\n\n  * `ERROR`\
            \ \\- There was an issue with the migration that can't be resolved. The\
            \ migration stops.\n\n  * `WARN` \\- There was an issue with the migration\
            \ that requires manual changes to the new Amazon Lex V2 bot. The migration\
            \ continues."
        message:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertMessage'
          description: A message that describes why the alert was issued.
        details:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertDetails'
          description: Additional details about the alert.
        referenceURLs:
          allOf:
          - $ref: '#/components/schemas/MigrationAlertReferenceURLs'
          description: A link to the Amazon Lex documentation that describes how to
            resolve the alert.
      description: Provides information about alerts and warnings that Amazon Lex
        sends during a migration. The alerts include information about how to resolve
        the issue.
    MigrationAlertDetail:
      type: string
    MigrationAlertDetails:
      type: array
      items:
        $ref: '#/components/schemas/MigrationAlertDetail'
    MigrationAlertMessage:
      type: string
    MigrationAlertReferenceURL:
      type: string
    MigrationAlertReferenceURLs:
      type: array
      items:
        $ref: '#/components/schemas/MigrationAlertReferenceURL'
    MigrationAlertType:
      type: string
      enum:
      - ERROR
      - WARN
    MigrationAlerts:
      type: array
      items:
        $ref: '#/components/schemas/MigrationAlert'
    MigrationId:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      minLength: 10
      maxLength: 10
    MigrationSortAttribute:
      type: string
      enum:
      - V1_BOT_NAME
      - MIGRATION_DATE_TIME
    MigrationStatus:
      type: string
      enum:
      - IN_PROGRESS
      - COMPLETED
      - FAILED
    MigrationStrategy:
      type: string
      enum:
      - CREATE_NEW
      - UPDATE_EXISTING
    MigrationSummary:
      type: object
      properties:
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          description: The unique identifier that Amazon Lex assigned to the migration.
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex V1 bot that is the source of the
            migration.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the Amazon Lex V1 bot that is the source of
            the migration.
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: The locale of the Amazon Lex V1 bot that is the source of the
            migration.
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          description: The unique identifier of the Amazon Lex V2 that is the destination
            of the migration.
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
            bot.
        migrationStatus:
          allOf:
          - $ref: '#/components/schemas/MigrationStatus'
          description: The status of the operation. When the status is `COMPLETE`
            the bot is available in Amazon Lex V2. There may be alerts and warnings
            that need to be resolved to complete the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          description: The strategy used to conduct the migration.
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the migration started.
      description: Provides information about migrating a bot from Amazon Lex V1 to
        Amazon Lex V2.
    MigrationSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/MigrationSummary'
    Name:
      type: string
      pattern: ^[a-zA-Z_]+$
      minLength: 1
      maxLength: 100
    NextToken:
      type: string
    NotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The resource specified in the request was not found. Check the
        resource and try again.
    NumericalVersion:
      type: string
      pattern: ^[0-9]+$
      minLength: 1
      maxLength: 64
    ObfuscationSetting:
      type: string
      enum:
      - NONE
      - DEFAULT_OBFUSCATION
    OutputContext:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/OutputContextName'
          description: The name of the context.
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ContextTimeToLiveInSeconds'
          description: The number of seconds that the context should be active after
            it is first sent in a `PostContent` or `PostText` response. You can set
            the value between 5 and 86,400 seconds (24 hours).
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ContextTurnsToLive'
          description: The number of conversation turns that the context should be
            active. A conversation turn is one `PostContent` or `PostText` request
            and the corresponding response from Amazon Lex.
      required:
      - name
      - timeToLiveInSeconds
      - turnsToLive
      description: The specification of an output context that is set when an intent
        is fulfilled.
    OutputContextList:
      type: array
      items:
        $ref: '#/components/schemas/OutputContext'
    OutputContextName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    PreconditionFailedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The checksum of the resource that you are trying to change does
        not match the checksum in the request. Check the resource's checksum and try
        again.
    Priority:
      type: integer
      minimum: 0
      maximum: 100
    ProcessBehavior:
      type: string
      enum:
      - SAVE
      - BUILD
    Prompt:
      type: object
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          description: An array of objects, each of which provides a message string
            and its type. You can specify the message string in plain text or in Speech
            Synthesis Markup Language (SSML).
        maxAttempts:
          allOf:
          - $ref: '#/components/schemas/PromptMaxAttempts'
          description: The number of times to prompt the user for information.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          description: A response card. Amazon Lex uses this prompt at runtime, in
            the `PostText` API response. It substitutes session attributes and slot
            values for placeholders in the response card. For more information, see
            ex-resp-card.
      required:
      - messages
      - maxAttempts
      description: Obtains information from the user. To define a prompt, provide
        one or more messages and specify the number of attempts to get information
        from the user. If you provide more than one message, Amazon Lex chooses one
        of the messages to use to prompt the user. For more information, see how-it-works.
    PromptMaxAttempts:
      type: integer
      minimum: 1
      maximum: 5
    PutBotAliasRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the alias. The name is _not_ case sensitive.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Identifies a specific revision of the `$LATEST` version.


            When you create a new bot alias, leave the `checksum` field blank. If
            you specify a checksum you get a `BadRequestException` exception.


            When you want to update a bot alias, set the `checksum` field to the checksum
            of the most recent revision of the `$LATEST` version. If you don''t specify
            the ` checksum` field, or if the checksum does not match the `$LATEST`
            version, you get a `PreconditionFailedException` exception.'
        conversationLogs:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsRequest'
          description: Settings for conversation logs for the alias.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags to add to the bot alias. You can only add tags
            when you create an alias, you can't use the `PutBotAlias` operation to
            update the tags on a bot alias. To update tags, use the `TagResource`
            operation.
      required:
      - name
      - botVersion
      - botName
    PutBotAliasResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/AliasName'
          description: The name of the alias.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the alias.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot that the alias points to.
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot that the alias points to.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was updated. When you create a
            resource, the creation date and the last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot alias was created.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The checksum for the current version of the alias.
        conversationLogs:
          allOf:
          - $ref: '#/components/schemas/ConversationLogsResponse'
          description: The settings that determine how Amazon Lex uses conversation
            logs for the alias.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags associated with a bot.
    PutBotRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot. The name is _not_ case sensitive.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          description: An array of `Intent` objects. Each intent represents a command
            that a user can express. For example, a pizza ordering bot might support
            an OrderPizza intent. For more information, see how-it-works.
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: "Set to `true` to enable access to natural language understanding\
            \ improvements.\n\nWhen you set the `enableModelImprovements` parameter\
            \ to `true` you can use the `nluIntentConfidenceThreshold` parameter to\
            \ configure confidence scores. For more information, see [Confidence Scores](https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html).\n\
            \nYou can only set the `enableModelImprovements` parameter in certain\
            \ Regions. If you set the parameter to `true`, your bot has access to\
            \ accuracy improvements.\n\nThe Regions where you can set the `enableModelImprovements`\
            \ parameter to `true` are:\n\n  * US East (N. Virginia) (us-east-1)\n\n\
            \  * US West (Oregon) (us-west-2)\n\n  * Asia Pacific (Sydney) (ap-southeast-2)\n\
            \n  * EU (Ireland) (eu-west-1)\n\nIn other Regions, the `enableModelImprovements`\
            \ parameter is set to `true` by default. In these Regions setting the\
            \ parameter to `false` throws a `ValidationException` exception."
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: "Determines the threshold where Amazon Lex will insert the\
            \ `AMAZON.FallbackIntent`, `AMAZON.KendraSearchIntent`, or both when returning\
            \ alternative intents in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html)\
            \ or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html)\
            \ response. `AMAZON.FallbackIntent` and `AMAZON.KendraSearchIntent` are\
            \ only inserted if they are configured for the bot.\n\nYou must set the\
            \ `enableModelImprovements` parameter to `true` to use confidence scores\
            \ in the following regions.\n\n  * US East (N. Virginia) (us-east-1)\n\
            \n  * US West (Oregon) (us-west-2)\n\n  * Asia Pacific (Sydney) (ap-southeast-2)\n\
            \n  * EU (Ireland) (eu-west-1)\n\nIn other Regions, the `enableModelImprovements`\
            \ parameter is set to `true` by default.\n\nFor example, suppose a bot\
            \ is configured with the confidence threshold of 0.80 and the `AMAZON.FallbackIntent`.\
            \ Amazon Lex returns three alternative intents with the following confidence\
            \ scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response\
            \ from the `PostText` operation would be:\n\n  * AMAZON.FallbackIntent\n\
            \n  * IntentA\n\n  * IntentB\n\n  * IntentC"
        clarificationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: "When Amazon Lex doesn't understand the user's intent, it uses\
            \ this message to get clarification. To specify how many times Amazon\
            \ Lex should repeat the clarification prompt, use the `maxAttempts` field.\
            \ If Amazon Lex still doesn't understand, it sends the message in the\
            \ `abortStatement` field.\n\nWhen you create a clarification prompt, make\
            \ sure that it suggests the correct response from the user. for example,\
            \ for a bot that orders pizza and drinks, you might create this clarification\
            \ prompt: \"What would you like to do? You can say 'Order a pizza' or\
            \ 'Order a drink.'\"\n\nIf you have defined a fallback intent, it will\
            \ be invoked if the clarification prompt is repeated the number of times\
            \ defined in the `maxAttempts` field. For more information, see [ AMAZON.FallbackIntent](https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html).\n\
            \nIf you don't define a clarification prompt, at runtime Amazon Lex will\
            \ return a 400 Bad Request exception in three cases:\n\n  * Follow-up\
            \ prompt - When the user responds to a follow-up prompt but does not provide\
            \ an intent. For example, in response to a follow-up prompt that says\
            \ \"Would you like anything else today?\" the user says \"Yes.\" Amazon\
            \ Lex will return a 400 Bad Request exception because it does not have\
            \ a clarification prompt to send to the user to get an intent.\n\n  *\
            \ Lambda function - When using a Lambda function, you return an `ElicitIntent`\
            \ dialog type. Since Amazon Lex does not have a clarification prompt to\
            \ get an intent from the user, it returns a 400 Bad Request exception.\n\
            \n  * PutSession operation - When using the `PutSession` operation, you\
            \ send an `ElicitIntent` dialog type. Since Amazon Lex does not have a\
            \ clarification prompt to get an intent from the user, it returns a 400\
            \ Bad Request exception."
        abortStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: 'When Amazon Lex can''t understand the user''s input in context,
            it tries to elicit the information a few times. After that, Amazon Lex
            sends the message defined in `abortStatement` to the user, and then cancels
            the conversation. To set the number of retries, use the `valueElicitationPrompt`
            field for the slot type.


            For example, in a pizza ordering bot, Amazon Lex might ask a user "What
            type of crust would you like?" If the user''s response is not one of the
            expected responses (for example, "thin crust, "deep dish," etc.), Amazon
            Lex tries to elicit a correct response a few more times.


            For example, in a pizza ordering application, `OrderPizza` might be one
            of the intents. This intent might require the `CrustType` slot. You specify
            the `valueElicitationPrompt` field when you create the `CrustType` slot.


            If you have defined a fallback intent the cancel statement will not be
            sent to the user, the fallback intent is used instead. For more information,
            see [ AMAZON.FallbackIntent](https://docs.aws.amazon.com/lex/latest/dg/built-in-intent-fallback.html).'
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: 'The maximum time in seconds that Amazon Lex retains the data
            gathered in a conversation.


            A user interaction session remains active for the amount of time specified.
            If no conversation occurs during this time, the session expires and Amazon
            Lex deletes any data provided before the timeout.


            For example, suppose that a user chooses the OrderPizza intent, but gets
            sidetracked halfway through placing an order. If the user doesn''t complete
            the order within the specified time, Amazon Lex discards the slot information
            that it gathered, and the user must start over.


            If you don''t include the `idleSessionTTLInSeconds` element in a `PutBot`
            operation request, Amazon Lex uses the default value. This is also true
            if the request replaces an existing bot.


            The default is 300 seconds (5 minutes).'
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Polly voice ID that you want Amazon Lex to use for
            voice interactions with the user. The locale configured for the voice
            must match the locale of the bot. For more information, see [Voices in
            Amazon Polly](https://docs.aws.amazon.com/polly/latest/dg/voicelist.html)
            in the _Amazon Polly Developer Guide_.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Identifies a specific revision of the `$LATEST` version.


            When you create a new bot, leave the `checksum` field blank. If you specify
            a checksum you get a `BadRequestException` exception.


            When you want to update a bot, set the `checksum` field to the checksum
            of the most recent revision of the `$LATEST` version. If you don''t specify
            the ` checksum` field, or if the checksum does not match the `$LATEST`
            version, you get a `PreconditionFailedException` exception.'
        processBehavior:
          allOf:
          - $ref: '#/components/schemas/ProcessBehavior'
          description: 'If you set the `processBehavior` element to `BUILD`, Amazon
            Lex builds the bot so that it can be run. If you set the element to `SAVE`
            Amazon Lex saves the bot, but doesn''t build it.


            If you don''t specify this value, the default value is `BUILD`.'
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: 'Specifies the target locale for the bot. Any intent used in
            the bot must be compatible with the locale of the bot.


            The default is `en-US`.'
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'For each Amazon Lex bot created with the Amazon Lex Model
            Building Service, you must specify whether your use of Amazon Lex is related
            to a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to the Children''s
            Online Privacy Protection Act (COPPA) by specifying `true` or `false`
            in the `childDirected` field. By specifying `true` in the `childDirected`
            field, you confirm that your use of Amazon Lex **is** related to a website,
            program, or other application that is directed or targeted, in whole or
            in part, to children under age 13 and subject to COPPA. By specifying
            `false` in the `childDirected` field, you confirm that your use of Amazon
            Lex **is not** related to a website, program, or other application that
            is directed or targeted, in whole or in part, to children under age 13
            and subject to COPPA. You may not specify a default value for the `childDirected`
            field that does not accurately reflect whether your use of Amazon Lex
            is related to a website, program, or other application that is directed
            or targeted, in whole or in part, to children under age 13 and subject
            to COPPA.


            If your use of Amazon Lex relates to a website, program, or other application
            that is directed in whole or in part, to children under age 13, you must
            obtain any required verifiable parental consent under COPPA. For information
            regarding the use of Amazon Lex in connection with websites, programs,
            or other applications that are directed or targeted, in whole or in part,
            to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)'
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When set to `true` user utterances are sent to Amazon Comprehend
            for sentiment analysis. If you don't specify `detectSentiment`, the default
            is `false`.
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When set to `true` a new numbered version of the bot is created.
            This is the same as calling the `CreateBotVersion` operation. If you don't
            specify `createVersion`, the default is `false`.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags to add to the bot. You can only add tags when
            you create a bot, you can't use the `PutBot` operation to update the tags
            on a bot. To update tags, use the `TagResource` operation.
      required:
      - name
      - locale
      - childDirected
    PutBotResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the bot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the bot.
        intents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          description: An array of `Intent` objects. For more information, see PutBot.
        enableModelImprovements:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the bot uses accuracy improvements. `true`
            indicates that the bot is using the improvements, otherwise, `false`.
        nluIntentConfidenceThreshold:
          allOf:
          - $ref: '#/components/schemas/ConfidenceThreshold'
          description: The score that determines where Amazon Lex inserts the `AMAZON.FallbackIntent`,
            `AMAZON.KendraSearchIntent`, or both when returning alternative intents
            in a [PostContent](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html)
            or [PostText](https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html)
            response. `AMAZON.FallbackIntent` is inserted if the confidence score
            for all intents is below this value. `AMAZON.KendraSearchIntent` is only
            inserted if it is configured for the bot.
        clarificationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: The prompts that Amazon Lex uses when it doesn't understand
            the user's intent. For more information, see PutBot.
        abortStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: The message that Amazon Lex uses to cancel a conversation.
            For more information, see PutBot.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: 'When you send a request to create a bot with `processBehavior`
            set to `BUILD`, Amazon Lex sets the `status` response element to `BUILDING`.


            In the `READY_BASIC_TESTING` state you can test the bot with user inputs
            that exactly match the utterances configured for the bot''s intents and
            values in the slot types.


            If Amazon Lex can''t build the bot, Amazon Lex sets `status` to `FAILED`.
            Amazon Lex returns the reason for the failure in the `failureReason` response
            element.


            When you set `processBehavior` to `SAVE`, Amazon Lex sets the status code
            to `NOT BUILT`.


            When the bot is in the `READY` state you can test and publish the bot.'
        failureReason:
          allOf:
          - $ref: '#/components/schemas/String'
          description: If `status` is `FAILED`, Amazon Lex provides the reason that
            it failed to build the bot.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was updated. When you create a resource,
            the creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the bot was created.
        idleSessionTTLInSeconds:
          allOf:
          - $ref: '#/components/schemas/SessionTTL'
          description: The maximum length of time that Amazon Lex retains the data
            gathered in a conversation. For more information, see PutBot.
        voiceId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The Amazon Polly voice ID that Amazon Lex uses for voice interaction
            with the user. For more information, see PutBot.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the bot that you created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot. For a new bot, the version is always
            `$LATEST`.
        locale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: The target locale for the bot.
        childDirected:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'For each Amazon Lex bot created with the Amazon Lex Model
            Building Service, you must specify whether your use of Amazon Lex is related
            to a website, program, or other application that is directed or targeted,
            in whole or in part, to children under age 13 and subject to the Children''s
            Online Privacy Protection Act (COPPA) by specifying `true` or `false`
            in the `childDirected` field. By specifying `true` in the `childDirected`
            field, you confirm that your use of Amazon Lex **is** related to a website,
            program, or other application that is directed or targeted, in whole or
            in part, to children under age 13 and subject to COPPA. By specifying
            `false` in the `childDirected` field, you confirm that your use of Amazon
            Lex **is not** related to a website, program, or other application that
            is directed or targeted, in whole or in part, to children under age 13
            and subject to COPPA. You may not specify a default value for the `childDirected`
            field that does not accurately reflect whether your use of Amazon Lex
            is related to a website, program, or other application that is directed
            or targeted, in whole or in part, to children under age 13 and subject
            to COPPA.


            If your use of Amazon Lex relates to a website, program, or other application
            that is directed in whole or in part, to children under age 13, you must
            obtain any required verifiable parental consent under COPPA. For information
            regarding the use of Amazon Lex in connection with websites, programs,
            or other applications that are directed or targeted, in whole or in part,
            to children under age 13, see the [Amazon Lex FAQ.](https://aws.amazon.com/lex/faqs#data-security)'
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if a new version of the bot was created. If the `createVersion`
            field was not specified in the request, the `createVersion` field is set
            to false in the response.'
        detectSentiment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`true` if the bot is configured to send user utterances to
            Amazon Comprehend for sentiment analysis. If the `detectSentiment` field
            was not specified in the request, the `detectSentiment` field is `false`
            in the response.'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags associated with the bot.
    PutIntentRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: 'The name of the intent. The name is _not_ case sensitive.


            The name can''t match a built-in intent name, or a built-in intent name
            with "AMAZON." removed. For example, because there is a built-in intent
            called `AMAZON.HelpIntent`, you can''t create a custom intent called `HelpIntent`.


            For a list of built-in intents, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
            in the _Alexa Skills Kit_.'
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          description: An array of intent slots. At runtime, Amazon Lex elicits required
            slot values from the user using prompts defined in the slots. For more
            information, see how-it-works.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          description: 'An array of utterances (strings) that a user might say to
            signal the intent. For example, "I want {PizzaSize} pizza", "Order {Quantity}
            {PizzaSize} pizzas".


            In each utterance, a slot name is enclosed in curly braces.'
        confirmationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: 'Prompts the user to confirm the intent. This question should
            have a yes or no answer.


            Amazon Lex uses this prompt to ensure that the user acknowledges that
            the intent is ready for fulfillment. For example, with the `OrderPizza`
            intent, you might want to confirm that the order is correct before placing
            it. For other intents, such as intents that simply respond to user questions,
            you might not need to ask the user for confirmation before providing the
            information.


            You you must provide both the `rejectionStatement` and the `confirmationPrompt`,
            or neither.'
        rejectionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: 'When the user answers "no" to the question defined in `confirmationPrompt`,
            Amazon Lex responds with this statement to acknowledge that the intent
            was canceled.


            You must provide both the `rejectionStatement` and the `confirmationPrompt`,
            or neither.'
        followUpPrompt:
          allOf:
          - $ref: '#/components/schemas/FollowUpPrompt'
          description: "Amazon Lex uses this prompt to solicit additional activity\
            \ after fulfilling an intent. For example, after the `OrderPizza` intent\
            \ is fulfilled, you might prompt the user to order a drink.\n\nThe action\
            \ that Amazon Lex takes depends on the user's response, as follows:\n\n\
            \  * If the user says \"Yes\" it responds with the clarification prompt\
            \ that is configured for the bot.\n\n  * if the user says \"Yes\" and\
            \ continues with an utterance that triggers an intent it starts a conversation\
            \ for the intent.\n\n  * If the user says \"No\" it responds with the\
            \ rejection statement configured for the the follow-up prompt.\n\n  *\
            \ If it doesn't recognize the utterance it repeats the follow-up prompt\
            \ again.\n\nThe `followUpPrompt` field and the `conclusionStatement` field\
            \ are mutually exclusive. You can specify only one."
        conclusionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: 'The statement that you want Amazon Lex to convey to the user
            after the intent is successfully fulfilled by the Lambda function.


            This element is relevant only if you provide a Lambda function in the
            `fulfillmentActivity`. If you return the intent to the client application,
            you can''t specify this element.


            The `followUpPrompt` and `conclusionStatement` are mutually exclusive.
            You can specify only one.'
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/CodeHook'
          description: 'Specifies a Lambda function to invoke for each user input.
            You can invoke this Lambda function to personalize user interaction.


            For example, suppose your bot determines that the user is John. Your Lambda
            function might retrieve John''s information from a backend database and
            prepopulate some of the values. For example, if you find that John is
            gluten intolerant, you might set the corresponding intent slot, `GlutenIntolerant`,
            to true. You might find John''s phone number and set the corresponding
            session attribute.'
        fulfillmentActivity:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivity'
          description: 'Required. Describes how the intent is fulfilled. For example,
            after a user provides all of the information for a pizza order, `fulfillmentActivity`
            defines how the bot places an order with a local pizza store.


            You might configure Amazon Lex to return all of the intent information
            to the client application, or direct it to invoke a Lambda function that
            can process the intent (for example, place an order with a pizzeria).'
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: A unique identifier for the built-in intent to base this intent
            on. To find the signature for an intent, see [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
            in the _Alexa Skills Kit_.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Identifies a specific revision of the `$LATEST` version.


            When you create a new intent, leave the `checksum` field blank. If you
            specify a checksum you get a `BadRequestException` exception.


            When you want to update a intent, set the `checksum` field to the checksum
            of the most recent revision of the `$LATEST` version. If you don''t specify
            the ` checksum` field, or if the checksum does not match the `$LATEST`
            version, you get a `PreconditionFailedException` exception.'
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When set to `true` a new numbered version of the intent is
            created. This is the same as calling the `CreateIntentVersion` operation.
            If you do not specify `createVersion`, the default is `false`.
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information required to use the `AMAZON.KendraSearchIntent`
            intent to connect to an Amazon Kendra index. For more information, see
            [ AMAZON.KendraSearchIntent](http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html).
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          description: An array of `InputContext` objects that lists the contexts
            that must be active for Amazon Lex to choose the intent in a conversation
            with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          description: An array of `OutputContext` objects that lists the contexts
            that the intent activates when the intent is fulfilled.
      required:
      - name
    PutIntentResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          description: The name of the intent.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/SlotList'
          description: An array of intent slots that are configured for the intent.
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/IntentUtteranceList'
          description: An array of sample utterances that are configured for the intent.
        confirmationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: If defined in the intent, Amazon Lex prompts the user to confirm
            the intent before fulfilling it.
        rejectionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: If the user answers "no" to the question defined in `confirmationPrompt`
            Amazon Lex responds with this statement to acknowledge that the intent
            was canceled.
        followUpPrompt:
          allOf:
          - $ref: '#/components/schemas/FollowUpPrompt'
          description: If defined in the intent, Amazon Lex uses this prompt to solicit
            additional user activity after the intent is fulfilled.
        conclusionStatement:
          allOf:
          - $ref: '#/components/schemas/Statement'
          description: After the Lambda function specified in the`fulfillmentActivity`intent
            fulfills the intent, Amazon Lex conveys this statement to the user.
        dialogCodeHook:
          allOf:
          - $ref: '#/components/schemas/CodeHook'
          description: If defined in the intent, Amazon Lex invokes this Lambda function
            for each user input.
        fulfillmentActivity:
          allOf:
          - $ref: '#/components/schemas/FulfillmentActivity'
          description: If defined in the intent, Amazon Lex invokes this Lambda function
            to fulfill the intent after the user provides all of the information required
            by the intent.
        parentIntentSignature:
          allOf:
          - $ref: '#/components/schemas/BuiltinIntentSignature'
          description: A unique identifier for the built-in intent that this intent
            is based on.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was updated. When you create a resource,
            the creation date and last update dates are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the intent was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the intent. For a new intent, the version is
            always `$LATEST`.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the `$LATEST`version of the intent created or updated.
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if a new version of the intent was created. If the
            `createVersion` field was not specified in the request, the `createVersion`
            field is set to false in the response.'
        kendraConfiguration:
          allOf:
          - $ref: '#/components/schemas/KendraConfiguration'
          description: Configuration information, if any, required to connect to an
            Amazon Kendra index and use the `AMAZON.KendraSearchIntent` intent.
        inputContexts:
          allOf:
          - $ref: '#/components/schemas/InputContextList'
          description: An array of `InputContext` objects that lists the contexts
            that must be active for Amazon Lex to choose the intent in a conversation
            with the user.
        outputContexts:
          allOf:
          - $ref: '#/components/schemas/OutputContextList'
          description: An array of `OutputContext` objects that lists the contexts
            that the intent activates when the intent is fulfilled.
    PutSlotTypeRequest:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: 'The name of the slot type. The name is _not_ case sensitive.


            The name can''t match a built-in slot type name, or a built-in slot type
            name with "AMAZON." removed. For example, because there is a built-in
            slot type called `AMAZON.DATE`, you can''t create a custom slot type called
            `DATE`.


            For a list of built-in slot types, see [Slot Type Reference](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference)
            in the _Alexa Skills Kit_.'
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          description: 'A list of `EnumerationValue` objects that defines the values
            that the slot type can take. Each value can have a list of `synonyms`,
            which are additional values that help train the machine learning model
            about the values that it resolves for a slot.


            A regular expression slot type doesn''t require enumeration values. All
            other slot types require a list of enumeration values.


            When Amazon Lex resolves a slot value, it generates a resolution list
            that contains up to five possible values for the slot. If you are using
            a Lambda function, this resolution list is passed to the function. If
            you are not using a Lambda function you can choose to return the value
            that the user entered or the first value in the resolution list as the
            slot value. The `valueSelectionStrategy` field indicates the option to
            use.'
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'Identifies a specific revision of the `$LATEST` version.


            When you create a new slot type, leave the `checksum` field blank. If
            you specify a checksum you get a `BadRequestException` exception.


            When you want to update a slot type, set the `checksum` field to the checksum
            of the most recent revision of the `$LATEST` version. If you don''t specify
            the ` checksum` field, or if the checksum does not match the `$LATEST`
            version, you get a `PreconditionFailedException` exception.'
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          description: "Determines the slot resolution strategy that Amazon Lex uses\
            \ to return slot type values. The field can be set to one of the following\
            \ values:\n\n  * `ORIGINAL_VALUE` \\- Returns the value entered by the\
            \ user, if the user value is similar to the slot value.\n\n  * `TOP_RESOLUTION`\
            \ \\- If there is a resolution list for the slot, return the first value\
            \ in the resolution list as the slot type value. If there is no resolution\
            \ list, null is returned.\n\nIf you don't specify the `valueSelectionStrategy`,\
            \ the default is `ORIGINAL_VALUE`."
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: When set to `true` a new numbered version of the slot type
            is created. This is the same as calling the `CreateSlotTypeVersion` operation.
            If you do not specify `createVersion`, the default is `false`.
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          description: 'The built-in slot type used as the parent of the slot type.
            When you define a parent slot type, the new slot type has all of the same
            configuration as the parent.


            Only `AMAZON.AlphaNumeric` is supported.'
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          description: Configuration information that extends the parent built-in
            slot type. The configuration is added to the settings for the parent slot
            type.
      required:
      - name
    PutSlotTypeResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type.
        enumerationValues:
          allOf:
          - $ref: '#/components/schemas/EnumerationValues'
          description: A list of `EnumerationValue` objects that defines the values
            that the slot type can take.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was updated. When you create a
            slot type, the creation date and last update date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the slot type. For a new slot type, the version
            is always `$LATEST`.
        checksum:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Checksum of the `$LATEST` version of the slot type.
        valueSelectionStrategy:
          allOf:
          - $ref: '#/components/schemas/SlotValueSelectionStrategy'
          description: The slot resolution strategy that Amazon Lex uses to determine
            the value of the slot. For more information, see PutSlotType.
        createVersion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if a new version of the slot type was created. If the
            `createVersion` field was not specified in the request, the `createVersion`
            field is set to false in the response.'
        parentSlotTypeSignature:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          description: The built-in slot type used as the parent of the slot type.
        slotTypeConfigurations:
          allOf:
          - $ref: '#/components/schemas/SlotTypeConfigurations'
          description: Configuration information that extends the parent built-in
            slot type.
    QueryFilterString:
      type: string
      minLength: 0
    ReferenceType:
      type: string
      enum:
      - Intent
      - Bot
      - BotAlias
      - BotChannel
    RegexPattern:
      type: string
      minLength: 1
      maxLength: 100
    ResourceArn:
      type: string
      pattern: ^arn:[\w\-]+:(?:logs:[\w\-]+:[\d]{12}:log-group:[\.\-_/#A-Za-z0-9]{1,512}(?::\*)?|s3:::[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9])$
      minLength: 1
      maxLength: 2048
    ResourceInUseException:
      type: object
      properties:
        referenceType:
          $ref: '#/components/schemas/ReferenceType'
        exampleReference:
          $ref: '#/components/schemas/ResourceReference'
      description: 'The resource that you are attempting to delete is referred to
        by another resource. Use this information to remove references to the resource
        that you are trying to delete.


        The body of the exception contains a JSON object that describes the resource.


        `{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,`


        `"resourceReference": {`


        `"name": _string_ , "version": _string_ } }`'
    ResourcePrefix:
      type: string
      minLength: 0
      maxLength: 1024
    ResourceReference:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the resource that is using the resource that you
            are trying to delete.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the resource that is using the resource that
            you are trying to delete.
      description: Describes the resource that refers to the resource that you are
        attempting to delete. This object is returned as part of the `ResourceInUseException`
        exception.
    ResourceType:
      type: string
      enum:
      - BOT
      - INTENT
      - SLOT_TYPE
    ResponseCard:
      type: string
      minLength: 1
      maxLength: 50000
    SessionTTL:
      type: integer
      minimum: 60
      maximum: 86400
    Slot:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotName'
          description: The name of the slot.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot.
        slotConstraint:
          allOf:
          - $ref: '#/components/schemas/SlotConstraint'
          description: Specifies whether the slot is required or optional.
        slotType:
          allOf:
          - $ref: '#/components/schemas/CustomOrBuiltinSlotTypeName'
          description: The type of the slot, either a custom slot type that you defined
            or one of the built-in slot types.
        slotTypeVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the slot type.
        valueElicitationPrompt:
          allOf:
          - $ref: '#/components/schemas/Prompt'
          description: The prompt that Amazon Lex uses to elicit the slot value from
            the user.
        priority:
          allOf:
          - $ref: '#/components/schemas/Priority'
          description: 'Directs Amazon Lex the order in which to elicit this slot
            value from the user. For example, if the intent has two slots with priorities
            1 and 2, AWS Amazon Lex first elicits a value for the slot with priority
            1.


            If multiple slots share the same priority, the order in which Amazon Lex
            elicits values is arbitrary.'
        sampleUtterances:
          allOf:
          - $ref: '#/components/schemas/SlotUtteranceList'
          description: If you know a specific pattern with which users might respond
            to an Amazon Lex request for a slot value, you can provide those utterances
            to improve accuracy. This is optional. In most cases, Amazon Lex is capable
            of understanding user utterances.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          description: A set of possible responses for the slot type used by text-based
            clients. A user chooses an option from the response card, instead of using
            text to reply.
        obfuscationSetting:
          allOf:
          - $ref: '#/components/schemas/ObfuscationSetting'
          description: Determines whether a slot is obfuscated in conversation logs
            and stored utterances. When you obfuscate a slot, the value is replaced
            by the slot name in curly braces ({}). For example, if the slot name is
            "full_name", obfuscated values are replaced with "{full_name}". For more
            information, see [ Slot Obfuscation ](https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html).
        defaultValueSpec:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueSpec'
          description: A list of default values for the slot. Default values are used
            when Amazon Lex hasn't determined a value for a slot. You can specify
            default values from context variables, session attributes, and defined
            values.
      required:
      - name
      - slotConstraint
      description: Identifies the version of a specific slot.
    SlotConstraint:
      type: string
      enum:
      - Required
      - Optional
    SlotDefaultValue:
      type: object
      properties:
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueString'
          description: "The default value for the slot. You can specify one of the\
            \ following:\n\n  * `#context-name.slot-name` \\- The slot value \"slot-name\"\
            \ in the context \"context-name.\"\n\n  * `{attribute}` \\- The slot value\
            \ of the session attribute \"attribute.\"\n\n  * `'value'` \\- The discrete\
            \ value \"value.\""
      required:
      - defaultValue
      description: A default value for a slot.
    SlotDefaultValueList:
      type: array
      items:
        $ref: '#/components/schemas/SlotDefaultValue'
    SlotDefaultValueSpec:
      type: object
      properties:
        defaultValueList:
          allOf:
          - $ref: '#/components/schemas/SlotDefaultValueList'
          description: 'The default values for a slot. You can specify more than one
            default. For example, you can specify a default value to use from a matching
            context variable, a session attribute, or a fixed value.


            The default value chosen is selected based on the order that you specify
            them in the list. For example, if you specify a context variable and a
            fixed value in that order, Amazon Lex uses the context variable if it
            is available, else it uses the fixed value.'
      required:
      - defaultValueList
      description: Contains the default values for a slot. Default values are used
        when Amazon Lex hasn't determined a value for a slot.
    SlotDefaultValueString:
      type: string
      minLength: 1
      maxLength: 202
    SlotList:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
    SlotName:
      type: string
      pattern: ^([A-Za-z](-|_|.)?)+$
      minLength: 1
      maxLength: 100
    SlotTypeConfiguration:
      type: object
      properties:
        regexConfiguration:
          allOf:
          - $ref: '#/components/schemas/SlotTypeRegexConfiguration'
          description: A regular expression used to validate the value of a slot.
      description: Provides configuration information for a slot type.
    SlotTypeConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeConfiguration'
    SlotTypeMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/SlotTypeName'
          description: The name of the slot type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: A description of the slot type.
        lastUpdatedDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was updated. When you create a
            resource, the creation date and last updated date are the same.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the slot type was created.
        version:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the slot type.
      description: Provides information about a slot type..
    SlotTypeMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/SlotTypeMetadata'
    SlotTypeName:
      type: string
      pattern: ^([A-Za-z]_?)+$
      minLength: 1
      maxLength: 100
    SlotTypeRegexConfiguration:
      type: object
      properties:
        pattern:
          allOf:
          - $ref: '#/components/schemas/RegexPattern'
          description: "A regular expression used to validate the value of a slot.\n\
            \nUse a standard regular expression. Amazon Lex supports the following\
            \ characters in the regular expression:\n\n  * A-Z, a-z\n\n  * 0-9\n\n\
            \  * Unicode characters (\"\\ u\")\n\nRepresent Unicode characters with\
            \ four digits, for example \"\\u0041\" or \"\\u005A\".\n\nThe following\
            \ regular expression operators are not supported:\n\n  * Infinite repeaters:\
            \ *, +, or {x,} with no upper bound.\n\n  * Wild card (.)"
      required:
      - pattern
      description: Provides a regular expression used to validate the value of a slot.
    SlotUtteranceList:
      type: array
      items:
        $ref: '#/components/schemas/Utterance'
    SlotValueSelectionStrategy:
      type: string
      enum:
      - ORIGINAL_VALUE
      - TOP_RESOLUTION
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    StartImportRequest:
      type: object
      properties:
        payload:
          allOf:
          - $ref: '#/components/schemas/Blob'
          description: A zip archive in binary format. The archive should contain
            one file, a JSON file containing the resource to import. The resource
            should match the type specified in the `resourceType` field.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: "Specifies the type of resource to export. Each resource also\
            \ exports any resources that it depends on.\n\n  * A bot exports dependent\
            \ intents.\n\n  * An intent exports dependent slot types."
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: "Specifies the action that the `StartImport` operation should\
            \ take when there is an existing resource with the same name.\n\n  * FAIL_ON_CONFLICT\
            \ - The import operation is stopped on the first conflict between a resource\
            \ in the import file and an existing resource. The name of the resource\
            \ causing the conflict is in the `failureReason` field of the response\
            \ to the `GetImport` operation.\n\nOVERWRITE_LATEST - The import operation\
            \ proceeds even if there is a conflict with an existing resource. The\
            \ $LASTEST version of the existing resource is overwritten with the data\
            \ from the import file."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags to add to the imported bot. You can only add
            tags when you import a bot, you can't add tags to an intent or slot type.
      required:
      - payload
      - resourceType
      - mergeStrategy
    StartImportResponse:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name given to the import job.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The type of resource to import.
        mergeStrategy:
          allOf:
          - $ref: '#/components/schemas/MergeStrategy'
          description: The action to take when there is a merge conflict.
        importId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier for the specific import job.
        importStatus:
          allOf:
          - $ref: '#/components/schemas/ImportStatus'
          description: The status of the import job. If the status is `FAILED`, you
            can get the reason for the failure using the `GetImport` operation.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tags added to the imported bot.
        createdDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: A timestamp for the date and time that the import job was requested.
    StartMigrationRequest:
      type: object
      properties:
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex V1 bot that you are migrating to
            Amazon Lex V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot to migrate to Amazon Lex V2. You can
            migrate the `$LATEST` version as well as any numbered version.
        v2BotName:
          allOf:
          - $ref: '#/components/schemas/V2BotName'
          description: "The name of the Amazon Lex V2 bot that you are migrating the\
            \ Amazon Lex V1 bot to.\n\n  * If the Amazon Lex V2 bot doesn't exist,\
            \ you must use the `CREATE_NEW` migration strategy.\n\n  * If the Amazon\
            \ Lex V2 bot exists, you must use the `UPDATE_EXISTING` migration strategy\
            \ to change the contents of the Amazon Lex V2 bot."
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
            bot.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          description: "The strategy used to conduct the migration.\n\n  * `CREATE_NEW`\
            \ \\- Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot\
            \ to the new bot.\n\n  * `UPDATE_EXISTING` \\- Overwrites the existing\
            \ Amazon Lex V2 bot metadata and the locale being migrated. It doesn't\
            \ change any other locales in the Amazon Lex V2 bot. If the locale doesn't\
            \ exist, a new locale is created in the Amazon Lex V2 bot."
      required:
      - v1BotName
      - v1BotVersion
      - v2BotName
      - v2BotRole
      - migrationStrategy
    StartMigrationResponse:
      type: object
      properties:
        v1BotName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          description: The name of the Amazon Lex V1 bot that you are migrating to
            Amazon Lex V2.
        v1BotVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot to migrate to Amazon Lex V2.
        v1BotLocale:
          allOf:
          - $ref: '#/components/schemas/Locale'
          description: The locale used for the Amazon Lex V1 bot.
        v2BotId:
          allOf:
          - $ref: '#/components/schemas/V2BotId'
          description: The unique identifier for the Amazon Lex V2 bot.
        v2BotRole:
          allOf:
          - $ref: '#/components/schemas/IamRoleArn'
          description: The IAM role that Amazon Lex uses to run the Amazon Lex V2
            bot.
        migrationId:
          allOf:
          - $ref: '#/components/schemas/MigrationId'
          description: The unique identifier that Amazon Lex assigned to the migration.
        migrationStrategy:
          allOf:
          - $ref: '#/components/schemas/MigrationStrategy'
          description: The strategy used to conduct the migration.
        migrationTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time that the migration started.
    Statement:
      type: object
      properties:
        messages:
          allOf:
          - $ref: '#/components/schemas/MessageList'
          description: A collection of message objects.
        responseCard:
          allOf:
          - $ref: '#/components/schemas/ResponseCard'
          description: At runtime, if the client is using the [PostText](http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html)
            API, Amazon Lex includes the response card in the response. It substitutes
            all of the session attributes and slot values for placeholders in the
            response card.
      required:
      - messages
      description: A collection of messages that convey information to the user. At
        runtime, Amazon Lex selects the message to convey.
    Status:
      type: string
      enum:
      - BUILDING
      - READY
      - READY_BASIC_TESTING
      - FAILED
      - NOT_BUILT
    StatusType:
      type: string
      enum:
      - Detected
      - Missed
    String:
      type: string
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    SynonymList:
      type: array
      items:
        $ref: '#/components/schemas/Value'
    Tag:
      type: object
      properties:
        key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: The key for the tag. Keys are not case-sensitive and must be
            unique.
        value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: The value associated with a key. The value may be an empty
            string but it can't be null.
      required:
      - key
      - value
      description: 'A list of key/value pairs that identify a bot, bot alias, or bot
        channel. Tag keys and values can consist of Unicode letters, digits, white
        space, and any of the following symbols: _ . : / = + - @.'
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    TagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the bot, bot alias, or bot
            channel to tag.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of tag keys to add to the resource. If a tag key already
            exists, the existing value is replaced with the new value.
      required:
      - resourceArn
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Timestamp:
      type: string
      format: date-time
    UntagResourceRequest:
      type: object
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/AmazonResourceName'
          description: The Amazon Resource Name (ARN) of the resource to remove the
            tags from.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of tag keys to remove from the resource. If a tag key
            does not exist on the resource, it is ignored.
      required:
      - resourceArn
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UserId:
      type: string
      minLength: 2
      maxLength: 100
    Utterance:
      type: string
      minLength: 1
      maxLength: 200
    UtteranceData:
      type: object
      properties:
        utteranceString:
          allOf:
          - $ref: '#/components/schemas/UtteranceString'
          description: The text that was entered by the user or the text representation
            of an audio clip.
        count:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The number of times that the utterance was processed.
        distinctUsers:
          allOf:
          - $ref: '#/components/schemas/Count'
          description: The total number of individuals that used the utterance.
        firstUtteredDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the utterance was first recorded.
        lastUtteredDate:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date that the utterance was last recorded.
      description: Provides information about a single utterance that was made to
        your bot.
    UtteranceList:
      type: object
      properties:
        botVersion:
          allOf:
          - $ref: '#/components/schemas/Version'
          description: The version of the bot that processed the list.
        utterances:
          allOf:
          - $ref: '#/components/schemas/ListOfUtterance'
          description: One or more UtteranceData objects that contain information
            about the utterances that have been made to a bot. The maximum number
            of object is 100.
      description: Provides a list of utterances that have been made to a specific
        version of your bot. The list contains a maximum of 100 utterances.
    UtteranceString:
      type: string
      minLength: 1
      maxLength: 2000
    V2BotId:
      type: string
      pattern: ^[0-9a-zA-Z]+$
      minLength: 10
      maxLength: 10
    V2BotName:
      type: string
      pattern: ^([0-9a-zA-Z][_-]?)+$
      minLength: 1
      maxLength: 100
    Value:
      type: string
      minLength: 1
      maxLength: 140
    Version:
      type: string
      pattern: ^\$LATEST|[0-9]+$
      minLength: 1
      maxLength: 64
    roleArn:
      type: string
      pattern: ^arn:aws:iam::[0-9]{12}:role/
      minLength: 20
      maxLength: 2048
