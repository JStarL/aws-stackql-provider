openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: elasticsearch_service
  x-aws-serviceName: elasticsearchservice
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2015-01-01'
  title: Amazon Elasticsearch Service
  description: |-
    Amazon Elasticsearch Configuration Service

    Use the Amazon Elasticsearch Configuration API to create, configure, and manage Elasticsearch domains.

    For sample code that uses the Configuration API, see the [Amazon Elasticsearch Service Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-configuration-samples.html). The guide also contains [sample code for sending signed HTTP requests to the Elasticsearch APIs](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-request-signing.html).

    The endpoint for configuration service requests is region-specific: es._region_.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints, see [Regions and Endpoints](http://docs.aws.amazon.com/general/latest/gr/rande.html#elasticsearch-service-regions).
servers:
- description: The Amazon Elasticsearch Service regional endpoint
  url: https://es.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /2015-01-01/es/ccs/inboundConnection/{CrossClusterSearchConnectionId}/accept:
    put:
      operationId: AcceptInboundCrossClusterSearchConnection
      description: |-
        Allows the destination domain owner to accept an inbound cross-cluster search connection request.
      parameters:
      - name: CrossClusterSearchConnectionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CrossClusterSearchConnectionId'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/tags:
    post:
      operationId: AddTags
      description: |-
        Attaches tags to an existing Elasticsearch domain. Tags are a set of case-sensitive key value pairs. An Elasticsearch domain may have up to 10 tags. See [ Tagging Amazon Elasticsearch Service Domains for more information.](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-awsresorcetagging)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ARN:
                  $ref: '#/components/schemas/ARN'
                TagList:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
    get:
      operationId: ListTags
      description: |-
        Returns all tags for the given Elasticsearch domain.
      parameters:
      - name: arn
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ARN'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/packages/associate/{PackageID}/{DomainName}:
    post:
      operationId: AssociatePackage
      description: |-
        Associates a package with an Amazon ES domain.
      parameters:
      - name: PackageID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PackageID'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}/authorizeVpcEndpointAccess:
    post:
      operationId: AuthorizeVpcEndpointAccess
      description: |-
        Provides access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Account:
                  $ref: '#/components/schemas/AWSAccount'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}/config/cancel:
    post:
      operationId: CancelDomainConfigChange
      description: |-
        Cancels a pending configuration change on an Amazon OpenSearch Service domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DryRun:
                  $ref: '#/components/schemas/DryRun'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/serviceSoftwareUpdate/cancel:
    post:
      operationId: CancelElasticsearchServiceSoftwareUpdate
      description: |-
        Cancels a scheduled service software update for an Amazon ES domain. You can only perform this operation before the `AutomatedUpdateDate` and when the `UpdateStatus` is in the `PENDING_UPDATE` state.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainName:
                  $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/domain:
    post:
      operationId: CreateElasticsearchDomain
      description: |-
        Creates a new Elasticsearch domain. For more information, see [Creating Elasticsearch Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains) in the _Amazon Elasticsearch Service Developer Guide_.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainName:
                  $ref: '#/components/schemas/DomainName'
                ElasticsearchVersion:
                  $ref: '#/components/schemas/ElasticsearchVersionString'
                ElasticsearchClusterConfig:
                  $ref: '#/components/schemas/ElasticsearchClusterConfig'
                EBSOptions:
                  $ref: '#/components/schemas/EBSOptions'
                AccessPolicies:
                  $ref: '#/components/schemas/PolicyDocument'
                SnapshotOptions:
                  $ref: '#/components/schemas/SnapshotOptions'
                VPCOptions:
                  $ref: '#/components/schemas/VPCOptions'
                CognitoOptions:
                  $ref: '#/components/schemas/CognitoOptions'
                EncryptionAtRestOptions:
                  $ref: '#/components/schemas/EncryptionAtRestOptions'
                NodeToNodeEncryptionOptions:
                  $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
                AdvancedOptions:
                  $ref: '#/components/schemas/AdvancedOptions'
                LogPublishingOptions:
                  $ref: '#/components/schemas/LogPublishingOptions'
                DomainEndpointOptions:
                  $ref: '#/components/schemas/DomainEndpointOptions'
                AdvancedSecurityOptions:
                  $ref: '#/components/schemas/AdvancedSecurityOptionsInput'
                AutoTuneOptions:
                  $ref: '#/components/schemas/AutoTuneOptionsInput'
                TagList:
                  $ref: '#/components/schemas/TagList'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for creating a resource that already exists. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/ccs/outboundConnection:
    post:
      operationId: CreateOutboundCrossClusterSearchConnection
      description: |-
        Creates a new cross-cluster search connection from a source domain to a destination domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                SourceDomainInfo:
                  $ref: '#/components/schemas/DomainInformation'
                DestinationDomainInfo:
                  $ref: '#/components/schemas/DomainInformation'
                ConnectionAlias:
                  $ref: '#/components/schemas/ConnectionAlias'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for creating a resource that already exists. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/packages:
    post:
      operationId: CreatePackage
      description: |-
        Create a package for use with Amazon ES domains.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                PackageName:
                  $ref: '#/components/schemas/PackageName'
                PackageType:
                  $ref: '#/components/schemas/PackageType'
                PackageDescription:
                  $ref: '#/components/schemas/PackageDescription'
                PackageSource:
                  $ref: '#/components/schemas/PackageSource'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for creating a resource that already exists. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAlreadyExistsException'
  /2015-01-01/es/vpcEndpoints:
    post:
      operationId: CreateVpcEndpoint
      description: |-
        Creates an Amazon OpenSearch Service-managed VPC endpoint.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainArn:
                  $ref: '#/components/schemas/DomainArn'
                VpcOptions:
                  $ref: '#/components/schemas/VPCOptions'
                ClientToken:
                  $ref: '#/components/schemas/ClientToken'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
    get:
      operationId: ListVpcEndpoints
      description: |-
        Retrieves all Amazon OpenSearch Service-managed VPC endpoints in the current account and Region.
      parameters:
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseException'
        '409':
          description: |-
            An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledOperationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}:
    delete:
      operationId: DeleteElasticsearchDomain
      description: |-
        Permanently deletes the specified Elasticsearch domain and all of its data. Once a domain is deleted, it cannot be recovered.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    get:
      operationId: DescribeElasticsearchDomain
      description: |-
        Returns domain configuration information about the specified Elasticsearch domain, including the domain ID, domain endpoint, and domain ARN.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/role:
    delete:
      operationId: DeleteElasticsearchServiceRole
      description: |-
        Deletes the service-linked role that Elasticsearch Service uses to manage and maintain VPC domains. Role deletion will fail if any existing VPC domains use the role. You must delete any such Elasticsearch domains before deleting the role. See [Deleting Elasticsearch Service Role](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-enabling-slr) in _VPC Endpoints for Amazon Elasticsearch Service Domains_.
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/ccs/inboundConnection/{CrossClusterSearchConnectionId}:
    delete:
      operationId: DeleteInboundCrossClusterSearchConnection
      description: |-
        Allows the destination domain owner to delete an existing inbound cross-cluster search connection.
      parameters:
      - name: CrossClusterSearchConnectionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CrossClusterSearchConnectionId'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/ccs/outboundConnection/{CrossClusterSearchConnectionId}:
    delete:
      operationId: DeleteOutboundCrossClusterSearchConnection
      description: |-
        Allows the source domain owner to delete an existing outbound cross-cluster search connection.
      parameters:
      - name: CrossClusterSearchConnectionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CrossClusterSearchConnectionId'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/packages/{PackageID}:
    delete:
      operationId: DeletePackage
      description: |-
        Delete the package.
      parameters:
      - name: PackageID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PackageID'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/vpcEndpoints/{VpcEndpointId}:
    delete:
      operationId: DeleteVpcEndpoint
      description: |-
        Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
      parameters:
      - name: VpcEndpointId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/VpcEndpointId'
      responses:
        '200': {}
        '400':
          description: |-
            An error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}/autoTunes:
    get:
      operationId: DescribeDomainAutoTunes
      description: |-
        Provides scheduled Auto-Tune action details for the Elasticsearch domain, such as Auto-Tune action type, description, severity, and scheduled date.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                MaxResults:
                  $ref: '#/components/schemas/MaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/domain/{DomainName}/progress:
    get:
      operationId: DescribeDomainChangeProgress
      description: |-
        Returns information about the current blue/green deployment happening on a domain, including a change ID, status, and progress stages.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: changeid
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GUID'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/domain/{DomainName}/config:
    get:
      operationId: DescribeElasticsearchDomainConfig
      description: |-
        Provides cluster configuration information about the specified Elasticsearch domain, such as the state, creation date, update version, and update date for cluster options.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
    post:
      operationId: UpdateElasticsearchDomainConfig
      description: |-
        Modifies the cluster configuration of the specified Elasticsearch domain, setting as setting the instance type and the number of instances.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ElasticsearchClusterConfig:
                  $ref: '#/components/schemas/ElasticsearchClusterConfig'
                EBSOptions:
                  $ref: '#/components/schemas/EBSOptions'
                SnapshotOptions:
                  $ref: '#/components/schemas/SnapshotOptions'
                VPCOptions:
                  $ref: '#/components/schemas/VPCOptions'
                CognitoOptions:
                  $ref: '#/components/schemas/CognitoOptions'
                AdvancedOptions:
                  $ref: '#/components/schemas/AdvancedOptions'
                AccessPolicies:
                  $ref: '#/components/schemas/PolicyDocument'
                LogPublishingOptions:
                  $ref: '#/components/schemas/LogPublishingOptions'
                DomainEndpointOptions:
                  $ref: '#/components/schemas/DomainEndpointOptions'
                AdvancedSecurityOptions:
                  $ref: '#/components/schemas/AdvancedSecurityOptionsInput'
                NodeToNodeEncryptionOptions:
                  $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
                EncryptionAtRestOptions:
                  $ref: '#/components/schemas/EncryptionAtRestOptions'
                AutoTuneOptions:
                  $ref: '#/components/schemas/AutoTuneOptions'
                DryRun:
                  $ref: '#/components/schemas/DryRun'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/domain-info:
    post:
      operationId: DescribeElasticsearchDomains
      description: |-
        Returns domain configuration information about the specified Elasticsearch domains, including the domain ID, domain endpoint, and domain ARN.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainNames:
                  $ref: '#/components/schemas/DomainNameList'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/instanceTypeLimits/{ElasticsearchVersion}/{InstanceType}:
    get:
      operationId: DescribeElasticsearchInstanceTypeLimits
      description: |-
        Describe Elasticsearch Limits for a given InstanceType and ElasticsearchVersion. When modifying existing Domain, specify the ` DomainName ` to know what Limits are supported for modifying.
      parameters:
      - name: domainName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: InstanceType
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ESPartitionInstanceType'
      - name: ElasticsearchVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ElasticsearchVersionString'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/ccs/inboundConnection/search:
    post:
      operationId: DescribeInboundCrossClusterSearchConnections
      description: |-
        Lists all the inbound cross-cluster search connections for a destination domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Filters:
                  $ref: '#/components/schemas/FilterList'
                MaxResults:
                  $ref: '#/components/schemas/MaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '409':
          description: |-
            An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledOperationException'
        '400':
          description: |-
            The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPaginationTokenException'
  /2015-01-01/es/ccs/outboundConnection/search:
    post:
      operationId: DescribeOutboundCrossClusterSearchConnections
      description: |-
        Lists all the outbound cross-cluster search connections for a source domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Filters:
                  $ref: '#/components/schemas/FilterList'
                MaxResults:
                  $ref: '#/components/schemas/MaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '409':
          description: |-
            An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledOperationException'
        '400':
          description: |-
            The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPaginationTokenException'
  /2015-01-01/packages/describe:
    post:
      operationId: DescribePackages
      description: |-
        Describes all packages available to Amazon ES. Includes options for filtering, limiting the number of results, and pagination.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Filters:
                  $ref: '#/components/schemas/DescribePackagesFilterList'
                MaxResults:
                  $ref: '#/components/schemas/MaxResults'
                NextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/reservedInstanceOfferings:
    get:
      operationId: DescribeReservedElasticsearchInstanceOfferings
      description: |-
        Lists available reserved Elasticsearch instance offerings.
      parameters:
      - name: offeringId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GUID'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2015-01-01/es/reservedInstances:
    get:
      operationId: DescribeReservedElasticsearchInstances
      description: |-
        Returns information about reserved Elasticsearch instances for this account.
      parameters:
      - name: reservationId
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/GUID'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2015-01-01/es/vpcEndpoints/describe:
    post:
      operationId: DescribeVpcEndpoints
      description: |-
        Describes one or more Amazon OpenSearch Service-managed VPC endpoints.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VpcEndpointIds:
                  $ref: '#/components/schemas/VpcEndpointIdList'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An error occured because the client wanted to access a not supported operation. Gives http status code of 409.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledOperationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/packages/dissociate/{PackageID}/{DomainName}:
    post:
      operationId: DissociatePackage
      description: |-
        Dissociates a package from the Amazon ES domain.
      parameters:
      - name: PackageID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PackageID'
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/compatibleVersions:
    get:
      operationId: GetCompatibleElasticsearchVersions
      description: |-
        Returns a list of upgrade compatible Elastisearch versions. You can optionally pass a ` DomainName ` to get all upgrade compatible Elasticsearch versions for that specific domain.
      parameters:
      - name: domainName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/packages/{PackageID}/history:
    get:
      operationId: GetPackageVersionHistory
      description: |-
        Returns a list of versions of the package, along with their creation time and commit message.
      parameters:
      - name: PackageID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PackageID'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/upgradeDomain/{DomainName}/history:
    get:
      operationId: GetUpgradeHistory
      description: |-
        Retrieves the complete history of the last 10 upgrades that were performed on the domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/upgradeDomain/{DomainName}/status:
    get:
      operationId: GetUpgradeStatus
      description: |-
        Retrieves the latest status of the last upgrade or upgrade eligibility check that was performed on the domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/domain:
    get:
      operationId: ListDomainNames
      description: |-
        Returns the name of all Elasticsearch domains owned by the current user's account.
      parameters:
      - name: engineType
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/EngineType'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2015-01-01/packages/{PackageID}/domains:
    get:
      operationId: ListDomainsForPackage
      description: |-
        Lists all Amazon ES domains associated with the package.
      parameters:
      - name: PackageID
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/PackageID'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/instanceTypes/{ElasticsearchVersion}:
    get:
      operationId: ListElasticsearchInstanceTypes
      description: |-
        List all Elasticsearch instance types that are supported for given ElasticsearchVersion
      parameters:
      - name: ElasticsearchVersion
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ElasticsearchVersionString'
      - name: domainName
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/versions:
    get:
      operationId: ListElasticsearchVersions
      description: |-
        List all supported Elasticsearch versions
      parameters:
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/domain/{DomainName}/packages:
    get:
      operationId: ListPackagesForDomain
      description: |-
        Lists all packages associated with the Amazon ES domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: maxResults
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/MaxResults'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/domain/{DomainName}/listVpcEndpointAccess:
    get:
      operationId: ListVpcEndpointAccess
      description: |-
        Retrieves information about each principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}/vpcEndpoints:
    get:
      operationId: ListVpcEndpointsForDomain
      description: |-
        Retrieves all Amazon OpenSearch Service-managed VPC endpoints associated with a particular domain.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      - name: nextToken
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '400':
          description: |-
            An error occurred while processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/purchaseReservedInstanceOffering:
    post:
      operationId: PurchaseReservedElasticsearchInstanceOffering
      description: |-
        Allows you to purchase reserved Elasticsearch instances.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ReservedElasticsearchInstanceOfferingId:
                  $ref: '#/components/schemas/GUID'
                ReservationName:
                  $ref: '#/components/schemas/ReservationToken'
                InstanceCount:
                  $ref: '#/components/schemas/InstanceCount'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /2015-01-01/es/ccs/inboundConnection/{CrossClusterSearchConnectionId}/reject:
    put:
      operationId: RejectInboundCrossClusterSearchConnection
      description: |-
        Allows the destination domain owner to reject an inbound cross-cluster search connection request.
      parameters:
      - name: CrossClusterSearchConnectionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CrossClusterSearchConnectionId'
      responses:
        '200': {}
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/tags-removal:
    post:
      operationId: RemoveTags
      description: |-
        Removes the specified set of tags from the specified Elasticsearch domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ARN:
                  $ref: '#/components/schemas/ARN'
                TagKeys:
                  $ref: '#/components/schemas/StringList'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/domain/{DomainName}/revokeVpcEndpointAccess:
    post:
      operationId: RevokeVpcEndpointAccess
      description: |-
        Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
      parameters:
      - name: DomainName
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DomainName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Account:
                  $ref: '#/components/schemas/AWSAccount'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/serviceSoftwareUpdate/start:
    post:
      operationId: StartElasticsearchServiceSoftwareUpdate
      description: |-
        Schedules a service software update for an Amazon ES domain.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainName:
                  $ref: '#/components/schemas/DomainName'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/packages/update:
    post:
      operationId: UpdatePackage
      description: |-
        Updates a package for use with Amazon ES domains.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                PackageID:
                  $ref: '#/components/schemas/PackageID'
                PackageSource:
                  $ref: '#/components/schemas/PackageSource'
                PackageDescription:
                  $ref: '#/components/schemas/PackageDescription'
                CommitMessage:
                  $ref: '#/components/schemas/CommitMessage'
      responses:
        '200': {}
        '403':
          description: |-
            An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /2015-01-01/es/vpcEndpoints/update:
    post:
      operationId: UpdateVpcEndpoint
      description: |-
        Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                VpcEndpointId:
                  $ref: '#/components/schemas/VpcEndpointId'
                VpcOptions:
                  $ref: '#/components/schemas/VPCOptions'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
  /2015-01-01/es/upgradeDomain:
    post:
      operationId: UpgradeElasticsearchDomain
      description: |-
        Allows you to either upgrade your domain or perform an Upgrade eligibility check to a compatible Elasticsearch version.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DomainName:
                  $ref: '#/components/schemas/DomainName'
                TargetVersion:
                  $ref: '#/components/schemas/ElasticsearchVersionString'
                PerformCheckOnly:
                  $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '400':
          description: |-
            An exception for missing / invalid input fields. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '409':
          description: |-
            An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '500':
          description: |-
            The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalException'
components:
  schemas:
    ARN:
      type: string
    AWSAccount:
      type: string
      pattern: ^[0-9]+$
    AcceptInboundCrossClusterSearchConnectionRequest:
      type: object
      properties:
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: The id of the inbound connection that you want to accept.
      required:
      - CrossClusterSearchConnectionId
      description: Container for the parameters to the `AcceptInboundCrossClusterSearchConnection`
        operation.
    AcceptInboundCrossClusterSearchConnectionResponse:
      type: object
      properties:
        CrossClusterSearchConnection:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnection'
          description: Specifies the `InboundCrossClusterSearchConnection` of accepted
            inbound connection.
      description: The result of a `AcceptInboundCrossClusterSearchConnection` operation.
        Contains details of accepted inbound connection.
    AccessDeniedException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An error occurred because user does not have permissions to access
        the resource. Returns HTTP status code 403.
    AccessPoliciesStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: The access policy configured for the Elasticsearch domain.
            Access policies may be resource-based, IP-based, or IAM-based. See [ Configuring
            Access Policies](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-access-policies)for
            more information.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: The status of the access policy for the Elasticsearch domain.
            See `OptionStatus` for the status information that's included.
      required:
      - Options
      - Status
      description: The configured access rules for the domain's document and search
        endpoints, and the current status of those rules.
    AddTagsRequest:
      type: object
      properties:
        ARN:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Specify the `ARN` for which you want to add the tags.
        TagList:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: List of `Tag` that need to be added for the Elasticsearch domain.
      required:
      - ARN
      - TagList
      description: Container for the parameters to the `AddTags` operation. Specify
        the tags that you want to attach to the Elasticsearch domain.
    AdditionalLimit:
      type: object
      properties:
        LimitName:
          allOf:
          - $ref: '#/components/schemas/LimitName'
          description: "Name of Additional Limit is specific to a given InstanceType\
            \ and for each of it's ` InstanceRole ` etc.  \nAttributes and their details:\
            \  \n\n  * MaximumNumberOfDataNodesSupported\nThis attribute will be present\
            \ in Master node only to specify how much data nodes upto which given\
            \ ` ESPartitionInstanceType ` can support as master node.\n\n  * MaximumNumberOfDataNodesWithoutMasterNode\n\
            This attribute will be present in Data node only to specify how much data\
            \ nodes of given ` ESPartitionInstanceType ` upto which you don't need\
            \ any master nodes to govern them."
        LimitValues:
          allOf:
          - $ref: '#/components/schemas/LimitValueList'
          description: Value for given ` AdditionalLimit$LimitName ` .
      description: List of limits that are specific to a given InstanceType and for
        each of it's ` InstanceRole ` .
    AdditionalLimitList:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalLimit'
    AdvancedOptions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
      description: "<p> Exposes select native Elasticsearch configuration values from\
        \ <code>elasticsearch.yml</code>.  Currently, the following advanced options\
        \ are available:</p>\n       <ul>\n           <li>Option to allow references\
        \ to indices in an HTTP request body.  Must be <code>false</code> when configuring\
        \ access to individual sub-resources.  By default, the value is <code>true</code>.\n\
        \               See <a href=\"http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options\"\
        \ target=\"_blank\">Configuration Advanced Options</a> for more information.</li>\n\
        \           <li>Option to specify the percentage of heap space that is allocated\
        \ to field data. By default, this setting is unbounded.</li>\n       </ul>\n\
        \       <p>For more information, see <a href=\"http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options\"\
        >Configuring Advanced Options</a>.</p>"
    AdvancedOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/AdvancedOptions'
          description: Specifies the status of advanced options for the specified
            Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of `OptionStatus` for advanced options
            for the specified Elasticsearch domain.
      required:
      - Options
      - Status
      description: "Status of the advanced options for the specified Elasticsearch\
        \ domain. Currently, the following advanced options are available:\n\n  *\
        \ Option to allow references to indices in an HTTP request body. Must be `false`\
        \ when configuring access to individual sub-resources. By default, the value\
        \ is `true`. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options)\
        \ for more information.\n  * Option to specify the percentage of heap space\
        \ that is allocated to field data. By default, this setting is unbounded.\n\
        \nFor more information, see [Configuring Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options)."
    AdvancedSecurityOptions:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if advanced security is enabled.
        InternalUserDatabaseEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if the internal user database is enabled.
        SAMLOptions:
          allOf:
          - $ref: '#/components/schemas/SAMLOptionsOutput'
          description: Describes the SAML application configured for a domain.
        AnonymousAuthDisableDate:
          allOf:
          - $ref: '#/components/schemas/DisableTimestamp'
          description: Specifies the Anonymous Auth Disable Date when Anonymous Auth
            is enabled.
        AnonymousAuthEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if Anonymous auth is enabled. Anonymous auth can be enabled
            only when AdvancedSecurity is enabled on existing domains.
      description: 'Specifies the advanced security configuration: whether advanced
        security is enabled, whether the internal database option is enabled.'
    AdvancedSecurityOptionsInput:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if advanced security is enabled.
        InternalUserDatabaseEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if the internal user database is enabled.
        MasterUserOptions:
          allOf:
          - $ref: '#/components/schemas/MasterUserOptions'
          description: 'Credentials for the master user: username and password, ARN,
            or both.'
        SAMLOptions:
          allOf:
          - $ref: '#/components/schemas/SAMLOptionsInput'
          description: Specifies the SAML application configuration for the domain.
        AnonymousAuthEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if Anonymous auth is enabled. Anonymous auth can be enabled
            only when AdvancedSecurity is enabled on existing domains.
      description: 'Specifies the advanced security configuration: whether advanced
        security is enabled, whether the internal database option is enabled, master
        username and password (if internal database is enabled), and master user ARN
        (if IAM is enabled).'
    AdvancedSecurityOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/AdvancedSecurityOptions'
          description: Specifies advanced security options for the specified Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Status of the advanced security options for the specified Elasticsearch
            domain.
      required:
      - Options
      - Status
      description: Specifies the status of advanced security options for the specified
        Elasticsearch domain.
    AssociatePackageRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Internal ID of the package that you want to associate with
            a domain. Use `DescribePackages` to find this value.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Name of the domain that you want to associate the package with.
      required:
      - PackageID
      - DomainName
      description: Container for request parameters to ` AssociatePackage ` operation.
    AssociatePackageResponse:
      type: object
      properties:
        DomainPackageDetails:
          allOf:
          - $ref: '#/components/schemas/DomainPackageDetails'
          description: '`DomainPackageDetails`'
      description: Container for response returned by ` AssociatePackage ` operation.
    AuthorizeVpcEndpointAccessRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the OpenSearch Service domain to provide access
            to.
        Account:
          allOf:
          - $ref: '#/components/schemas/AWSAccount'
          description: The account ID to grant access to.
      required:
      - DomainName
      - Account
      description: Container for request parameters to the `AuthorizeVpcEndpointAccess`
        operation. Specifies the account to be permitted to manage VPC endpoints against
        the domain.
    AuthorizeVpcEndpointAccessResponse:
      type: object
      properties:
        AuthorizedPrincipal:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipal'
          description: Information about the account or service that was provided
            access to the domain.
      required:
      - AuthorizedPrincipal
      description: Container for response parameters to the `AuthorizeVpcEndpointAccess`
        operation. Contains the account ID and the type of the account being authorized
        to access the VPC endpoint.
    AuthorizedPrincipal:
      type: object
      properties:
        PrincipalType:
          allOf:
          - $ref: '#/components/schemas/PrincipalType'
          description: The type of principal.
        Principal:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The IAM principal that is allowed access to the domain.
      description: Information about an account or service that has access to an Amazon
        OpenSearch Service domain through the use of an interface VPC endpoint.
    AuthorizedPrincipalList:
      type: array
      items:
        $ref: '#/components/schemas/AuthorizedPrincipal'
    AutoTune:
      type: object
      properties:
        AutoTuneType:
          allOf:
          - $ref: '#/components/schemas/AutoTuneType'
          description: Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION.
        AutoTuneDetails:
          allOf:
          - $ref: '#/components/schemas/AutoTuneDetails'
          description: Specifies details of the Auto-Tune action. See the [Developer
            Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
      description: Specifies Auto-Tune type and Auto-Tune action details.
    AutoTuneDate:
      type: string
      format: date-time
      description: <p>Specifies timestamp for the Auto-Tune action scheduled for the
        domain. </p>
    AutoTuneDesiredState:
      type: string
      enum:
      - ENABLED
      - DISABLED
      description: <p>Specifies the Auto-Tune desired state. Valid values are ENABLED,
        DISABLED.</p>
    AutoTuneDetails:
      type: object
      properties:
        ScheduledAutoTuneDetails:
          $ref: '#/components/schemas/ScheduledAutoTuneDetails'
      description: Specifies details of the Auto-Tune action. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
        for more information.
    AutoTuneList:
      type: array
      items:
        $ref: '#/components/schemas/AutoTune'
    AutoTuneMaintenanceSchedule:
      type: object
      properties:
        StartAt:
          allOf:
          - $ref: '#/components/schemas/StartAt'
          description: Specifies timestamp at which Auto-Tune maintenance schedule
            start.
        Duration:
          allOf:
          - $ref: '#/components/schemas/Duration'
          description: 'Specifies maintenance schedule duration: duration value and
            duration unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.'
        CronExpressionForRecurrence:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies cron expression for a recurring maintenance schedule.
            See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
      description: Specifies Auto-Tune maitenance schedule. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
        for more information.
    AutoTuneMaintenanceScheduleList:
      type: array
      items:
        $ref: '#/components/schemas/AutoTuneMaintenanceSchedule'
    AutoTuneOptions:
      type: object
      properties:
        DesiredState:
          allOf:
          - $ref: '#/components/schemas/AutoTuneDesiredState'
          description: Specifies the Auto-Tune desired state. Valid values are ENABLED,
            DISABLED.
        RollbackOnDisable:
          allOf:
          - $ref: '#/components/schemas/RollbackOnDisable'
          description: Specifies the rollback state while disabling Auto-Tune for
            the domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.
        MaintenanceSchedules:
          allOf:
          - $ref: '#/components/schemas/AutoTuneMaintenanceScheduleList'
          description: Specifies list of maitenance schedules. See the [Developer
            Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
      description: 'Specifies the Auto-Tune options: the Auto-Tune desired state for
        the domain, rollback state when disabling Auto-Tune options and list of maintenance
        schedules.'
    AutoTuneOptionsInput:
      type: object
      properties:
        DesiredState:
          allOf:
          - $ref: '#/components/schemas/AutoTuneDesiredState'
          description: Specifies the Auto-Tune desired state. Valid values are ENABLED,
            DISABLED.
        MaintenanceSchedules:
          allOf:
          - $ref: '#/components/schemas/AutoTuneMaintenanceScheduleList'
          description: Specifies list of maitenance schedules. See the [Developer
            Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
      description: 'Specifies the Auto-Tune options: the Auto-Tune desired state for
        the domain and list of maintenance schedules.'
    AutoTuneOptionsOutput:
      type: object
      properties:
        State:
          allOf:
          - $ref: '#/components/schemas/AutoTuneState'
          description: Specifies the `AutoTuneState` for the Elasticsearch domain.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the error message while enabling or disabling the
            Auto-Tune.
      description: 'Specifies the Auto-Tune options: the Auto-Tune desired state for
        the domain and list of maintenance schedules.'
    AutoTuneOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/AutoTuneOptions'
          description: Specifies Auto-Tune options for the specified Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/AutoTuneStatus'
          description: Specifies Status of the Auto-Tune options for the specified
            Elasticsearch domain.
      description: Specifies the status of Auto-Tune options for the specified Elasticsearch
        domain.
    AutoTuneState:
      type: string
      enum:
      - ENABLED
      - DISABLED
      - ENABLE_IN_PROGRESS
      - DISABLE_IN_PROGRESS
      - DISABLED_AND_ROLLBACK_SCHEDULED
      - DISABLED_AND_ROLLBACK_IN_PROGRESS
      - DISABLED_AND_ROLLBACK_COMPLETE
      - DISABLED_AND_ROLLBACK_ERROR
      - ERROR
      description: <p>Specifies the Auto-Tune state for the Elasticsearch domain.
        For valid states see the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html"
        target="_blank">Developer Guide</a>.</p>
    AutoTuneStatus:
      type: object
      properties:
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: Timestamp which tells Auto-Tune options creation date .
        UpdateDate:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: Timestamp which tells Auto-Tune options last updated time.
        UpdateVersion:
          allOf:
          - $ref: '#/components/schemas/UIntValue'
          description: Specifies the Auto-Tune options latest version.
        State:
          allOf:
          - $ref: '#/components/schemas/AutoTuneState'
          description: Specifies the `AutoTuneState` for the Elasticsearch domain.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Specifies the error message while enabling or disabling the
            Auto-Tune options.
        PendingDeletion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the Elasticsearch domain is being deleted.
      required:
      - CreationDate
      - UpdateDate
      - State
      description: Provides the current status of the Auto-Tune options.
    AutoTuneType:
      type: string
      enum:
      - SCHEDULED_ACTION
      description: <p>Specifies Auto-Tune type. Valid value is SCHEDULED_ACTION. </p>
    BackendRole:
      type: string
      minLength: 1
      maxLength: 256
    BaseException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An error occurred while processing the request.
    Boolean:
      type: boolean
    CancelDomainConfigChangeRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Name of the OpenSearch Service domain configuration request
            to cancel.
        DryRun:
          allOf:
          - $ref: '#/components/schemas/DryRun'
          description: When set to **True** , returns the list of change IDs and properties
            that will be cancelled without actually cancelling the change.
      required:
      - DomainName
      description: Container for parameters of the `CancelDomainConfigChange` operation.
    CancelDomainConfigChangeResponse:
      type: object
      properties:
        DryRun:
          allOf:
          - $ref: '#/components/schemas/DryRun'
          description: Whether or not the request was a dry run. If **True** , the
            changes were not actually cancelled.
        CancelledChangeIds:
          allOf:
          - $ref: '#/components/schemas/GUIDList'
          description: The unique identifiers of the changes that were cancelled.
        CancelledChangeProperties:
          allOf:
          - $ref: '#/components/schemas/CancelledChangePropertyList'
          description: The domain change properties that were cancelled.
      description: Contains the details of the cancelled domain config change.
    CancelElasticsearchServiceSoftwareUpdateRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that you want to stop the latest service
            software update on.
      required:
      - DomainName
      description: Container for the parameters to the `CancelElasticsearchServiceSoftwareUpdate`
        operation. Specifies the name of the Elasticsearch domain that you wish to
        cancel a service software update on.
    CancelElasticsearchServiceSoftwareUpdateResponse:
      type: object
      properties:
        ServiceSoftwareOptions:
          allOf:
          - $ref: '#/components/schemas/ServiceSoftwareOptions'
          description: The current status of the Elasticsearch service software update.
      description: The result of a `CancelElasticsearchServiceSoftwareUpdate` operation.
        Contains the status of the update.
    CancelledChangeProperty:
      type: object
      properties:
        PropertyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the property whose change was cancelled.
        CancelledValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The pending value of the property that was cancelled. This
            would have been the eventual value of the property if the chance had not
            been cancelled.
        ActiveValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current value of the property, after the change was cancelled.
      description: A property change that was cancelled for an Amazon OpenSearch Service
        domain.
    CancelledChangePropertyList:
      type: array
      items:
        $ref: '#/components/schemas/CancelledChangeProperty'
    ChangeProgressDetails:
      type: object
      properties:
        ChangeId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The unique change identifier associated with a specific domain
            configuration change.
        Message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: Contains an optional message associated with the domain configuration
            change.
        ConfigChangeStatus:
          allOf:
          - $ref: '#/components/schemas/ConfigChangeStatus'
          description: The current status of the configuration change.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: The time that the configuration change was initiated, in Universal
            Coordinated Time (UTC).
        LastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: The last time that the configuration change was updated.
        InitiatedBy:
          allOf:
          - $ref: '#/components/schemas/InitiatedBy'
          description: The IAM principal who initiated the configuration change.
      description: Specifies change details of the domain configuration change.
    ChangeProgressStage:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressStageName'
          description: The name of the specific progress stage.
        Status:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressStageStatus'
          description: The overall status of a specific progress stage.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the progress stage.
        LastUpdated:
          allOf:
          - $ref: '#/components/schemas/LastUpdated'
          description: The last updated timestamp of the progress stage.
      description: A progress stage details of a specific domain configuration change.
    ChangeProgressStageList:
      type: array
      items:
        $ref: '#/components/schemas/ChangeProgressStage'
      description: <p>The list of progress stages of a specific domain configuration
        change.</p>
    ChangeProgressStageName:
      type: string
      minLength: 1
      maxLength: 64
    ChangeProgressStageStatus:
      type: string
      minLength: 1
      maxLength: 256
    ChangeProgressStatusDetails:
      type: object
      properties:
        ChangeId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The unique change identifier associated with a specific domain
            configuration change.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: The time at which the configuration change is made on the domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OverallChangeStatus'
          description: 'The overall status of the domain configuration change. This
            field can take the following values: `PENDING`, `PROCESSING`, `COMPLETED`
            and `FAILED`'
        PendingProperties:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The list of properties involved in the domain configuration
            change that are still in pending.
        CompletedProperties:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The list of properties involved in the domain configuration
            change that are completed.
        TotalNumberOfStages:
          allOf:
          - $ref: '#/components/schemas/TotalNumberOfStages'
          description: The total number of stages required for the configuration change.
        ChangeProgressStages:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressStageList'
          description: The specific stages that the domain is going through to perform
            the configuration change.
        ConfigChangeStatus:
          allOf:
          - $ref: '#/components/schemas/ConfigChangeStatus'
          description: The current status of the configuration change.
        LastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: The last time that the status of the configuration change was
            updated.
        InitiatedBy:
          allOf:
          - $ref: '#/components/schemas/InitiatedBy'
          description: The IAM principal who initiated the configuration change.
      description: The progress details of a specific domain configuration change.
    ClientToken:
      type: string
      minLength: 1
      maxLength: 64
    CloudWatchLogsLogGroupArn:
      type: string
    CognitoOptions:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies the option to enable Cognito for Kibana authentication.
        UserPoolId:
          allOf:
          - $ref: '#/components/schemas/UserPoolId'
          description: Specifies the Cognito user pool ID for Kibana authentication.
        IdentityPoolId:
          allOf:
          - $ref: '#/components/schemas/IdentityPoolId'
          description: Specifies the Cognito identity pool ID for Kibana authentication.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: Specifies the role ARN that provides Elasticsearch permissions
            for accessing Cognito resources.
      description: Options to specify the Cognito user and identity pools for Kibana
        authentication. For more information, see [Amazon Cognito Authentication for
        Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
    CognitoOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/CognitoOptions'
          description: Specifies the Cognito options for the specified Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the Cognito options for the specified
            Elasticsearch domain.
      required:
      - Options
      - Status
      description: Status of the Cognito options for the specified Elasticsearch domain.
    ColdStorageOptions:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Enable cold storage option. Accepted values true or false
      required:
      - Enabled
      description: Specifies the configuration for cold storage options such as enabled
    CommitMessage:
      type: string
      minLength: 0
      maxLength: 160
    CompatibleElasticsearchVersionsList:
      type: array
      items:
        $ref: '#/components/schemas/CompatibleVersionsMap'
    CompatibleVersionsMap:
      type: object
      properties:
        SourceVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: The current version of Elasticsearch on which a domain is.
        TargetVersions:
          $ref: '#/components/schemas/ElasticsearchVersionList'
      description: A map from an ` ElasticsearchVersion ` to a list of compatible
        ` ElasticsearchVersion ` s to which the domain can be upgraded.
    ConfigChangeStatus:
      type: string
      enum:
      - Pending
      - Initializing
      - Validating
      - ValidationFailed
      - ApplyingChanges
      - Completed
      - PendingUserInput
      - Cancelled
    ConflictException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An error occurred because the client attempts to remove a resource
        that is currently in use. Returns HTTP status code 409.
    ConnectionAlias:
      type: string
      minLength: 0
      maxLength: 20
    CreateElasticsearchDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: 'The name of the Elasticsearch domain that you are creating.
            Domain names are unique across the domains owned by an account within
            an AWS region. Domain names must start with a lowercase letter and can
            contain the following characters: a-z (lowercase), 0-9, and - (hyphen).'
        ElasticsearchVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: String of format X.Y to specify version for the Elasticsearch
            domain eg. "1.5" or "2.3". For more information, see [Creating Elasticsearch
            Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains)
            in the _Amazon Elasticsearch Service Developer Guide_.
        ElasticsearchClusterConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchClusterConfig'
          description: Configuration options for an Elasticsearch domain. Specifies
            the instance type and number of instances in the domain cluster.
        EBSOptions:
          allOf:
          - $ref: '#/components/schemas/EBSOptions'
          description: Options to enable, disable and specify the type and size of
            EBS storage volumes.
        AccessPolicies:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: IAM access policy as a JSON-formatted string.
        SnapshotOptions:
          allOf:
          - $ref: '#/components/schemas/SnapshotOptions'
          description: Option to set time, in UTC format, of the daily automated snapshot.
            Default value is 0 hours.
        VPCOptions:
          allOf:
          - $ref: '#/components/schemas/VPCOptions'
          description: Options to specify the subnets and security groups for VPC
            endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc)
            in _VPC Endpoints for Amazon Elasticsearch Service Domains_
        CognitoOptions:
          allOf:
          - $ref: '#/components/schemas/CognitoOptions'
          description: Options to specify the Cognito user and identity pools for
            Kibana authentication. For more information, see [Amazon Cognito Authentication
            for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        EncryptionAtRestOptions:
          allOf:
          - $ref: '#/components/schemas/EncryptionAtRestOptions'
          description: Specifies the Encryption At Rest Options.
        NodeToNodeEncryptionOptions:
          allOf:
          - $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
          description: Specifies the NodeToNodeEncryptionOptions.
        AdvancedOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedOptions'
          description: Option to allow references to indices in an HTTP request body.
            Must be `false` when configuring access to individual sub-resources. By
            default, the value is `true`. See [Configuration Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options)
            for more information.
        LogPublishingOptions:
          allOf:
          - $ref: '#/components/schemas/LogPublishingOptions'
          description: Map of `LogType` and `LogPublishingOption`, each containing
            options to publish a given type of Elasticsearch log.
        DomainEndpointOptions:
          allOf:
          - $ref: '#/components/schemas/DomainEndpointOptions'
          description: Options to specify configuration that will be applied to the
            domain endpoint.
        AdvancedSecurityOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedSecurityOptionsInput'
          description: Specifies advanced security options.
        AutoTuneOptions:
          allOf:
          - $ref: '#/components/schemas/AutoTuneOptionsInput'
          description: Specifies Auto-Tune options.
        TagList:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: A list of `Tag` added during domain creation.
      required:
      - DomainName
    CreateElasticsearchDomainResponse:
      type: object
      properties:
        DomainStatus:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainStatus'
          description: The status of the newly created Elasticsearch domain.
      description: The result of a `CreateElasticsearchDomain` operation. Contains
        the status of the newly created Elasticsearch domain.
    CreateOutboundCrossClusterSearchConnectionRequest:
      type: object
      properties:
        SourceDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the source Elasticsearch
            domain.
        DestinationDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the destination Elasticsearch
            domain.
        ConnectionAlias:
          allOf:
          - $ref: '#/components/schemas/ConnectionAlias'
          description: Specifies the connection alias that will be used by the customer
            for this connection.
      required:
      - SourceDomainInfo
      - DestinationDomainInfo
      - ConnectionAlias
      description: Container for the parameters to the `CreateOutboundCrossClusterSearchConnection`
        operation.
    CreateOutboundCrossClusterSearchConnectionResponse:
      type: object
      properties:
        SourceDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the source Elasticsearch
            domain.
        DestinationDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the destination Elasticsearch
            domain.
        ConnectionAlias:
          allOf:
          - $ref: '#/components/schemas/ConnectionAlias'
          description: Specifies the connection alias provided during the create connection
            request.
        ConnectionStatus:
          allOf:
          - $ref: '#/components/schemas/OutboundCrossClusterSearchConnectionStatus'
          description: Specifies the `OutboundCrossClusterSearchConnectionStatus`
            for the newly created connection.
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: Unique id for the created outbound connection, which is used
            for subsequent operations on connection.
      description: The result of a `CreateOutboundCrossClusterSearchConnection` request.
        Contains the details of the newly created cross-cluster search connection.
    CreatePackageRequest:
      type: object
      properties:
        PackageName:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: Unique identifier for the package.
        PackageType:
          allOf:
          - $ref: '#/components/schemas/PackageType'
          description: Type of package. Currently supports only TXT-DICTIONARY.
        PackageDescription:
          allOf:
          - $ref: '#/components/schemas/PackageDescription'
          description: Description of the package.
        PackageSource:
          allOf:
          - $ref: '#/components/schemas/PackageSource'
          description: The customer S3 location `PackageSource` for importing the
            package.
      required:
      - PackageName
      - PackageType
      - PackageSource
      description: Container for request parameters to ` CreatePackage ` operation.
    CreatePackageResponse:
      type: object
      properties:
        PackageDetails:
          allOf:
          - $ref: '#/components/schemas/PackageDetails'
          description: Information about the package `PackageDetails`.
      description: Container for response returned by ` CreatePackage ` operation.
    CreateVpcEndpointRequest:
      type: object
      properties:
        DomainArn:
          allOf:
          - $ref: '#/components/schemas/DomainArn'
          description: The Amazon Resource Name (ARN) of the domain to grant access
            to.
        VpcOptions:
          allOf:
          - $ref: '#/components/schemas/VPCOptions'
          description: Options to specify the subnets and security groups for the
            endpoint.
        ClientToken:
          allOf:
          - $ref: '#/components/schemas/ClientToken'
          description: Unique, case-sensitive identifier to ensure idempotency of
            the request.
      required:
      - DomainArn
      - VpcOptions
      description: Container for the parameters to the `CreateVpcEndpointRequest`
        operation.
    CreateVpcEndpointResponse:
      type: object
      properties:
        VpcEndpoint:
          allOf:
          - $ref: '#/components/schemas/VpcEndpoint'
          description: Information about the newly created VPC endpoint.
      required:
      - VpcEndpoint
      description: Container for response parameters to the `CreateVpcEndpoint` operation.
        Contains the configuration and status of the VPC Endpoint being created.
    CreatedAt:
      type: string
      format: date-time
    CrossClusterSearchConnectionId:
      type: string
    CrossClusterSearchConnectionStatusMessage:
      type: string
    DeleteElasticsearchDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the Elasticsearch domain that you want to permanently
            delete.
      required:
      - DomainName
      description: Container for the parameters to the `DeleteElasticsearchDomain`
        operation. Specifies the name of the Elasticsearch domain that you want to
        delete.
    DeleteElasticsearchDomainResponse:
      type: object
      properties:
        DomainStatus:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainStatus'
          description: The status of the Elasticsearch domain being deleted.
      description: The result of a `DeleteElasticsearchDomain` request. Contains the
        status of the pending deletion, or no status if the domain and all of its
        resources have been deleted.
    DeleteInboundCrossClusterSearchConnectionRequest:
      type: object
      properties:
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: The id of the inbound connection that you want to permanently
            delete.
      required:
      - CrossClusterSearchConnectionId
      description: Container for the parameters to the `DeleteInboundCrossClusterSearchConnection`
        operation.
    DeleteInboundCrossClusterSearchConnectionResponse:
      type: object
      properties:
        CrossClusterSearchConnection:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnection'
          description: Specifies the `InboundCrossClusterSearchConnection` of deleted
            inbound connection.
      description: The result of a `DeleteInboundCrossClusterSearchConnection` operation.
        Contains details of deleted inbound connection.
    DeleteOutboundCrossClusterSearchConnectionRequest:
      type: object
      properties:
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: The id of the outbound connection that you want to permanently
            delete.
      required:
      - CrossClusterSearchConnectionId
      description: Container for the parameters to the `DeleteOutboundCrossClusterSearchConnection`
        operation.
    DeleteOutboundCrossClusterSearchConnectionResponse:
      type: object
      properties:
        CrossClusterSearchConnection:
          allOf:
          - $ref: '#/components/schemas/OutboundCrossClusterSearchConnection'
          description: Specifies the `OutboundCrossClusterSearchConnection` of deleted
            outbound connection.
      description: The result of a `DeleteOutboundCrossClusterSearchConnection` operation.
        Contains details of deleted outbound connection.
    DeletePackageRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Internal ID of the package that you want to delete. Use `DescribePackages`
            to find this value.
      required:
      - PackageID
      description: Container for request parameters to ` DeletePackage ` operation.
    DeletePackageResponse:
      type: object
      properties:
        PackageDetails:
          allOf:
          - $ref: '#/components/schemas/PackageDetails'
          description: '`PackageDetails`'
      description: Container for response parameters to ` DeletePackage ` operation.
    DeleteVpcEndpointRequest:
      type: object
      properties:
        VpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The unique identifier of the endpoint to be deleted.
      required:
      - VpcEndpointId
      description: Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
    DeleteVpcEndpointResponse:
      type: object
      properties:
        VpcEndpointSummary:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointSummary'
          description: Information about the deleted endpoint, including its current
            status (`DELETING` or `DELETE_FAILED`).
      required:
      - VpcEndpointSummary
      description: Container for response parameters to the `DeleteVpcEndpoint` operation.
        Contains the summarized detail of the VPC Endpoint being deleted.
    DeploymentCloseDateTimeStamp:
      type: string
      format: date-time
    DeploymentStatus:
      type: string
      enum:
      - PENDING_UPDATE
      - IN_PROGRESS
      - COMPLETED
      - NOT_ELIGIBLE
      - ELIGIBLE
    DeploymentType:
      type: string
      minLength: 2
      maxLength: 128
    DescribeDomainAutoTunesRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Specifies the domain name for which you want Auto-Tune action
            details.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. If
            not specified, defaults to 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken is sent in case the earlier API call results contain
            the NextToken. It is used for pagination.
      required:
      - DomainName
      description: Container for the parameters to the `DescribeDomainAutoTunes` operation.
    DescribeDomainAutoTunesResponse:
      type: object
      properties:
        AutoTunes:
          allOf:
          - $ref: '#/components/schemas/AutoTuneList'
          description: Specifies the list of setting adjustments that Auto-Tune has
            made to the domain. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Specifies an identifier to allow retrieval of paginated results.
      description: The result of `DescribeDomainAutoTunes` request. See the [Developer
        Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
        for more information.
    DescribeDomainChangeProgressRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The domain you want to get the progress information about.
        ChangeId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The specific change ID for which you want to get progress information.
            This is an optional parameter. If omitted, the service returns information
            about the most recent configuration change.
      required:
      - DomainName
      description: Container for the parameters to the `DescribeDomainChangeProgress`
        operation. Specifies the domain name and optional change specific identity
        for which you want progress information.
    DescribeDomainChangeProgressResponse:
      type: object
      properties:
        ChangeProgressStatus:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressStatusDetails'
          description: Progress information for the configuration change that is requested
            in the `DescribeDomainChangeProgress` request.
      description: The result of a `DescribeDomainChangeProgress` request. Contains
        the progress information of the requested domain change.
    DescribeElasticsearchDomainConfigRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The Elasticsearch domain that you want to get information about.
      required:
      - DomainName
      description: Container for the parameters to the `DescribeElasticsearchDomainConfig`
        operation. Specifies the domain name for which you want configuration information.
    DescribeElasticsearchDomainConfigResponse:
      type: object
      properties:
        DomainConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainConfig'
          description: The configuration information of the domain requested in the
            `DescribeElasticsearchDomainConfig` request.
      required:
      - DomainConfig
      description: The result of a `DescribeElasticsearchDomainConfig` request. Contains
        the configuration information of the requested domain.
    DescribeElasticsearchDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the Elasticsearch domain for which you want information.
      required:
      - DomainName
      description: Container for the parameters to the `DescribeElasticsearchDomain`
        operation.
    DescribeElasticsearchDomainResponse:
      type: object
      properties:
        DomainStatus:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainStatus'
          description: The current status of the Elasticsearch domain.
      required:
      - DomainStatus
      description: The result of a `DescribeElasticsearchDomain` request. Contains
        the status of the domain specified in the request.
    DescribeElasticsearchDomainsRequest:
      type: object
      properties:
        DomainNames:
          allOf:
          - $ref: '#/components/schemas/DomainNameList'
          description: The Elasticsearch domains for which you want information.
      required:
      - DomainNames
      description: Container for the parameters to the `DescribeElasticsearchDomains`
        operation. By default, the API returns the status of all Elasticsearch domains.
    DescribeElasticsearchDomainsResponse:
      type: object
      properties:
        DomainStatusList:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainStatusList'
          description: The status of the domains requested in the `DescribeElasticsearchDomains`
            request.
      required:
      - DomainStatusList
      description: The result of a `DescribeElasticsearchDomains` request. Contains
        the status of the specified domains or all domains owned by the account.
    DescribeElasticsearchInstanceTypeLimitsRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: DomainName represents the name of the Domain that we are trying
            to modify. This should be present only if we are querying for Elasticsearch
            ` Limits ` for existing domain.
        InstanceType:
          allOf:
          - $ref: '#/components/schemas/ESPartitionInstanceType'
          description: The instance type for an Elasticsearch cluster for which Elasticsearch
            ` Limits ` are needed.
        ElasticsearchVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: Version of Elasticsearch for which ` Limits ` are needed.
      required:
      - InstanceType
      - ElasticsearchVersion
      description: Container for the parameters to ` DescribeElasticsearchInstanceTypeLimits
        ` operation.
    DescribeElasticsearchInstanceTypeLimitsResponse:
      type: object
      properties:
        LimitsByRole:
          $ref: '#/components/schemas/LimitsByRole'
      description: Container for the parameters received from ` DescribeElasticsearchInstanceTypeLimits
        ` operation.
    DescribeInboundCrossClusterSearchConnectionsRequest:
      type: object
      properties:
        Filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "A list of filters used to match properties for inbound cross-cluster\
            \ search connection. Available `Filter` names for this operation are:\n\
            \n  * cross-cluster-search-connection-id\n  * source-domain-info.domain-name\n\
            \  * source-domain-info.owner-id\n  * source-domain-info.region\n  * destination-domain-info.domain-name"
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. If
            not specified, defaults to 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken is sent in case the earlier API call results contain
            the NextToken. It is used for pagination.
      description: Container for the parameters to the `DescribeInboundCrossClusterSearchConnections`
        operation.
    DescribeInboundCrossClusterSearchConnectionsResponse:
      type: object
      properties:
        CrossClusterSearchConnections:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnections'
          description: Consists of list of `InboundCrossClusterSearchConnection` matching
            the specified filter criteria.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If more results are available and NextToken is present, make
            the next request to the same API with the received NextToken to paginate
            the remaining results.
      description: The result of a `DescribeInboundCrossClusterSearchConnections`
        request. Contains the list of connections matching the filter criteria.
    DescribeOutboundCrossClusterSearchConnectionsRequest:
      type: object
      properties:
        Filters:
          allOf:
          - $ref: '#/components/schemas/FilterList'
          description: "A list of filters used to match properties for outbound cross-cluster\
            \ search connection. Available `Filter` names for this operation are:\n\
            \n  * cross-cluster-search-connection-id\n  * destination-domain-info.domain-name\n\
            \  * destination-domain-info.owner-id\n  * destination-domain-info.region\n\
            \  * source-domain-info.domain-name"
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. If
            not specified, defaults to 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken is sent in case the earlier API call results contain
            the NextToken. It is used for pagination.
      description: Container for the parameters to the `DescribeOutboundCrossClusterSearchConnections`
        operation.
    DescribeOutboundCrossClusterSearchConnectionsResponse:
      type: object
      properties:
        CrossClusterSearchConnections:
          allOf:
          - $ref: '#/components/schemas/OutboundCrossClusterSearchConnections'
          description: Consists of list of `OutboundCrossClusterSearchConnection`
            matching the specified filter criteria.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: If more results are available and NextToken is present, make
            the next request to the same API with the received NextToken to paginate
            the remaining results.
      description: The result of a `DescribeOutboundCrossClusterSearchConnections`
        request. Contains the list of connections matching the filter criteria.
    DescribePackagesFilter:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/DescribePackagesFilterName'
          description: Any field from `PackageDetails`.
        Value:
          allOf:
          - $ref: '#/components/schemas/DescribePackagesFilterValues'
          description: A non-empty list of values for the specified field.
      description: Filter to apply in `DescribePackage` response.
    DescribePackagesFilterList:
      type: array
      items:
        $ref: '#/components/schemas/DescribePackagesFilter'
      description: <p>A list of <code>DescribePackagesFilter</code> to filter the
        packages included in a <code>DescribePackages</code> response.</p>
    DescribePackagesFilterName:
      type: string
      enum:
      - PackageID
      - PackageName
      - PackageStatus
    DescribePackagesFilterValue:
      type: string
      pattern: ^[0-9a-zA-Z\*\.\\/\?-]*$
    DescribePackagesFilterValues:
      type: array
      items:
        $ref: '#/components/schemas/DescribePackagesFilterValue'
    DescribePackagesRequest:
      type: object
      properties:
        Filters:
          allOf:
          - $ref: '#/components/schemas/DescribePackagesFilterList'
          description: Only returns packages that match the `DescribePackagesFilterList`
            values.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Limits results to a maximum number of packages.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Used for pagination. Only necessary if a previous API call
            includes a non-null NextToken value. If provided, returns results for
            the next page.
      description: Container for request parameters to ` DescribePackage ` operation.
    DescribePackagesResponse:
      type: object
      properties:
        PackageDetailsList:
          allOf:
          - $ref: '#/components/schemas/PackageDetailsList'
          description: List of `PackageDetails` objects.
        NextToken:
          $ref: '#/components/schemas/String'
      description: Container for response returned by ` DescribePackages ` operation.
    DescribeReservedElasticsearchInstanceOfferingsRequest:
      type: object
      properties:
        ReservedElasticsearchInstanceOfferingId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The offering identifier filter value. Use this parameter to
            show only the available offering that matches the specified reservation
            identifier.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. If
            not specified, defaults to 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken should be sent in case if earlier API call produced
            result containing NextToken. It is used for pagination.
      description: Container for parameters to `DescribeReservedElasticsearchInstanceOfferings`
    DescribeReservedElasticsearchInstanceOfferingsResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Provides an identifier to allow retrieval of paginated results.
        ReservedElasticsearchInstanceOfferings:
          allOf:
          - $ref: '#/components/schemas/ReservedElasticsearchInstanceOfferingList'
          description: List of reserved Elasticsearch instance offerings
      description: Container for results from `DescribeReservedElasticsearchInstanceOfferings`
    DescribeReservedElasticsearchInstancesRequest:
      type: object
      properties:
        ReservedElasticsearchInstanceId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The reserved instance identifier filter value. Use this parameter
            to show only the reservation that matches the specified reserved Elasticsearch
            instance ID.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. If
            not specified, defaults to 100.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken should be sent in case if earlier API call produced
            result containing NextToken. It is used for pagination.
      description: Container for parameters to `DescribeReservedElasticsearchInstances`
    DescribeReservedElasticsearchInstancesResponse:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Provides an identifier to allow retrieval of paginated results.
        ReservedElasticsearchInstances:
          allOf:
          - $ref: '#/components/schemas/ReservedElasticsearchInstanceList'
          description: List of reserved Elasticsearch instances.
      description: Container for results from `DescribeReservedElasticsearchInstances`
    DescribeVpcEndpointsRequest:
      type: object
      properties:
        VpcEndpointIds:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointIdList'
          description: The unique identifiers of the endpoints to get information
            about.
      required:
      - VpcEndpointIds
      description: Container for request parameters to the `DescribeVpcEndpoints`
        operation. Specifies the list of VPC endpoints to be described.
    DescribeVpcEndpointsResponse:
      type: object
      properties:
        VpcEndpoints:
          allOf:
          - $ref: '#/components/schemas/VpcEndpoints'
          description: Information about each requested VPC endpoint.
        VpcEndpointErrors:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointErrorList'
          description: Any errors associated with the request.
      required:
      - VpcEndpoints
      - VpcEndpointErrors
      description: Container for response parameters to the `DescribeVpcEndpoints`
        operation. Returns a list containing configuration details and status of the
        VPC Endpoints as well as a list containing error responses of the endpoints
        that could not be described
    Description:
      type: string
    DisableTimestamp:
      type: string
      format: date-time
    DisabledOperationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An error occured because the client wanted to access a not supported
        operation. Gives http status code of 409.
    DissociatePackageRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Internal ID of the package that you want to associate with
            a domain. Use `DescribePackages` to find this value.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Name of the domain that you want to associate the package with.
      required:
      - PackageID
      - DomainName
      description: Container for request parameters to ` DissociatePackage ` operation.
    DissociatePackageResponse:
      type: object
      properties:
        DomainPackageDetails:
          allOf:
          - $ref: '#/components/schemas/DomainPackageDetails'
          description: '`DomainPackageDetails`'
      description: Container for response returned by ` DissociatePackage ` operation.
    DomainArn:
      type: string
      pattern: ^arn:aws[a-z\-]*:[a-z]+:[a-z0-9\-]+:[0-9]+:domain\/[a-z0-9\-]+$
      minLength: 1
      maxLength: 512
    DomainEndpointOptions:
      type: object
      properties:
        EnforceHTTPS:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify if only HTTPS endpoint should be enabled for the Elasticsearch
            domain.
        TLSSecurityPolicy:
          allOf:
          - $ref: '#/components/schemas/TLSSecurityPolicy'
          description: "Specify the TLS security policy that needs to be applied to\
            \ the HTTPS endpoint of Elasticsearch domain.  \nIt can be one of the\
            \ following values:\n\n  * **Policy-Min-TLS-1-0-2019-07:** TLS security\
            \ policy that supports TLS version 1.0 to TLS version 1.2\n  * **Policy-Min-TLS-1-2-2019-07:**\
            \ TLS security policy that supports only TLS version 1.2\n  * **Policy-Min-TLS-1-2-PFS-2023-10:**\
            \ TLS security policy that supports TLS version 1.2 to TLS version 1.3\
            \ with perfect forward secrecy cipher suites"
        CustomEndpointEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify if custom endpoint should be enabled for the Elasticsearch
            domain.
        CustomEndpoint:
          allOf:
          - $ref: '#/components/schemas/DomainNameFqdn'
          description: Specify the fully qualified domain for your custom endpoint.
        CustomEndpointCertificateArn:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Specify ACM certificate ARN for your custom endpoint.
      description: Options to configure endpoint for the Elasticsearch domain.
    DomainEndpointOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/DomainEndpointOptions'
          description: Options to configure endpoint for the Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: The status of the endpoint options for the Elasticsearch domain.
            See `OptionStatus` for the status information that's included.
      required:
      - Options
      - Status
      description: The configured endpoint options for the domain and their current
        status.
    DomainId:
      type: string
      minLength: 1
      maxLength: 64
    DomainInfo:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Specifies the `DomainName`.
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          description: Specifies the `EngineType` of the domain.
    DomainInfoList:
      type: array
      items:
        $ref: '#/components/schemas/DomainInfo'
      description: <p> Contains the list of Elasticsearch domain information.</p>
    DomainInformation:
      type: object
      properties:
        OwnerId:
          $ref: '#/components/schemas/OwnerId'
        DomainName:
          $ref: '#/components/schemas/DomainName'
        Region:
          $ref: '#/components/schemas/Region'
      required:
      - DomainName
    DomainName:
      type: string
      pattern: ^[a-z][a-z0-9\-]+$
      minLength: 3
      maxLength: 28
    DomainNameFqdn:
      type: string
      pattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$
      minLength: 1
      maxLength: 255
    DomainNameList:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
      description: <p>A list of Elasticsearch domain names.</p>
    DomainPackageDetails:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Internal ID of the package.
        PackageName:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: User specified name of the package.
        PackageType:
          allOf:
          - $ref: '#/components/schemas/PackageType'
          description: Currently supports only TXT-DICTIONARY.
        LastUpdated:
          allOf:
          - $ref: '#/components/schemas/LastUpdated'
          description: Timestamp of the most-recent update to the association status.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Name of the domain you've associated a package with.
        DomainPackageStatus:
          allOf:
          - $ref: '#/components/schemas/DomainPackageStatus'
          description: State of the association. Values are ASSOCIATING/ASSOCIATION_FAILED/ACTIVE/DISSOCIATING/DISSOCIATION_FAILED.
        PackageVersion:
          $ref: '#/components/schemas/PackageVersion'
        ReferencePath:
          allOf:
          - $ref: '#/components/schemas/ReferencePath'
          description: The relative path on Amazon ES nodes, which can be used as
            synonym_path when the package is synonym file.
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Additional information if the package is in an error state.
            Null otherwise.
      description: Information on a package that is associated with a domain.
    DomainPackageDetailsList:
      type: array
      items:
        $ref: '#/components/schemas/DomainPackageDetails'
    DomainPackageStatus:
      type: string
      enum:
      - ASSOCIATING
      - ASSOCIATION_FAILED
      - ACTIVE
      - DISSOCIATING
      - DISSOCIATION_FAILED
    DomainProcessingStatusType:
      type: string
      enum:
      - Creating
      - Active
      - Modifying
      - UpgradingEngineVersion
      - UpdatingServiceSoftware
      - Isolated
      - Deleting
    Double:
      type: number
      format: double
    DryRun:
      type: boolean
    DryRunResults:
      type: object
      properties:
        DeploymentType:
          allOf:
          - $ref: '#/components/schemas/DeploymentType'
          description: Specifies the deployment mechanism through which the update
            shall be applied on the domain. Possible responses are `Blue/Green` (The
            update will require a blue/green deployment.) `DynamicUpdate` (The update
            can be applied in-place without a Blue/Green deployment required.) `Undetermined`
            (The domain is undergoing an update which needs to complete before the
            deployment type can be predicted.) `None` (The configuration change matches
            the current configuration and will not result in any update.)
        Message:
          allOf:
          - $ref: '#/components/schemas/Message'
          description: Contains an optional message associated with the DryRunResults.
    Duration:
      type: object
      properties:
        Value:
          allOf:
          - $ref: '#/components/schemas/DurationValue'
          description: Integer to specify the value of a maintenance schedule duration.
            See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
        Unit:
          allOf:
          - $ref: '#/components/schemas/TimeUnit'
          description: Specifies the unit of a maintenance schedule duration. Valid
            value is HOURS. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
            for more information.
      description: 'Specifies maintenance schedule duration: duration value and duration
        unit. See the [Developer Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
        for more information.'
    DurationValue:
      type: integer
      format: int64
      description: <p> Integer to specify the value of a maintenance schedule duration.
        See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html"
        target="_blank">Developer Guide</a> for more information.</p>
      minimum: 1
      maximum: 24
    EBSOptions:
      type: object
      properties:
        EBSEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether EBS-based storage is enabled.
        VolumeType:
          allOf:
          - $ref: '#/components/schemas/VolumeType'
          description: Specifies the volume type for EBS-based storage.
        VolumeSize:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: Integer to specify the size of an EBS volume.
        Iops:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: Specifies the IOPS for Provisioned IOPS And GP3 EBS volume
            (SSD).
        Throughput:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: Specifies the Throughput for GP3 EBS volume (SSD).
      description: Options to enable, disable, and specify the properties of EBS storage
        volumes. For more information, see [ Configuring EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs).
    EBSOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/EBSOptions'
          description: Specifies the EBS options for the specified Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the EBS options for the specified Elasticsearch
            domain.
      required:
      - Options
      - Status
      description: Status of the EBS options for the specified Elasticsearch domain.
    ESPartitionInstanceType:
      type: string
      enum:
      - m3.medium.elasticsearch
      - m3.large.elasticsearch
      - m3.xlarge.elasticsearch
      - m3.2xlarge.elasticsearch
      - m4.large.elasticsearch
      - m4.xlarge.elasticsearch
      - m4.2xlarge.elasticsearch
      - m4.4xlarge.elasticsearch
      - m4.10xlarge.elasticsearch
      - m5.large.elasticsearch
      - m5.xlarge.elasticsearch
      - m5.2xlarge.elasticsearch
      - m5.4xlarge.elasticsearch
      - m5.12xlarge.elasticsearch
      - r5.large.elasticsearch
      - r5.xlarge.elasticsearch
      - r5.2xlarge.elasticsearch
      - r5.4xlarge.elasticsearch
      - r5.12xlarge.elasticsearch
      - c5.large.elasticsearch
      - c5.xlarge.elasticsearch
      - c5.2xlarge.elasticsearch
      - c5.4xlarge.elasticsearch
      - c5.9xlarge.elasticsearch
      - c5.18xlarge.elasticsearch
      - ultrawarm1.medium.elasticsearch
      - ultrawarm1.large.elasticsearch
      - t2.micro.elasticsearch
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - r3.large.elasticsearch
      - r3.xlarge.elasticsearch
      - r3.2xlarge.elasticsearch
      - r3.4xlarge.elasticsearch
      - r3.8xlarge.elasticsearch
      - i2.xlarge.elasticsearch
      - i2.2xlarge.elasticsearch
      - d2.xlarge.elasticsearch
      - d2.2xlarge.elasticsearch
      - d2.4xlarge.elasticsearch
      - d2.8xlarge.elasticsearch
      - c4.large.elasticsearch
      - c4.xlarge.elasticsearch
      - c4.2xlarge.elasticsearch
      - c4.4xlarge.elasticsearch
      - c4.8xlarge.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
      - r4.2xlarge.elasticsearch
      - r4.4xlarge.elasticsearch
      - r4.8xlarge.elasticsearch
      - r4.16xlarge.elasticsearch
      - i3.large.elasticsearch
      - i3.xlarge.elasticsearch
      - i3.2xlarge.elasticsearch
      - i3.4xlarge.elasticsearch
      - i3.8xlarge.elasticsearch
      - i3.16xlarge.elasticsearch
    ESWarmPartitionInstanceType:
      type: string
      enum:
      - ultrawarm1.medium.elasticsearch
      - ultrawarm1.large.elasticsearch
    ElasticsearchClusterConfig:
      type: object
      properties:
        InstanceType:
          allOf:
          - $ref: '#/components/schemas/ESPartitionInstanceType'
          description: The instance type for an Elasticsearch cluster. UltraWarm instance
            types are not supported for data instances.
        InstanceCount:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: The number of instances in the specified domain cluster.
        DedicatedMasterEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A boolean value to indicate whether a dedicated master node
            is enabled. See [About Dedicated Master Nodes](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-dedicatedmasternodes)
            for more information.
        ZoneAwarenessEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A boolean value to indicate whether zone awareness is enabled.
            See [About Zone Awareness](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-managedomains.html#es-managedomains-zoneawareness)
            for more information.
        ZoneAwarenessConfig:
          allOf:
          - $ref: '#/components/schemas/ZoneAwarenessConfig'
          description: Specifies the zone awareness configuration for a domain when
            zone awareness is enabled.
        DedicatedMasterType:
          allOf:
          - $ref: '#/components/schemas/ESPartitionInstanceType'
          description: The instance type for a dedicated master node.
        DedicatedMasterCount:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: Total number of dedicated master nodes, active and on standby,
            for the cluster.
        WarmEnabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True to enable warm storage.
        WarmType:
          allOf:
          - $ref: '#/components/schemas/ESWarmPartitionInstanceType'
          description: The instance type for the Elasticsearch cluster's warm nodes.
        WarmCount:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: The number of warm nodes in the cluster.
        ColdStorageOptions:
          allOf:
          - $ref: '#/components/schemas/ColdStorageOptions'
          description: Specifies the `ColdStorageOptions` config for Elasticsearch
            Domain
      description: Specifies the configuration for the domain cluster, such as the
        type and number of instances.
    ElasticsearchClusterConfigStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchClusterConfig'
          description: Specifies the cluster configuration for the specified Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the configuration for the specified
            Elasticsearch domain.
      required:
      - Options
      - Status
      description: Specifies the configuration status for the specified Elasticsearch
        domain.
    ElasticsearchDomainConfig:
      type: object
      properties:
        ElasticsearchVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionStatus'
          description: String of format X.Y to specify version for the Elasticsearch
            domain.
        ElasticsearchClusterConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchClusterConfigStatus'
          description: Specifies the `ElasticsearchClusterConfig` for the Elasticsearch
            domain.
        EBSOptions:
          allOf:
          - $ref: '#/components/schemas/EBSOptionsStatus'
          description: Specifies the `EBSOptions` for the Elasticsearch domain.
        AccessPolicies:
          allOf:
          - $ref: '#/components/schemas/AccessPoliciesStatus'
          description: IAM access policy as a JSON-formatted string.
        SnapshotOptions:
          allOf:
          - $ref: '#/components/schemas/SnapshotOptionsStatus'
          description: Specifies the `SnapshotOptions` for the Elasticsearch domain.
        VPCOptions:
          allOf:
          - $ref: '#/components/schemas/VPCDerivedInfoStatus'
          description: The `VPCOptions` for the specified domain. For more information,
            see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        CognitoOptions:
          allOf:
          - $ref: '#/components/schemas/CognitoOptionsStatus'
          description: The `CognitoOptions` for the specified domain. For more information,
            see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        EncryptionAtRestOptions:
          allOf:
          - $ref: '#/components/schemas/EncryptionAtRestOptionsStatus'
          description: Specifies the `EncryptionAtRestOptions` for the Elasticsearch
            domain.
        NodeToNodeEncryptionOptions:
          allOf:
          - $ref: '#/components/schemas/NodeToNodeEncryptionOptionsStatus'
          description: Specifies the `NodeToNodeEncryptionOptions` for the Elasticsearch
            domain.
        AdvancedOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedOptionsStatus'
          description: Specifies the `AdvancedOptions` for the domain. See [Configuring
            Advanced Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options)
            for more information.
        LogPublishingOptions:
          allOf:
          - $ref: '#/components/schemas/LogPublishingOptionsStatus'
          description: Log publishing options for the given domain.
        DomainEndpointOptions:
          allOf:
          - $ref: '#/components/schemas/DomainEndpointOptionsStatus'
          description: Specifies the `DomainEndpointOptions` for the Elasticsearch
            domain.
        AdvancedSecurityOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedSecurityOptionsStatus'
          description: Specifies `AdvancedSecurityOptions` for the domain.
        AutoTuneOptions:
          allOf:
          - $ref: '#/components/schemas/AutoTuneOptionsStatus'
          description: Specifies `AutoTuneOptions` for the domain.
        ChangeProgressDetails:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressDetails'
          description: Specifies change details of the domain configuration change.
        ModifyingProperties:
          allOf:
          - $ref: '#/components/schemas/ModifyingPropertiesList'
          description: Information about the domain properties that are currently
            being modified.
      description: The configuration of an Elasticsearch domain.
    ElasticsearchDomainStatus:
      type: object
      properties:
        DomainId:
          allOf:
          - $ref: '#/components/schemas/DomainId'
          description: The unique identifier for the specified Elasticsearch domain.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: 'The name of an Elasticsearch domain. Domain names are unique
            across the domains owned by an account within an AWS region. Domain names
            start with a letter or number and can contain the following characters:
            a-z (lowercase), 0-9, and - (hyphen).'
        ARN:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: The Amazon resource name (ARN) of an Elasticsearch domain.
            See [Identifiers for IAM Entities](http://docs.aws.amazon.com/IAM/latest/UserGuide/index.html?Using_Identifiers.html)
            in _Using AWS Identity and Access Management_ for more information.
        Created:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The domain creation status. `True` if the creation of an Elasticsearch
            domain is complete. `False` if domain creation is still in progress.
        Deleted:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The domain deletion status. `True` if a delete request has
            been received for the domain but resource cleanup is still in progress.
            `False` if the domain has not been deleted. Once domain deletion is complete,
            the status of the domain is no longer returned.
        Endpoint:
          allOf:
          - $ref: '#/components/schemas/ServiceUrl'
          description: The Elasticsearch domain endpoint that you use to submit index
            and search requests.
        Endpoints:
          allOf:
          - $ref: '#/components/schemas/EndpointsMap'
          description: 'Map containing the Elasticsearch domain endpoints used to
            submit index and search requests. Example `key, value`: `''vpc'',''vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com''`.'
        Processing:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The status of the Elasticsearch domain configuration. `True`
            if Amazon Elasticsearch Service is processing configuration changes. `False`
            if the configuration is active.
        UpgradeProcessing:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: The status of an Elasticsearch domain version upgrade. `True`
            if Amazon Elasticsearch Service is undergoing a version upgrade. `False`
            if the configuration is active.
        ElasticsearchVersion:
          $ref: '#/components/schemas/ElasticsearchVersionString'
        ElasticsearchClusterConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchClusterConfig'
          description: The type and number of instances in the domain cluster.
        EBSOptions:
          allOf:
          - $ref: '#/components/schemas/EBSOptions'
          description: The `EBSOptions` for the specified domain. See [Configuring
            EBS-based Storage](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs)
            for more information.
        AccessPolicies:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: IAM access policy as a JSON-formatted string.
        SnapshotOptions:
          allOf:
          - $ref: '#/components/schemas/SnapshotOptions'
          description: Specifies the status of the `SnapshotOptions`
        VPCOptions:
          allOf:
          - $ref: '#/components/schemas/VPCDerivedInfo'
          description: The `VPCOptions` for the specified domain. For more information,
            see [VPC Endpoints for Amazon Elasticsearch Service Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
        CognitoOptions:
          allOf:
          - $ref: '#/components/schemas/CognitoOptions'
          description: The `CognitoOptions` for the specified domain. For more information,
            see [Amazon Cognito Authentication for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        EncryptionAtRestOptions:
          allOf:
          - $ref: '#/components/schemas/EncryptionAtRestOptions'
          description: Specifies the status of the `EncryptionAtRestOptions`.
        NodeToNodeEncryptionOptions:
          allOf:
          - $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
          description: Specifies the status of the `NodeToNodeEncryptionOptions`.
        AdvancedOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedOptions'
          description: Specifies the status of the `AdvancedOptions`
        LogPublishingOptions:
          allOf:
          - $ref: '#/components/schemas/LogPublishingOptions'
          description: Log publishing options for the given domain.
        ServiceSoftwareOptions:
          allOf:
          - $ref: '#/components/schemas/ServiceSoftwareOptions'
          description: The current status of the Elasticsearch domain's service software.
        DomainEndpointOptions:
          allOf:
          - $ref: '#/components/schemas/DomainEndpointOptions'
          description: The current status of the Elasticsearch domain's endpoint options.
        AdvancedSecurityOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedSecurityOptions'
          description: The current status of the Elasticsearch domain's advanced security
            options.
        AutoTuneOptions:
          allOf:
          - $ref: '#/components/schemas/AutoTuneOptionsOutput'
          description: The current status of the Elasticsearch domain's Auto-Tune
            options.
        ChangeProgressDetails:
          allOf:
          - $ref: '#/components/schemas/ChangeProgressDetails'
          description: Specifies change details of the domain configuration change.
        DomainProcessingStatus:
          allOf:
          - $ref: '#/components/schemas/DomainProcessingStatusType'
          description: The status of any changes that are currently in progress for
            the domain.
        ModifyingProperties:
          allOf:
          - $ref: '#/components/schemas/ModifyingPropertiesList'
          description: Information about the domain properties that are currently
            being modified.
      required:
      - DomainId
      - DomainName
      - ARN
      - ElasticsearchClusterConfig
      description: The current status of an Elasticsearch domain.
    ElasticsearchDomainStatusList:
      type: array
      items:
        $ref: '#/components/schemas/ElasticsearchDomainStatus'
      description: <p>A list that contains the status of each requested Elasticsearch
        domain.</p>
    ElasticsearchInstanceTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ESPartitionInstanceType'
      description: "<p>\n      List of instance types supported by Amazon Elasticsearch\
        \ service.\n    </p>"
    ElasticsearchVersionList:
      type: array
      items:
        $ref: '#/components/schemas/ElasticsearchVersionString'
      description: "<p>List of supported elastic search versions.\n    </p>"
    ElasticsearchVersionStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: Specifies the Elasticsearch version for the specified Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the Elasticsearch version options for
            the specified Elasticsearch domain.
      required:
      - Options
      - Status
      description: Status of the Elasticsearch version options for the specified Elasticsearch
        domain.
    ElasticsearchVersionString:
      type: string
      pattern: ^[0-9]{1}\.[0-9]{1,2}$|^OpenSearch_[0-9]{1,2}\.[0-9]{1,2}$|^OS_[0-9]{1,2}\.[0-9]{1,2}$
    EncryptionAtRestOptions:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies the option to enable Encryption At Rest.
        KmsKeyId:
          allOf:
          - $ref: '#/components/schemas/KmsKeyId'
          description: Specifies the KMS Key ID for Encryption At Rest options.
      description: Specifies the Encryption At Rest Options.
    EncryptionAtRestOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/EncryptionAtRestOptions'
          description: Specifies the Encryption At Rest options for the specified
            Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the Encryption At Rest options for
            the specified Elasticsearch domain.
      required:
      - Options
      - Status
      description: Status of the Encryption At Rest options for the specified Elasticsearch
        domain.
    Endpoint:
      type: string
      pattern: ^[A-Za-z0-9\-\.]+$
    EndpointsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ServiceUrl'
    EngineType:
      type: string
      enum:
      - OpenSearch
      - Elasticsearch
    ErrorDetails:
      type: object
      properties:
        ErrorType:
          $ref: '#/components/schemas/ErrorType'
        ErrorMessage:
          $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: string
    ErrorType:
      type: string
    Filter:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/NonEmptyString'
          description: Specifies the name of the filter.
        Values:
          allOf:
          - $ref: '#/components/schemas/ValueStringList'
          description: Contains one or more values for the filter.
      description: A filter used to limit results when describing inbound or outbound
        cross-cluster search connections. Multiple values can be specified per filter.
        A cross-cluster search connection must match at least one of the specified
        values for it to be returned from an operation.
    FilterList:
      type: array
      items:
        $ref: '#/components/schemas/Filter'
    GUID:
      type: string
      pattern: ^\p{XDigit}{8}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{12}$
    GUIDList:
      type: array
      items:
        $ref: '#/components/schemas/GUID'
    GetCompatibleElasticsearchVersionsRequest:
      type: object
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainName'
      description: Container for request parameters to ` GetCompatibleElasticsearchVersions
        ` operation.
    GetCompatibleElasticsearchVersionsResponse:
      type: object
      properties:
        CompatibleElasticsearchVersions:
          allOf:
          - $ref: '#/components/schemas/CompatibleElasticsearchVersionsList'
          description: A map of compatible Elasticsearch versions returned as part
            of the ` GetCompatibleElasticsearchVersions ` operation.
      description: Container for response returned by ` GetCompatibleElasticsearchVersions
        ` operation.
    GetPackageVersionHistoryRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Returns an audit history of versions of the package.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Limits results to a maximum number of versions.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Used for pagination. Only necessary if a previous API call
            includes a non-null NextToken value. If provided, returns results for
            the next page.
      required:
      - PackageID
      description: Container for request parameters to ` GetPackageVersionHistory
        ` operation.
    GetPackageVersionHistoryResponse:
      type: object
      properties:
        PackageID:
          $ref: '#/components/schemas/PackageID'
        PackageVersionHistoryList:
          allOf:
          - $ref: '#/components/schemas/PackageVersionHistoryList'
          description: List of `PackageVersionHistory` objects.
        NextToken:
          $ref: '#/components/schemas/String'
      description: Container for response returned by ` GetPackageVersionHistory `
        operation.
    GetUpgradeHistoryRequest:
      type: object
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainName'
        MaxResults:
          $ref: '#/components/schemas/MaxResults'
        NextToken:
          $ref: '#/components/schemas/NextToken'
      required:
      - DomainName
      description: Container for request parameters to ` GetUpgradeHistory ` operation.
    GetUpgradeHistoryResponse:
      type: object
      properties:
        UpgradeHistories:
          allOf:
          - $ref: '#/components/schemas/UpgradeHistoryList'
          description: A list of ` UpgradeHistory ` objects corresponding to each
            Upgrade or Upgrade Eligibility Check performed on a domain returned as
            part of ` GetUpgradeHistoryResponse ` object.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Pagination token that needs to be supplied to the next call
            to get the next page of results
      description: Container for response returned by ` GetUpgradeHistory ` operation.
    GetUpgradeStatusRequest:
      type: object
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainName'
      required:
      - DomainName
      description: Container for request parameters to ` GetUpgradeStatus ` operation.
    GetUpgradeStatusResponse:
      type: object
      properties:
        UpgradeStep:
          allOf:
          - $ref: '#/components/schemas/UpgradeStep'
          description: "Represents one of 3 steps that an Upgrade or Upgrade Eligibility\
            \ Check does through:\n\n  * PreUpgradeCheck\n  * Snapshot\n  * Upgrade"
        StepStatus:
          allOf:
          - $ref: '#/components/schemas/UpgradeStatus'
          description: "One of 4 statuses that a step can go through returned as part\
            \ of the ` GetUpgradeStatusResponse ` object. The status can take one\
            \ of the following values:\n\n  * In Progress\n  * Succeeded\n  * Succeeded\
            \ with Issues\n  * Failed"
        UpgradeName:
          allOf:
          - $ref: '#/components/schemas/UpgradeName'
          description: A string that describes the update briefly
      description: Container for response returned by ` GetUpgradeStatus ` operation.
    IdentityPoolId:
      type: string
      pattern: ^[\w-]+:[0-9a-f-]+$
      minLength: 1
      maxLength: 55
    InboundCrossClusterSearchConnection:
      type: object
      properties:
        SourceDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the source Elasticsearch
            domain.
        DestinationDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the destination Elasticsearch
            domain.
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: Specifies the connection id for the inbound cross-cluster search
            connection.
        ConnectionStatus:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnectionStatus'
          description: Specifies the `InboundCrossClusterSearchConnectionStatus` for
            the outbound connection.
      description: Specifies details of an inbound connection.
    InboundCrossClusterSearchConnectionStatus:
      type: object
      properties:
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnectionStatusCode'
          description: "The state code for inbound connection. This can be one of\
            \ the following:\n\n  * PENDING_ACCEPTANCE: Inbound connection is not\
            \ yet accepted by destination domain owner.\n  * APPROVED: Inbound connection\
            \ is pending acceptance by destination domain owner.\n  * REJECTING: Inbound\
            \ connection rejection is in process.\n  * REJECTED: Inbound connection\
            \ is rejected.\n  * DELETING: Inbound connection deletion is in progress.\n\
            \  * DELETED: Inbound connection is deleted and cannot be used further."
        Message:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionStatusMessage'
          description: Specifies verbose information for the inbound connection status.
      description: Specifies the coonection status of an inbound cross-cluster search
        connection.
    InboundCrossClusterSearchConnectionStatusCode:
      type: string
      enum:
      - PENDING_ACCEPTANCE
      - APPROVED
      - REJECTING
      - REJECTED
      - DELETING
      - DELETED
    InboundCrossClusterSearchConnections:
      type: array
      items:
        $ref: '#/components/schemas/InboundCrossClusterSearchConnection'
    InitiatedBy:
      type: string
      enum:
      - CUSTOMER
      - SERVICE
    InstanceCount:
      type: integer
      minimum: 1
      description: <p>Specifies the number of EC2 instances in the Elasticsearch domain.</p>
    InstanceCountLimits:
      type: object
      properties:
        MinimumInstanceCount:
          $ref: '#/components/schemas/MinimumInstanceCount'
        MaximumInstanceCount:
          $ref: '#/components/schemas/MaximumInstanceCount'
      description: InstanceCountLimits represents the limits on number of instances
        that be created in Amazon Elasticsearch for given InstanceType.
    InstanceLimits:
      type: object
      properties:
        InstanceCountLimits:
          $ref: '#/components/schemas/InstanceCountLimits'
      description: InstanceLimits represents the list of instance related attributes
        that are available for given InstanceType.
    InstanceRole:
      type: string
    Integer:
      type: integer
      default: 0
    IntegerClass:
      type: integer
    InternalException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: The request processing has failed because of an unknown error,
        exception or failure (the failure is internal to the service) . Gives http
        status code of 500.
    InvalidPaginationTokenException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: The request processing has failed because of invalid pagination
        token provided by customer. Returns an HTTP status code of 400.
    InvalidTypeException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An exception for trying to create or access sub-resource that is
        either invalid or not supported. Gives http status code of 409.
    Issue:
      type: string
    Issues:
      type: array
      items:
        $ref: '#/components/schemas/Issue'
    KmsKeyId:
      type: string
      minLength: 1
      maxLength: 500
    LastUpdated:
      type: string
      format: date-time
    LimitExceededException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An exception for trying to create more than allowed resources or
        sub-resources. Gives http status code of 409.
    LimitName:
      type: string
    LimitValue:
      type: string
    LimitValueList:
      type: array
      items:
        $ref: '#/components/schemas/LimitValue'
    Limits:
      type: object
      properties:
        StorageTypes:
          allOf:
          - $ref: '#/components/schemas/StorageTypeList'
          description: StorageType represents the list of storage related types and
            attributes that are available for given InstanceType.
        InstanceLimits:
          $ref: '#/components/schemas/InstanceLimits'
        AdditionalLimits:
          allOf:
          - $ref: '#/components/schemas/AdditionalLimitList'
          description: List of additional limits that are specific to a given InstanceType
            and for each of it's ` InstanceRole ` .
      description: "Limits for given InstanceType and for each of it's role.  \nLimits\
        \ contains following ` StorageTypes, ` ` InstanceLimits ` and ` AdditionalLimits\
        \ `"
    LimitsByRole:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Limits'
      description: "<p>\n      Map of Role of the Instance and Limits that are applicable.\n\
        \      Role performed by given Instance in Elasticsearch\n      can be one\
        \ of the following:\n      <ul>\n        <li>data: If the given InstanceType\
        \ is used as data node</li>\n        <li>master: If the given InstanceType\
        \ is used as master node</li>\n        <li>ultra_warm: If the given InstanceType\
        \ is used as warm node</li>\n      </ul>\n    </p>"
    ListDomainNamesRequest:
      type: object
      properties:
        EngineType:
          allOf:
          - $ref: '#/components/schemas/EngineType'
          description: Optional parameter to filter the output by domain engine type.
            Acceptable values are 'Elasticsearch' and 'OpenSearch'.
      description: Container for the parameters to the `ListDomainNames` operation.
    ListDomainNamesResponse:
      type: object
      properties:
        DomainNames:
          allOf:
          - $ref: '#/components/schemas/DomainInfoList'
          description: List of domain names and respective engine types.
      description: The result of a `ListDomainNames` operation. Contains the names
        of all domains owned by this account and their respective engine types.
    ListDomainsForPackageRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: The package for which to list domains.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Limits results to a maximum number of domains.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Used for pagination. Only necessary if a previous API call
            includes a non-null NextToken value. If provided, returns results for
            the next page.
      required:
      - PackageID
      description: Container for request parameters to ` ListDomainsForPackage ` operation.
    ListDomainsForPackageResponse:
      type: object
      properties:
        DomainPackageDetailsList:
          allOf:
          - $ref: '#/components/schemas/DomainPackageDetailsList'
          description: List of `DomainPackageDetails` objects.
        NextToken:
          $ref: '#/components/schemas/String'
      description: Container for response parameters to ` ListDomainsForPackage `
        operation.
    ListElasticsearchInstanceTypesRequest:
      type: object
      properties:
        ElasticsearchVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: Version of Elasticsearch for which list of supported elasticsearch
            instance types are needed.
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: DomainName represents the name of the Domain that we are trying
            to modify. This should be present only if we are querying for list of
            available Elasticsearch instance types when modifying existing domain.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. Value
            provided must be greater than 30 else it wont be honored.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: NextToken should be sent in case if earlier API call produced
            result containing NextToken. It is used for pagination.
      required:
      - ElasticsearchVersion
      description: Container for the parameters to the ` ListElasticsearchInstanceTypes
        ` operation.
    ListElasticsearchInstanceTypesResponse:
      type: object
      properties:
        ElasticsearchInstanceTypes:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchInstanceTypeList'
          description: List of instance types supported by Amazon Elasticsearch service
            for given ` ElasticsearchVersion `
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: In case if there are more results available NextToken would
            be present, make further request to the same API with received NextToken
            to paginate remaining results.
      description: Container for the parameters returned by ` ListElasticsearchInstanceTypes
        ` operation.
    ListElasticsearchVersionsRequest:
      type: object
      properties:
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Set this value to limit the number of results returned. Value
            provided must be greater than 10 else it wont be honored.
        NextToken:
          $ref: '#/components/schemas/NextToken'
      description: 'Container for the parameters to the ` ListElasticsearchVersions
        ` operation.


        Use ` MaxResults ` to control the maximum number of results to retrieve in
        a single call.


        Use ` NextToken ` in response to retrieve more results. If the received response
        does not contain a NextToken, then there are no more results to retrieve.'
    ListElasticsearchVersionsResponse:
      type: object
      properties:
        ElasticsearchVersions:
          $ref: '#/components/schemas/ElasticsearchVersionList'
        NextToken:
          $ref: '#/components/schemas/NextToken'
      description: Container for the parameters for response received from ` ListElasticsearchVersions
        ` operation.
    ListPackagesForDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain for which you want to list associated
            packages.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Limits results to a maximum number of packages.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Used for pagination. Only necessary if a previous API call
            includes a non-null NextToken value. If provided, returns results for
            the next page.
      required:
      - DomainName
      description: Container for request parameters to ` ListPackagesForDomain ` operation.
    ListPackagesForDomainResponse:
      type: object
      properties:
        DomainPackageDetailsList:
          allOf:
          - $ref: '#/components/schemas/DomainPackageDetailsList'
          description: List of `DomainPackageDetails` objects.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/String'
          description: Pagination token that needs to be supplied to the next call
            to get the next page of results.
      description: Container for response parameters to ` ListPackagesForDomain `
        operation.
    ListTagsRequest:
      type: object
      properties:
        ARN:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Specify the `ARN` for the Elasticsearch domain to which the
            tags are attached that you want to view.
      required:
      - ARN
      description: Container for the parameters to the `ListTags` operation. Specify
        the `ARN` for the Elasticsearch domain to which the tags are attached that
        you want to view are attached.
    ListTagsResponse:
      type: object
      properties:
        TagList:
          allOf:
          - $ref: '#/components/schemas/TagList'
          description: List of `Tag` for the requested Elasticsearch domain.
      description: The result of a `ListTags` operation. Contains tags for all requested
        Elasticsearch domains.
    ListVpcEndpointAccessRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the OpenSearch Service domain to retrieve access
            information for.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Provides an identifier to allow retrieval of paginated results.
      required:
      - DomainName
      description: Retrieves information about each principal that is allowed to access
        a given Amazon OpenSearch Service domain through the use of an interface VPC
        endpoint
    ListVpcEndpointAccessResponse:
      type: object
      properties:
        AuthorizedPrincipalList:
          allOf:
          - $ref: '#/components/schemas/AuthorizedPrincipalList'
          description: List of `AuthorizedPrincipal` describing the details of the
            permissions to manage VPC endpoints against the specified domain.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Provides an identifier to allow retrieval of paginated results.
      required:
      - AuthorizedPrincipalList
      - NextToken
      description: Container for response parameters to the `ListVpcEndpointAccess`
        operation. Returns a list of accounts id and account type authorized to manage
        VPC endpoints.
    ListVpcEndpointsForDomainRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: Name of the ElasticSearch domain whose VPC endpoints are to
            be listed.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Provides an identifier to allow retrieval of paginated results.
      required:
      - DomainName
      description: Container for request parameters to the `ListVpcEndpointsForDomain`
        operation. Specifies the domain whose VPC endpoints will be listed.
    ListVpcEndpointsForDomainResponse:
      type: object
      properties:
        VpcEndpointSummaryList:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointSummaryList'
          description: Provides list of `VpcEndpointSummary` summarizing details of
            the VPC endpoints.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Information about each endpoint associated with the domain.
      required:
      - VpcEndpointSummaryList
      - NextToken
      description: Container for response parameters to the `ListVpcEndpointsForDomain`
        operation. Returns a list containing summarized details of the VPC endpoints.
    ListVpcEndpointsRequest:
      type: object
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Identifier to allow retrieval of paginated results.
      description: Container for request parameters to the `ListVpcEndpoints` operation.
    ListVpcEndpointsResponse:
      type: object
      properties:
        VpcEndpointSummaryList:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointSummaryList'
          description: Information about each endpoint.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: Provides an identifier to allow retrieval of paginated results.
      required:
      - VpcEndpointSummaryList
      - NextToken
      description: Container for response parameters to the `ListVpcEndpoints` operation.
        Returns a list containing summarized details of the VPC endpoints.
    LogPublishingOption:
      type: object
      properties:
        CloudWatchLogsLogGroupArn:
          $ref: '#/components/schemas/CloudWatchLogsLogGroupArn'
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies whether given log publishing option is enabled or
            not.
      description: "Log Publishing option that is set for given domain.  \nAttributes\
        \ and their details:\n\n  * CloudWatchLogsLogGroupArn: ARN of the Cloudwatch\
        \ log group to which log needs to be published.\n  * Enabled: Whether the\
        \ log publishing for given log type is enabled or not"
    LogPublishingOptions:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/LogPublishingOption'
    LogPublishingOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/LogPublishingOptions'
          description: The log publishing options configured for the Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: The status of the log publishing options for the Elasticsearch
            domain. See `OptionStatus` for the status information that's included.
      description: The configured log publishing options for the domain and their
        current status.
    LogType:
      type: string
      enum:
      - INDEX_SLOW_LOGS
      - SEARCH_SLOW_LOGS
      - ES_APPLICATION_LOGS
      - AUDIT_LOGS
      description: "<p>Type of Log File, it can be one of the following:\n     <ul>\n\
        \       <li>INDEX_SLOW_LOGS: Index slow logs contain insert requests that\
        \ took more time than configured index query log threshold to execute.</li>\n\
        \       <li>SEARCH_SLOW_LOGS: Search slow logs contain search queries that\
        \ took more time than configured search query log threshold to execute.</li>\n\
        \       <li>ES_APPLICATION_LOGS: Elasticsearch application logs contain information\
        \ about errors and warnings raised during the operation of the service and\
        \ can be useful for troubleshooting.</li>\n       <li>AUDIT_LOGS: Audit logs\
        \ contain records of user requests for access from the domain.</li>\n    \
        \ </ul>\n    </p>"
    MasterUserOptions:
      type: object
      properties:
        MasterUserARN:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: ARN for the master user (if IAM is enabled).
        MasterUserName:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The master user's username, which is stored in the Amazon Elasticsearch
            Service domain's internal database.
        MasterUserPassword:
          allOf:
          - $ref: '#/components/schemas/Password'
          description: The master user's password, which is stored in the Amazon Elasticsearch
            Service domain's internal database.
      description: 'Credentials for the master user: username and password, ARN, or
        both.'
    MaxResults:
      type: integer
      default: 0
      maximum: 100
      description: "<p>\n      Set this value to limit the number of results returned.\n\
        \    </p>"
    MaximumInstanceCount:
      type: integer
      default: 0
      description: "<p>\n      Maximum number of Instances that can be instantiated\
        \ for given InstanceType.\n    </p>"
    Message:
      type: string
      minLength: 0
      maxLength: 1024
    MinimumInstanceCount:
      type: integer
      default: 0
      description: "<p>\n      Minimum number of Instances that can be instantiated\
        \ for given InstanceType.\n    </p>"
    ModifyingProperties:
      type: object
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the property that is currently being modified.
        ActiveValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current value of the domain property that is being modified.
        PendingValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that the property that is currently being modified
            will eventually have.
        ValueType:
          allOf:
          - $ref: '#/components/schemas/PropertyValueType'
          description: "The type of value that is currently being modified. Properties\
            \ can have two types:\n\n  * **PLAIN_TEXT** : Contain direct values such\
            \ as \"1\", \"True\", or \"c5.large.search\".\n  * **STRINGIFIED_JSON**\
            \ : Contain content in JSON format, such as {\"Enabled\":\"True\"}\"."
      description: Information about the domain properties that are currently being
        modified.
    ModifyingPropertiesList:
      type: array
      items:
        $ref: '#/components/schemas/ModifyingProperties'
    NextToken:
      type: string
    NodeToNodeEncryptionOptions:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specify true to enable node-to-node encryption.
      description: Specifies the node-to-node encryption options.
    NodeToNodeEncryptionOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
          description: Specifies the node-to-node encryption options for the specified
            Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the node-to-node encryption options
            for the specified Elasticsearch domain.
      required:
      - Options
      - Status
      description: Status of the node-to-node encryption options for the specified
        Elasticsearch domain.
    NonEmptyString:
      type: string
      minLength: 1
    OptionState:
      type: string
      enum:
      - RequiresIndexDocuments
      - Processing
      - Active
      description: "<p>The state of a requested change. One of the following:</p>\n\
        \    <ul>\n      <li>Processing: The request change is still in-process.</li>\n\
        \      <li>Active: The request change is processed and deployed to the Elasticsearch\
        \ domain.</li>\n    </ul>"
    OptionStatus:
      type: object
      properties:
        CreationDate:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: Timestamp which tells the creation date for the entity.
        UpdateDate:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: Timestamp which tells the last updated time for the entity.
        UpdateVersion:
          allOf:
          - $ref: '#/components/schemas/UIntValue'
          description: Specifies the latest version for the entity.
        State:
          allOf:
          - $ref: '#/components/schemas/OptionState'
          description: Provides the `OptionState` for the Elasticsearch domain.
        PendingDeletion:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether the Elasticsearch domain is being deleted.
      required:
      - CreationDate
      - UpdateDate
      - State
      description: Provides the current status of the entity.
    OutboundCrossClusterSearchConnection:
      type: object
      properties:
        SourceDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the source Elasticsearch
            domain.
        DestinationDomainInfo:
          allOf:
          - $ref: '#/components/schemas/DomainInformation'
          description: Specifies the `DomainInformation` for the destination Elasticsearch
            domain.
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: Specifies the connection id for the outbound cross-cluster
            search connection.
        ConnectionAlias:
          allOf:
          - $ref: '#/components/schemas/ConnectionAlias'
          description: Specifies the connection alias for the outbound cross-cluster
            search connection.
        ConnectionStatus:
          allOf:
          - $ref: '#/components/schemas/OutboundCrossClusterSearchConnectionStatus'
          description: Specifies the `OutboundCrossClusterSearchConnectionStatus`
            for the outbound connection.
      description: Specifies details of an outbound connection.
    OutboundCrossClusterSearchConnectionStatus:
      type: object
      properties:
        StatusCode:
          allOf:
          - $ref: '#/components/schemas/OutboundCrossClusterSearchConnectionStatusCode'
          description: "The state code for outbound connection. This can be one of\
            \ the following:\n\n  * VALIDATING: The outbound connection request is\
            \ being validated.\n  * VALIDATION_FAILED: Validation failed for the connection\
            \ request.\n  * PENDING_ACCEPTANCE: Outbound connection request is validated\
            \ and is not yet accepted by destination domain owner.\n  * PROVISIONING:\
            \ Outbound connection request is in process.\n  * ACTIVE: Outbound connection\
            \ is active and ready to use.\n  * REJECTED: Outbound connection request\
            \ is rejected by destination domain owner.\n  * DELETING: Outbound connection\
            \ deletion is in progress.\n  * DELETED: Outbound connection is deleted\
            \ and cannot be used further."
        Message:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionStatusMessage'
          description: Specifies verbose information for the outbound connection status.
      description: Specifies the connection status of an outbound cross-cluster search
        connection.
    OutboundCrossClusterSearchConnectionStatusCode:
      type: string
      enum:
      - PENDING_ACCEPTANCE
      - VALIDATING
      - VALIDATION_FAILED
      - PROVISIONING
      - ACTIVE
      - REJECTED
      - DELETING
      - DELETED
    OutboundCrossClusterSearchConnections:
      type: array
      items:
        $ref: '#/components/schemas/OutboundCrossClusterSearchConnection'
    OverallChangeStatus:
      type: string
      enum:
      - PENDING
      - PROCESSING
      - COMPLETED
      - FAILED
      description: <p>The overall status value of the domain configuration change.</p>
    OwnerId:
      type: string
      minLength: 12
      maxLength: 12
    PackageDescription:
      type: string
      minLength: 0
      maxLength: 1024
    PackageDetails:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Internal ID of the package.
        PackageName:
          allOf:
          - $ref: '#/components/schemas/PackageName'
          description: User specified name of the package.
        PackageType:
          allOf:
          - $ref: '#/components/schemas/PackageType'
          description: Currently supports only TXT-DICTIONARY.
        PackageDescription:
          allOf:
          - $ref: '#/components/schemas/PackageDescription'
          description: User-specified description of the package.
        PackageStatus:
          allOf:
          - $ref: '#/components/schemas/PackageStatus'
          description: Current state of the package. Values are COPYING/COPY_FAILED/AVAILABLE/DELETING/DELETE_FAILED
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: Timestamp which tells creation date of the package.
        LastUpdatedAt:
          $ref: '#/components/schemas/LastUpdated'
        AvailablePackageVersion:
          $ref: '#/components/schemas/PackageVersion'
        ErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: Additional information if the package is in an error state.
            Null otherwise.
      description: Basic information about a package.
    PackageDetailsList:
      type: array
      items:
        $ref: '#/components/schemas/PackageDetails'
    PackageID:
      type: string
    PackageName:
      type: string
      pattern: ^[a-z][a-z0-9\-]+$
      minLength: 3
      maxLength: 28
    PackageSource:
      type: object
      properties:
        S3BucketName:
          allOf:
          - $ref: '#/components/schemas/S3BucketName'
          description: Name of the bucket containing the package.
        S3Key:
          allOf:
          - $ref: '#/components/schemas/S3Key'
          description: Key (file name) of the package.
      description: The S3 location for importing the package specified as `S3BucketName`
        and `S3Key`
    PackageStatus:
      type: string
      enum:
      - COPYING
      - COPY_FAILED
      - VALIDATING
      - VALIDATION_FAILED
      - AVAILABLE
      - DELETING
      - DELETED
      - DELETE_FAILED
    PackageType:
      type: string
      enum:
      - TXT-DICTIONARY
    PackageVersion:
      type: string
    PackageVersionHistory:
      type: object
      properties:
        PackageVersion:
          allOf:
          - $ref: '#/components/schemas/PackageVersion'
          description: Version of the package.
        CommitMessage:
          allOf:
          - $ref: '#/components/schemas/CommitMessage'
          description: A message associated with the version.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/CreatedAt'
          description: Timestamp which tells creation time of the package version.
      description: Details of a package version.
    PackageVersionHistoryList:
      type: array
      items:
        $ref: '#/components/schemas/PackageVersionHistory'
    Password:
      type: string
      minLength: 8
    PolicyDocument:
      type: string
    PrincipalType:
      type: string
      enum:
      - AWS_ACCOUNT
      - AWS_SERVICE
      description: "<p>Specifies the type of AWS account permitted to manage VPC endpoints.:\n\
        \     <ul>\n       <li>AWS_ACCOUNT: Indicates that the account is owned by\
        \ an AWS user.</li>\n       <li>AWS_SERVICE: Indicates the the account is\
        \ owned by an AWS service.</li>\n     </ul>\n    </p>"
    PropertyValueType:
      type: string
      enum:
      - PLAIN_TEXT
      - STRINGIFIED_JSON
    PurchaseReservedElasticsearchInstanceOfferingRequest:
      type: object
      properties:
        ReservedElasticsearchInstanceOfferingId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The ID of the reserved Elasticsearch instance offering to purchase.
        ReservationName:
          allOf:
          - $ref: '#/components/schemas/ReservationToken'
          description: A customer-specified identifier to track this reservation.
        InstanceCount:
          allOf:
          - $ref: '#/components/schemas/InstanceCount'
          description: The number of Elasticsearch instances to reserve.
      required:
      - ReservedElasticsearchInstanceOfferingId
      - ReservationName
      description: Container for parameters to `PurchaseReservedElasticsearchInstanceOffering`
    PurchaseReservedElasticsearchInstanceOfferingResponse:
      type: object
      properties:
        ReservedElasticsearchInstanceId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: Details of the reserved Elasticsearch instance which was purchased.
        ReservationName:
          allOf:
          - $ref: '#/components/schemas/ReservationToken'
          description: The customer-specified identifier used to track this reservation.
      description: Represents the output of a `PurchaseReservedElasticsearchInstanceOffering`
        operation.
    RecurringCharge:
      type: object
      properties:
        RecurringChargeAmount:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The monetary amount of the recurring charge.
        RecurringChargeFrequency:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The frequency of the recurring charge.
      description: Contains the specific price and frequency of a recurring charges
        for a reserved Elasticsearch instance, or for a reserved Elasticsearch instance
        offering.
    RecurringChargeList:
      type: array
      items:
        $ref: '#/components/schemas/RecurringCharge'
    ReferencePath:
      type: string
    Region:
      type: string
    RejectInboundCrossClusterSearchConnectionRequest:
      type: object
      properties:
        CrossClusterSearchConnectionId:
          allOf:
          - $ref: '#/components/schemas/CrossClusterSearchConnectionId'
          description: The id of the inbound connection that you want to reject.
      required:
      - CrossClusterSearchConnectionId
      description: Container for the parameters to the `RejectInboundCrossClusterSearchConnection`
        operation.
    RejectInboundCrossClusterSearchConnectionResponse:
      type: object
      properties:
        CrossClusterSearchConnection:
          allOf:
          - $ref: '#/components/schemas/InboundCrossClusterSearchConnection'
          description: Specifies the `InboundCrossClusterSearchConnection` of rejected
            inbound connection.
      description: The result of a `RejectInboundCrossClusterSearchConnection` operation.
        Contains details of rejected inbound connection.
    RemoveTagsRequest:
      type: object
      properties:
        ARN:
          allOf:
          - $ref: '#/components/schemas/ARN'
          description: Specifies the `ARN` for the Elasticsearch domain from which
            you want to delete the specified tags.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the `TagKey` list which you want to remove from the
            Elasticsearch domain.
      required:
      - ARN
      - TagKeys
      description: Container for the parameters to the `RemoveTags` operation. Specify
        the `ARN` for the Elasticsearch domain from which you want to remove the specified
        `TagKey`.
    ReservationToken:
      type: string
      minLength: 5
      maxLength: 64
    ReservedElasticsearchInstance:
      type: object
      properties:
        ReservationName:
          allOf:
          - $ref: '#/components/schemas/ReservationToken'
          description: The customer-specified identifier to track this reservation.
        ReservedElasticsearchInstanceId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The unique identifier for the reservation.
        ReservedElasticsearchInstanceOfferingId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The offering identifier.
        ElasticsearchInstanceType:
          allOf:
          - $ref: '#/components/schemas/ESPartitionInstanceType'
          description: The Elasticsearch instance type offered by the reserved instance
            offering.
        StartTime:
          allOf:
          - $ref: '#/components/schemas/UpdateTimestamp'
          description: The time the reservation started.
        Duration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The duration, in seconds, for which the Elasticsearch instance
            is reserved.
        FixedPrice:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The upfront fixed charge you will paid to purchase the specific
            reserved Elasticsearch instance offering.
        UsagePrice:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The rate you are charged for each hour for the domain that
            is using this reserved instance.
        CurrencyCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The currency code for the reserved Elasticsearch instance offering.
        ElasticsearchInstanceCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The number of Elasticsearch instances that have been reserved.
        State:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The state of the reserved Elasticsearch instance.
        PaymentOption:
          allOf:
          - $ref: '#/components/schemas/ReservedElasticsearchInstancePaymentOption'
          description: The payment option as defined in the reserved Elasticsearch
            instance offering.
        RecurringCharges:
          allOf:
          - $ref: '#/components/schemas/RecurringChargeList'
          description: The charge to your account regardless of whether you are creating
            any domains using the instance offering.
      description: Details of a reserved Elasticsearch instance.
    ReservedElasticsearchInstanceList:
      type: array
      items:
        $ref: '#/components/schemas/ReservedElasticsearchInstance'
    ReservedElasticsearchInstanceOffering:
      type: object
      properties:
        ReservedElasticsearchInstanceOfferingId:
          allOf:
          - $ref: '#/components/schemas/GUID'
          description: The Elasticsearch reserved instance offering identifier.
        ElasticsearchInstanceType:
          allOf:
          - $ref: '#/components/schemas/ESPartitionInstanceType'
          description: The Elasticsearch instance type offered by the reserved instance
            offering.
        Duration:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The duration, in seconds, for which the offering will reserve
            the Elasticsearch instance.
        FixedPrice:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The upfront fixed charge you will pay to purchase the specific
            reserved Elasticsearch instance offering.
        UsagePrice:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The rate you are charged for each hour the domain that is using
            the offering is running.
        CurrencyCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The currency code for the reserved Elasticsearch instance offering.
        PaymentOption:
          allOf:
          - $ref: '#/components/schemas/ReservedElasticsearchInstancePaymentOption'
          description: Payment option for the reserved Elasticsearch instance offering
        RecurringCharges:
          allOf:
          - $ref: '#/components/schemas/RecurringChargeList'
          description: The charge to your account regardless of whether you are creating
            any domains using the instance offering.
      description: Details of a reserved Elasticsearch instance offering.
    ReservedElasticsearchInstanceOfferingList:
      type: array
      items:
        $ref: '#/components/schemas/ReservedElasticsearchInstanceOffering'
    ReservedElasticsearchInstancePaymentOption:
      type: string
      enum:
      - ALL_UPFRONT
      - PARTIAL_UPFRONT
      - NO_UPFRONT
    ResourceAlreadyExistsException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An exception for creating a resource that already exists. Gives
        http status code of 400.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An exception for accessing or deleting a resource that does not
        exist. Gives http status code of 400.
    RevokeVpcEndpointAccessRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the OpenSearch Service domain.
        Account:
          allOf:
          - $ref: '#/components/schemas/AWSAccount'
          description: The account ID to revoke access from.
      required:
      - DomainName
      - Account
      description: Revokes access to an Amazon OpenSearch Service domain that was
        provided through an interface VPC endpoint.
    RevokeVpcEndpointAccessResponse:
      type: object
      properties: {}
      description: Container for response parameters to the `RevokeVpcEndpointAccess`
        operation. The response body for this operation is empty.
    RoleArn:
      type: string
      minLength: 20
      maxLength: 2048
    RollbackOnDisable:
      type: string
      enum:
      - NO_ROLLBACK
      - DEFAULT_ROLLBACK
      description: <p>Specifies the rollback state while disabling Auto-Tune for the
        domain. Valid values are NO_ROLLBACK, DEFAULT_ROLLBACK.</p>
    S3BucketName:
      type: string
      minLength: 3
      maxLength: 63
    S3Key:
      type: string
    SAMLEntityId:
      type: string
      minLength: 8
      maxLength: 512
    SAMLIdp:
      type: object
      properties:
        MetadataContent:
          allOf:
          - $ref: '#/components/schemas/SAMLMetadata'
          description: The Metadata of the SAML application in xml format.
        EntityId:
          allOf:
          - $ref: '#/components/schemas/SAMLEntityId'
          description: The unique Entity ID of the application in SAML Identity Provider.
      required:
      - MetadataContent
      - EntityId
      description: Specifies the SAML Identity Provider's information.
    SAMLMetadata:
      type: string
      minLength: 1
      maxLength: 1048576
    SAMLOptionsInput:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if SAML is enabled.
        Idp:
          allOf:
          - $ref: '#/components/schemas/SAMLIdp'
          description: Specifies the SAML Identity Provider's information.
        MasterUserName:
          allOf:
          - $ref: '#/components/schemas/Username'
          description: The SAML master username, which is stored in the Amazon Elasticsearch
            Service domain's internal database.
        MasterBackendRole:
          allOf:
          - $ref: '#/components/schemas/BackendRole'
          description: The backend role to which the SAML master user is mapped to.
        SubjectKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key to use for matching the SAML Subject attribute.
        RolesKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key to use for matching the SAML Roles attribute.
        SessionTimeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: The duration, in minutes, after which a user session becomes
            inactive. Acceptable values are between 1 and 1440, and the default value
            is 60.
      description: Specifies the SAML application configuration for the domain.
    SAMLOptionsOutput:
      type: object
      properties:
        Enabled:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: True if SAML is enabled.
        Idp:
          allOf:
          - $ref: '#/components/schemas/SAMLIdp'
          description: Describes the SAML Identity Provider's information.
        SubjectKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key used for matching the SAML Subject attribute.
        RolesKey:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The key used for matching the SAML Roles attribute.
        SessionTimeoutMinutes:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: The duration, in minutes, after which a user session becomes
            inactive.
      description: Describes the SAML application configured for the domain.
    ScheduledAutoTuneActionType:
      type: string
      enum:
      - JVM_HEAP_SIZE_TUNING
      - JVM_YOUNG_GEN_TUNING
      description: <p>Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING
        and JVM_YOUNG_GEN_TUNING. </p>
    ScheduledAutoTuneDescription:
      type: string
    ScheduledAutoTuneDetails:
      type: object
      properties:
        Date:
          allOf:
          - $ref: '#/components/schemas/AutoTuneDate'
          description: Specifies timestamp for the Auto-Tune action scheduled for
            the domain.
        ActionType:
          allOf:
          - $ref: '#/components/schemas/ScheduledAutoTuneActionType'
          description: Specifies Auto-Tune action type. Valid values are JVM_HEAP_SIZE_TUNING
            and JVM_YOUNG_GEN_TUNING.
        Action:
          allOf:
          - $ref: '#/components/schemas/ScheduledAutoTuneDescription'
          description: Specifies Auto-Tune action description.
        Severity:
          allOf:
          - $ref: '#/components/schemas/ScheduledAutoTuneSeverityType'
          description: Specifies Auto-Tune action severity. Valid values are LOW,
            MEDIUM and HIGH.
      description: Specifies details of the scheduled Auto-Tune action. See the [Developer
        Guide](https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html)
        for more information.
    ScheduledAutoTuneSeverityType:
      type: string
      enum:
      - LOW
      - MEDIUM
      - HIGH
      description: <p>Specifies Auto-Tune action severity. Valid values are LOW, MEDIUM
        and HIGH. </p>
    ServiceSoftwareOptions:
      type: object
      properties:
        CurrentVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The current service software version that is present on the
            domain.
        NewVersion:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The new service software version if one is available.
        UpdateAvailable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if you are able to update you service software version.
            `False` if you are not able to update your service software version.'
        Cancellable:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if you are able to cancel your service software version
            update. `False` if you are not able to cancel your service software version.'
        UpdateStatus:
          allOf:
          - $ref: '#/components/schemas/DeploymentStatus'
          description: 'The status of your service software update. This field can
            take the following values: `ELIGIBLE`, `PENDING_UPDATE`, `IN_PROGRESS`,
            `COMPLETED`, and `NOT_ELIGIBLE`.'
        Description:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The description of the `UpdateStatus`.
        AutomatedUpdateDate:
          allOf:
          - $ref: '#/components/schemas/DeploymentCloseDateTimeStamp'
          description: Timestamp, in Epoch time, until which you can manually request
            a service software update. After this date, we automatically update your
            service software.
        OptionalDeployment:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: '`True` if a service software is never automatically updated.
            `False` if a service software is automatically updated after `AutomatedUpdateDate`.'
      description: The current options of an Elasticsearch domain service software
        options.
    ServiceUrl:
      type: string
    SnapshotOptions:
      type: object
      properties:
        AutomatedSnapshotStartHour:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: Specifies the time, in UTC format, when the service takes a
            daily automated snapshot of the specified Elasticsearch domain. Default
            value is `0` hours.
      description: Specifies the time, in UTC format, when the service takes a daily
        automated snapshot of the specified Elasticsearch domain. Default value is
        `0` hours.
    SnapshotOptionsStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/SnapshotOptions'
          description: Specifies the daily snapshot options specified for the Elasticsearch
            domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of a daily automated snapshot.
      required:
      - Options
      - Status
      description: Status of a daily automated snapshot.
    StartAt:
      type: string
      format: date-time
    StartElasticsearchServiceSoftwareUpdateRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the domain that you want to update to the latest
            service software.
      required:
      - DomainName
      description: Container for the parameters to the `StartElasticsearchServiceSoftwareUpdate`
        operation. Specifies the name of the Elasticsearch domain that you wish to
        schedule a service software update on.
    StartElasticsearchServiceSoftwareUpdateResponse:
      type: object
      properties:
        ServiceSoftwareOptions:
          allOf:
          - $ref: '#/components/schemas/ServiceSoftwareOptions'
          description: The current status of the Elasticsearch service software update.
      description: The result of a `StartElasticsearchServiceSoftwareUpdate` operation.
        Contains the status of the update.
    StartTimestamp:
      type: string
      format: date-time
    StorageSubTypeName:
      type: string
    StorageType:
      type: object
      properties:
        StorageTypeName:
          $ref: '#/components/schemas/StorageTypeName'
        StorageSubTypeName:
          $ref: '#/components/schemas/StorageSubTypeName'
        StorageTypeLimits:
          allOf:
          - $ref: '#/components/schemas/StorageTypeLimitList'
          description: List of limits that are applicable for given storage type.
      description: StorageTypes represents the list of storage related types and their
        attributes that are available for given InstanceType.
    StorageTypeLimit:
      type: object
      properties:
        LimitName:
          allOf:
          - $ref: '#/components/schemas/LimitName'
          description: "Name of storage limits that are applicable for given storage\
            \ type. If ` StorageType ` is ebs, following storage options are applicable\n\
            \n  1. MinimumVolumeSize\nMinimum amount of volume size that is applicable\
            \ for given storage type.It can be empty if it is not applicable.\n\n\
            \  2. MaximumVolumeSize\nMaximum amount of volume size that is applicable\
            \ for given storage type.It can be empty if it is not applicable.\n\n\
            \  3. MaximumIops\nMaximum amount of Iops that is applicable for given\
            \ storage type.It can be empty if it is not applicable.\n\n  4. MinimumIops\n\
            Minimum amount of Iops that is applicable for given storage type.It can\
            \ be empty if it is not applicable.\n\n  5. MaximumThroughput\nMaximum\
            \ amount of Throughput that is applicable for given storage type.It can\
            \ be empty if it is not applicable.\n\n  6. MinimumThroughput\nMinimum\
            \ amount of Throughput that is applicable for given storage type.It can\
            \ be empty if it is not applicable."
        LimitValues:
          allOf:
          - $ref: '#/components/schemas/LimitValueList'
          description: Values for the ` StorageTypeLimit$LimitName ` .
      description: Limits that are applicable for given storage type.
    StorageTypeLimitList:
      type: array
      items:
        $ref: '#/components/schemas/StorageTypeLimit'
    StorageTypeList:
      type: array
      items:
        $ref: '#/components/schemas/StorageType'
    StorageTypeName:
      type: string
    String:
      type: string
    StringList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    TLSSecurityPolicy:
      type: string
      enum:
      - Policy-Min-TLS-1-0-2019-07
      - Policy-Min-TLS-1-2-2019-07
      - Policy-Min-TLS-1-2-PFS-2023-10
    Tag:
      type: object
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          description: Specifies the `TagKey`, the name of the tag. Tag keys must
            be unique for the Elasticsearch domain to which they are attached.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          description: 'Specifies the `TagValue`, the value assigned to the corresponding
            tag key. Tag values can be null and do not have to be unique in a tag
            set. For example, you can have a key value pair in a tag set of `project
            : Trinity` and `cost-center : Trinity`'
      required:
      - Key
      - Value
      description: Specifies a key value pair for a resource tag.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      description: <p>A list of <code>Tag</code> </p>
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    TimeUnit:
      type: string
      enum:
      - HOURS
      description: <p>Specifies the unit of a maintenance schedule duration. Valid
        value is HOUR. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html"
        target="_blank">Developer Guide</a> for more information.</p>
    TotalNumberOfStages:
      type: integer
      default: 0
    UIntValue:
      type: integer
      default: 0
      minimum: 0
    UpdateElasticsearchDomainConfigRequest:
      type: object
      properties:
        DomainName:
          allOf:
          - $ref: '#/components/schemas/DomainName'
          description: The name of the Elasticsearch domain that you are updating.
        ElasticsearchClusterConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchClusterConfig'
          description: The type and number of instances to instantiate for the domain
            cluster.
        EBSOptions:
          allOf:
          - $ref: '#/components/schemas/EBSOptions'
          description: Specify the type and size of the EBS volume that you want to
            use.
        SnapshotOptions:
          allOf:
          - $ref: '#/components/schemas/SnapshotOptions'
          description: Option to set the time, in UTC format, for the daily automated
            snapshot. Default value is `0` hours.
        VPCOptions:
          allOf:
          - $ref: '#/components/schemas/VPCOptions'
          description: Options to specify the subnets and security groups for VPC
            endpoint. For more information, see [Creating a VPC](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc)
            in _VPC Endpoints for Amazon Elasticsearch Service Domains_
        CognitoOptions:
          allOf:
          - $ref: '#/components/schemas/CognitoOptions'
          description: Options to specify the Cognito user and identity pools for
            Kibana authentication. For more information, see [Amazon Cognito Authentication
            for Kibana](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html).
        AdvancedOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedOptions'
          description: Modifies the advanced option to allow references to indices
            in an HTTP request body. Must be `false` when configuring access to individual
            sub-resources. By default, the value is `true`. See [Configuration Advanced
            Options](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options)
            for more information.
        AccessPolicies:
          allOf:
          - $ref: '#/components/schemas/PolicyDocument'
          description: IAM access policy as a JSON-formatted string.
        LogPublishingOptions:
          allOf:
          - $ref: '#/components/schemas/LogPublishingOptions'
          description: Map of `LogType` and `LogPublishingOption`, each containing
            options to publish a given type of Elasticsearch log.
        DomainEndpointOptions:
          allOf:
          - $ref: '#/components/schemas/DomainEndpointOptions'
          description: Options to specify configuration that will be applied to the
            domain endpoint.
        AdvancedSecurityOptions:
          allOf:
          - $ref: '#/components/schemas/AdvancedSecurityOptionsInput'
          description: Specifies advanced security options.
        NodeToNodeEncryptionOptions:
          allOf:
          - $ref: '#/components/schemas/NodeToNodeEncryptionOptions'
          description: Specifies the NodeToNodeEncryptionOptions.
        EncryptionAtRestOptions:
          allOf:
          - $ref: '#/components/schemas/EncryptionAtRestOptions'
          description: Specifies the Encryption At Rest Options.
        AutoTuneOptions:
          allOf:
          - $ref: '#/components/schemas/AutoTuneOptions'
          description: Specifies Auto-Tune options.
        DryRun:
          allOf:
          - $ref: '#/components/schemas/DryRun'
          description: This flag, when set to True, specifies whether the `UpdateElasticsearchDomain`
            request should return the results of validation checks without actually
            applying the change. This flag, when set to True, specifies the deployment
            mechanism through which the update shall be applied on the domain. This
            will not actually perform the Update.
      required:
      - DomainName
      description: Container for the parameters to the `UpdateElasticsearchDomain`
        operation. Specifies the type and number of instances in the domain cluster.
    UpdateElasticsearchDomainConfigResponse:
      type: object
      properties:
        DomainConfig:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchDomainConfig'
          description: The status of the updated Elasticsearch domain.
        DryRunResults:
          allOf:
          - $ref: '#/components/schemas/DryRunResults'
          description: Contains result of DryRun.
      required:
      - DomainConfig
      description: The result of an `UpdateElasticsearchDomain` request. Contains
        the status of the Elasticsearch domain being updated.
    UpdatePackageRequest:
      type: object
      properties:
        PackageID:
          allOf:
          - $ref: '#/components/schemas/PackageID'
          description: Unique identifier for the package.
        PackageSource:
          $ref: '#/components/schemas/PackageSource'
        PackageDescription:
          allOf:
          - $ref: '#/components/schemas/PackageDescription'
          description: New description of the package.
        CommitMessage:
          allOf:
          - $ref: '#/components/schemas/CommitMessage'
          description: An info message for the new version which will be shown as
            part of `GetPackageVersionHistoryResponse`.
      required:
      - PackageID
      - PackageSource
      description: Container for request parameters to ` UpdatePackage ` operation.
    UpdatePackageResponse:
      type: object
      properties:
        PackageDetails:
          allOf:
          - $ref: '#/components/schemas/PackageDetails'
          description: Information about the package `PackageDetails`.
      description: Container for response returned by ` UpdatePackage ` operation.
    UpdateTimestamp:
      type: string
      format: date-time
    UpdateVpcEndpointRequest:
      type: object
      properties:
        VpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: Unique identifier of the VPC endpoint to be updated.
        VpcOptions:
          allOf:
          - $ref: '#/components/schemas/VPCOptions'
          description: The security groups and/or subnets to add, remove, or modify.
      required:
      - VpcEndpointId
      - VpcOptions
      description: Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
    UpdateVpcEndpointResponse:
      type: object
      properties:
        VpcEndpoint:
          allOf:
          - $ref: '#/components/schemas/VpcEndpoint'
          description: The endpoint to be updated.
      required:
      - VpcEndpoint
      description: Contains the configuration and status of the VPC endpoint being
        updated.
    UpgradeElasticsearchDomainRequest:
      type: object
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainName'
        TargetVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: The version of Elasticsearch that you intend to upgrade the
            domain to.
        PerformCheckOnly:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag, when set to True, indicates that an Upgrade Eligibility
            Check needs to be performed. This will not actually perform the Upgrade.
      required:
      - DomainName
      - TargetVersion
      description: Container for request parameters to ` UpgradeElasticsearchDomain
        ` operation.
    UpgradeElasticsearchDomainResponse:
      type: object
      properties:
        DomainName:
          $ref: '#/components/schemas/DomainName'
        TargetVersion:
          allOf:
          - $ref: '#/components/schemas/ElasticsearchVersionString'
          description: The version of Elasticsearch that you intend to upgrade the
            domain to.
        PerformCheckOnly:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag, when set to True, indicates that an Upgrade Eligibility
            Check needs to be performed. This will not actually perform the Upgrade.
        ChangeProgressDetails:
          $ref: '#/components/schemas/ChangeProgressDetails'
      description: Container for response returned by ` UpgradeElasticsearchDomain
        ` operation.
    UpgradeHistory:
      type: object
      properties:
        UpgradeName:
          allOf:
          - $ref: '#/components/schemas/UpgradeName'
          description: A string that describes the update briefly
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/StartTimestamp'
          description: UTC Timestamp at which the Upgrade API call was made in "yyyy-MM-ddTHH:mm:ssZ"
            format.
        UpgradeStatus:
          allOf:
          - $ref: '#/components/schemas/UpgradeStatus'
          description: "The overall status of the update. The status can take one\
            \ of the following values:\n\n  * In Progress\n  * Succeeded\n  * Succeeded\
            \ with Issues\n  * Failed"
        StepsList:
          allOf:
          - $ref: '#/components/schemas/UpgradeStepsList'
          description: A list of ` UpgradeStepItem ` s representing information about
            each step performed as pard of a specific Upgrade or Upgrade Eligibility
            Check.
      description: History of the last 10 Upgrades and Upgrade Eligibility Checks.
    UpgradeHistoryList:
      type: array
      items:
        $ref: '#/components/schemas/UpgradeHistory'
    UpgradeName:
      type: string
    UpgradeStatus:
      type: string
      enum:
      - IN_PROGRESS
      - SUCCEEDED
      - SUCCEEDED_WITH_ISSUES
      - FAILED
    UpgradeStep:
      type: string
      enum:
      - PRE_UPGRADE_CHECK
      - SNAPSHOT
      - UPGRADE
    UpgradeStepItem:
      type: object
      properties:
        UpgradeStep:
          allOf:
          - $ref: '#/components/schemas/UpgradeStep'
          description: "Represents one of 3 steps that an Upgrade or Upgrade Eligibility\
            \ Check does through:\n\n  * PreUpgradeCheck\n  * Snapshot\n  * Upgrade"
        UpgradeStepStatus:
          allOf:
          - $ref: '#/components/schemas/UpgradeStatus'
          description: "The status of a particular step during an upgrade. The status\
            \ can take one of the following values:\n\n  * In Progress\n  * Succeeded\n\
            \  * Succeeded with Issues\n  * Failed"
        Issues:
          allOf:
          - $ref: '#/components/schemas/Issues'
          description: A list of strings containing detailed information about the
            errors encountered in a particular step.
        ProgressPercent:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: The Floating point value representing progress percentage of
            a particular step.
      description: Represents a single step of the Upgrade or Upgrade Eligibility
        Check workflow.
    UpgradeStepsList:
      type: array
      items:
        $ref: '#/components/schemas/UpgradeStepItem'
    UserPoolId:
      type: string
      pattern: ^[\w-]+_[0-9a-zA-Z]+$
      minLength: 1
      maxLength: 55
    Username:
      type: string
      minLength: 1
    VPCDerivedInfo:
      type: object
      properties:
        VPCId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The VPC Id for the Elasticsearch domain. Exists only if the
            domain was created with VPCOptions.
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the subnets for VPC endpoint.
        AvailabilityZones:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: The availability zones for the Elasticsearch domain. Exists
            only if the domain was created with VPCOptions.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the security groups for VPC endpoint.
      description: Options to specify the subnets and security groups for VPC endpoint.
        For more information, see [ VPC Endpoints for Amazon Elasticsearch Service
        Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    VPCDerivedInfoStatus:
      type: object
      properties:
        Options:
          allOf:
          - $ref: '#/components/schemas/VPCDerivedInfo'
          description: Specifies the VPC options for the specified Elasticsearch domain.
        Status:
          allOf:
          - $ref: '#/components/schemas/OptionStatus'
          description: Specifies the status of the VPC options for the specified Elasticsearch
            domain.
      required:
      - Options
      - Status
      description: Status of the VPC options for the specified Elasticsearch domain.
    VPCOptions:
      type: object
      properties:
        SubnetIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the subnets for VPC endpoint.
        SecurityGroupIds:
          allOf:
          - $ref: '#/components/schemas/StringList'
          description: Specifies the security groups for VPC endpoint.
      description: Options to specify the subnets and security groups for VPC endpoint.
        For more information, see [ VPC Endpoints for Amazon Elasticsearch Service
        Domains](http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html).
    ValidationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: A description of the error.
      description: An exception for missing / invalid input fields. Gives http status
        code of 400.
    ValueStringList:
      type: array
      items:
        $ref: '#/components/schemas/NonEmptyString'
    VolumeType:
      type: string
      enum:
      - standard
      - gp2
      - io1
      - gp3
      description: <p> The type of EBS volume, standard, gp2, gp3 or io1. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-ebs"
        target="_blank">Configuring EBS-based Storage</a>for more information.</p>
    VpcEndpoint:
      type: object
      properties:
        VpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The unique identifier of the endpoint.
        VpcEndpointOwner:
          allOf:
          - $ref: '#/components/schemas/AWSAccount'
          description: The creator of the endpoint.
        DomainArn:
          allOf:
          - $ref: '#/components/schemas/DomainArn'
          description: The Amazon Resource Name (ARN) of the domain associated with
            the endpoint.
        VpcOptions:
          allOf:
          - $ref: '#/components/schemas/VPCDerivedInfo'
          description: Options to specify the subnets and security groups for an Amazon
            OpenSearch Service VPC endpoint.
        Status:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointStatus'
          description: The current status of the endpoint.
        Endpoint:
          allOf:
          - $ref: '#/components/schemas/Endpoint'
          description: The connection endpoint ID for connecting to the domain.
      description: The connection endpoint for connecting to an Amazon OpenSearch
        Service domain through a proxy.
    VpcEndpointError:
      type: object
      properties:
        VpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The unique identifier of the endpoint.
        ErrorCode:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointErrorCode'
          description: The code associated with the error.
        ErrorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A message describing the error.
      description: Error information when attempting to describe an Amazon OpenSearch
        Service-managed VPC endpoint.
    VpcEndpointErrorCode:
      type: string
      enum:
      - ENDPOINT_NOT_FOUND
      - SERVER_ERROR
      description: "<p>Specifies the error code of the failure encountered while describing\
        \ the VPC endpoint:\n     <ul>\n       <li>ENDPOINT_NOT_FOUND: Indicates that\
        \ the requested VPC endpoint does not exist.</li>\n       <li>SERVER_ERROR:\
        \ Indicates the describe endpoint operation failed due to an internal server\
        \ error.</li>\n     </ul>\n    </p>"
    VpcEndpointErrorList:
      type: array
      items:
        $ref: '#/components/schemas/VpcEndpointError'
    VpcEndpointId:
      type: string
      pattern: ^aos-[a-zA-Z0-9]*$
      minLength: 5
      maxLength: 256
    VpcEndpointIdList:
      type: array
      items:
        $ref: '#/components/schemas/VpcEndpointId'
    VpcEndpointStatus:
      type: string
      enum:
      - CREATING
      - CREATE_FAILED
      - ACTIVE
      - UPDATING
      - UPDATE_FAILED
      - DELETING
      - DELETE_FAILED
      description: "<p>Specifies the current status of the VPC endpoint:\n     <ul>\n\
        \       <li>CREATING: Indicates that the VPC endpoint is currently being created.</li>\n\
        \       <li>CREATE_FAILED: Indicates that the VPC endpoint creation failed.</li>\n\
        \       <li>ACTIVE: Indicates that the VPC endpoint is currently active.</li>\n\
        \       <li>UPDATING: Indicates that the VPC endpoint is currently being updated.</li>\n\
        \       <li>UPDATE_FAILED: Indicates that the VPC endpoint update failed.</li>\n\
        \       <li>DELETING: Indicates that the VPC endpoint is currently being deleted.</li>\n\
        \       <li>DELETE_FAILED: Indicates that the VPC endpoint deletion failed.</li>\n\
        \     </ul>\n    </p>"
    VpcEndpointSummary:
      type: object
      properties:
        VpcEndpointId:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointId'
          description: The unique identifier of the endpoint.
        VpcEndpointOwner:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The creator of the endpoint.
        DomainArn:
          allOf:
          - $ref: '#/components/schemas/DomainArn'
          description: The Amazon Resource Name (ARN) of the domain associated with
            the endpoint.
        Status:
          allOf:
          - $ref: '#/components/schemas/VpcEndpointStatus'
          description: The current status of the endpoint.
      description: Summary information for an Amazon OpenSearch Service-managed VPC
        endpoint.
    VpcEndpointSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/VpcEndpointSummary'
    VpcEndpoints:
      type: array
      items:
        $ref: '#/components/schemas/VpcEndpoint'
    ZoneAwarenessConfig:
      type: object
      properties:
        AvailabilityZoneCount:
          allOf:
          - $ref: '#/components/schemas/IntegerClass'
          description: An integer value to indicate the number of availability zones
            for a domain when zone awareness is enabled. This should be equal to number
            of subnets if VPC endpoints is enabled
      description: Specifies the zone awareness configuration for the domain cluster,
        such as the number of availability zones.
