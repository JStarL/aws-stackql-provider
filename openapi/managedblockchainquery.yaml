openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: managedblockchain_query
  x-aws-serviceName: managedblockchainquery
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2023-05-04'
  title: Amazon Managed Blockchain Query
  description: |-
    Amazon Managed Blockchain (AMB) Query provides you with convenient access to multi-blockchain network data, which makes it easier for you to extract contextual data related to blockchain activity. You can use AMB Query to read data from public blockchain networks, such as Bitcoin Mainnet and Ethereum Mainnet. You can also get information such as the current and historical balances of addresses, or you can get a list of blockchain transactions for a given time period. Additionally, you can get details of a given transaction, such as transaction events, which you can further analyze or use in business logic for your applications.
servers:
- description: The Amazon Managed Blockchain Query regional endpoint
  url: https://managedblockchain-query.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /batch-get-token-balance:
    post:
      operationId: BatchGetTokenBalance
      description: |-
        Gets the token balance for a batch of tokens by using the `BatchGetTokenBalance` action for every token in the request.

        Only the native tokens BTC and ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                getTokenBalanceInputs:
                  $ref: '#/components/schemas/GetTokenBalanceInputList'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /get-asset-contract:
    post:
      operationId: GetAssetContract
      description: |-
        Gets the information about a specific contract deployed on the blockchain.

          * The Bitcoin blockchain networks do not support this operation.

          * Metadata is currently only available for some `ERC-20` contracts. Metadata will be available for additional contracts in the future.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contractIdentifier:
                  $ref: '#/components/schemas/ContractIdentifier'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /get-token-balance:
    post:
      operationId: GetTokenBalance
      description: |-
        Gets the balance of a specific token, including native tokens, for a given address (wallet or contract) on the blockchain.

        Only the native tokens BTC and ETH, and the ERC-20, ERC-721, and ERC 1155 token standards are supported.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenIdentifier:
                  $ref: '#/components/schemas/TokenIdentifier'
                ownerIdentifier:
                  $ref: '#/components/schemas/OwnerIdentifier'
                atBlockchainInstant:
                  $ref: '#/components/schemas/BlockchainInstant'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /get-transaction:
    post:
      operationId: GetTransaction
      description: |-
        Gets the details of a transaction.

        This action will return transaction details for all transactions that are _confirmed_ on the blockchain, even if they have not reached [finality](https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transactionHash:
                  $ref: '#/components/schemas/QueryTransactionHash'
                transactionId:
                  $ref: '#/components/schemas/QueryTransactionId'
                network:
                  $ref: '#/components/schemas/QueryNetwork'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-asset-contracts:
    post:
      operationId: ListAssetContracts
      description: |-
        Lists all the contracts for a given contract type deployed by an address (either a contract address or a wallet address).

        The Bitcoin blockchain networks do not support this operation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contractFilter:
                  $ref: '#/components/schemas/ContractFilter'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-filtered-transaction-events:
    post:
      operationId: ListFilteredTransactionEvents
      description: |-
        Lists all the transaction events for an address on the blockchain.

        This operation is only supported on the Bitcoin networks.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                network:
                  $ref: '#/components/schemas/String'
                addressIdentifierFilter:
                  $ref: '#/components/schemas/AddressIdentifierFilter'
                timeFilter:
                  $ref: '#/components/schemas/TimeFilter'
                voutFilter:
                  $ref: '#/components/schemas/VoutFilter'
                confirmationStatusFilter:
                  $ref: '#/components/schemas/ConfirmationStatusFilter'
                sort:
                  $ref: '#/components/schemas/ListFilteredTransactionEventsSort'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-token-balances:
    post:
      operationId: ListTokenBalances
      description: |-
        This action returns the following for a given blockchain network:

          * Lists all token balances owned by an address (either a contract address or a wallet address).

          * Lists all token balances for all tokens created by a contract.

          * Lists all token balances for a given token.

        You must always specify the network property of the `tokenFilter` when using this operation.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerFilter:
                  $ref: '#/components/schemas/OwnerFilter'
                tokenFilter:
                  $ref: '#/components/schemas/TokenFilter'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-transaction-events:
    post:
      operationId: ListTransactionEvents
      description: |-
        Lists all the transaction events for a transaction

        This action will return transaction details for all transactions that are _confirmed_ on the blockchain, even if they have not reached [finality](https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality).
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                transactionHash:
                  $ref: '#/components/schemas/QueryTransactionHash'
                transactionId:
                  $ref: '#/components/schemas/QueryTransactionId'
                network:
                  $ref: '#/components/schemas/QueryNetwork'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/Integer'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /list-transactions:
    post:
      operationId: ListTransactions
      description: |-
        Lists all the transaction events for a transaction.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  $ref: '#/components/schemas/ChainAddress'
                network:
                  $ref: '#/components/schemas/QueryNetwork'
                fromBlockchainInstant:
                  $ref: '#/components/schemas/BlockchainInstant'
                toBlockchainInstant:
                  $ref: '#/components/schemas/BlockchainInstant'
                sort:
                  $ref: '#/components/schemas/ListTransactionsSort'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/Integer'
                confirmationStatusFilter:
                  $ref: '#/components/schemas/ConfirmationStatusFilter'
      responses:
        '200': {}
        '403':
          description: |-
            The Amazon Web Services account doesn’t have access to this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            The request processing has failed because of an internal error in the service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota has been exceeded for this resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The request or operation couldn't be performed because a service is throttling requests. The most common source of throttling errors is when you create resources that exceed your service limit for this resource type. Request a limit increase or delete unused resources, if possible.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            The resource passed is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
      required:
      - message
      description: The Amazon Web Services account doesn’t have access to this resource.
    AddressIdentifierFilter:
      type: object
      properties:
        transactionEventToAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddresses'
          description: The container for the recipient address of the transaction.
      required:
      - transactionEventToAddress
      description: This is the container for the unique public address on the blockchain.
    AssetContract:
      type: object
      properties:
        contractIdentifier:
          allOf:
          - $ref: '#/components/schemas/ContractIdentifier'
          description: The container for the contract identifier containing its blockchain
            network and address.
        tokenStandard:
          allOf:
          - $ref: '#/components/schemas/QueryTokenStandard'
          description: The token standard of the contract.
        deployerAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The address of the contract deployer.
      required:
      - contractIdentifier
      - tokenStandard
      - deployerAddress
      description: This container contains information about an contract.
    AssetContractList:
      type: array
      items:
        $ref: '#/components/schemas/AssetContract'
    BatchGetTokenBalanceErrorItem:
      type: object
      properties:
        tokenIdentifier:
          $ref: '#/components/schemas/TokenIdentifier'
        ownerIdentifier:
          $ref: '#/components/schemas/OwnerIdentifier'
        atBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code associated with the error.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The message associated with the error.
        errorType:
          allOf:
          - $ref: '#/components/schemas/ErrorType'
          description: The type of error.
      required:
      - errorCode
      - errorMessage
      - errorType
      description: Error generated from a failed `BatchGetTokenBalance` request.
    BatchGetTokenBalanceErrors:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetTokenBalanceErrorItem'
    BatchGetTokenBalanceInput:
      type: object
      properties:
        getTokenBalanceInputs:
          allOf:
          - $ref: '#/components/schemas/GetTokenBalanceInputList'
          description: An array of `BatchGetTokenBalanceInputItem` objects whose balance
            is being requested.
    BatchGetTokenBalanceInputItem:
      type: object
      properties:
        tokenIdentifier:
          $ref: '#/components/schemas/TokenIdentifier'
        ownerIdentifier:
          $ref: '#/components/schemas/OwnerIdentifier'
        atBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
      required:
      - tokenIdentifier
      - ownerIdentifier
      description: The container for the input for getting a token balance.
    BatchGetTokenBalanceOutput:
      type: object
      properties:
        tokenBalances:
          allOf:
          - $ref: '#/components/schemas/BatchGetTokenBalanceOutputList'
          description: An array of `BatchGetTokenBalanceOutputItem` objects returned
            by the response.
        errors:
          allOf:
          - $ref: '#/components/schemas/BatchGetTokenBalanceErrors'
          description: An array of `BatchGetTokenBalanceErrorItem` objects returned
            from the request.
      required:
      - tokenBalances
      - errors
    BatchGetTokenBalanceOutputItem:
      type: object
      properties:
        ownerIdentifier:
          $ref: '#/components/schemas/OwnerIdentifier'
        tokenIdentifier:
          $ref: '#/components/schemas/TokenIdentifier'
        balance:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The container for the token balance.
        atBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        lastUpdatedTime:
          $ref: '#/components/schemas/BlockchainInstant'
      required:
      - balance
      - atBlockchainInstant
      description: The container for the properties of a token balance output.
    BatchGetTokenBalanceOutputList:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetTokenBalanceOutputItem'
    BlockHash:
      type: string
      pattern: ^(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})$
    BlockchainInstant:
      type: object
      properties:
        time:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: 'The container of the `Timestamp` of the blockchain instant.


            This `timestamp` will only be recorded up to the second.'
      description: The container for time.
    ChainAddress:
      type: string
      pattern: ^[-A-Za-z0-9]{13,74}$
    ChainAddresses:
      type: array
      items:
        $ref: '#/components/schemas/ChainAddress'
    ConfirmationStatus:
      type: string
      enum:
      - FINAL
      - NONFINAL
    ConfirmationStatusFilter:
      type: object
      properties:
        include:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatusIncludeList'
          description: The container to determine whether to list results that have
            only reached [ _finality_ ](https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality).
            Transactions that have reached finality are always part of the response.
      required:
      - include
      description: The container for the `ConfirmationStatusFilter` that filters for
        the [ _finality_ ](https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality)
        of the results.
    ConfirmationStatusIncludeList:
      type: array
      items:
        $ref: '#/components/schemas/ConfirmationStatus'
    ContractFilter:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network of the contract.
        tokenStandard:
          allOf:
          - $ref: '#/components/schemas/QueryTokenStandard'
          description: The container for the token standard.
        deployerAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The network address of the deployer.
      required:
      - network
      - tokenStandard
      - deployerAddress
      description: The contract or wallet address by which to filter the request.
    ContractIdentifier:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network of the contract.
        contractAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: Container for the blockchain address about a contract.
      required:
      - network
      - contractAddress
      description: Container for the blockchain address and network information about
        a contract.
    ContractMetadata:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the token contract.
        symbol:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The symbol of the token contract.
        decimals:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The decimals used by the token contract.
      description: The metadata of the contract.
    ErrorType:
      type: string
      enum:
      - VALIDATION_EXCEPTION
      - RESOURCE_NOT_FOUND_EXCEPTION
    ExceptionMessage:
      type: string
      minLength: 1
    ExecutionStatus:
      type: string
      enum:
      - FAILED
      - SUCCEEDED
    GetAssetContractInput:
      type: object
      properties:
        contractIdentifier:
          allOf:
          - $ref: '#/components/schemas/ContractIdentifier'
          description: Contains the blockchain address and network information about
            the contract.
      required:
      - contractIdentifier
    GetAssetContractOutput:
      type: object
      properties:
        contractIdentifier:
          allOf:
          - $ref: '#/components/schemas/ContractIdentifier'
          description: Contains the blockchain address and network information about
            the contract.
        tokenStandard:
          allOf:
          - $ref: '#/components/schemas/QueryTokenStandard'
          description: The token standard of the contract requested.
        deployerAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The address of the deployer of contract.
        metadata:
          $ref: '#/components/schemas/ContractMetadata'
      required:
      - contractIdentifier
      - tokenStandard
      - deployerAddress
    GetTokenBalanceInput:
      type: object
      properties:
        tokenIdentifier:
          allOf:
          - $ref: '#/components/schemas/TokenIdentifier'
          description: The container for the identifier for the token, including the
            unique token ID and its blockchain network.
        ownerIdentifier:
          allOf:
          - $ref: '#/components/schemas/OwnerIdentifier'
          description: The container for the identifier for the owner.
        atBlockchainInstant:
          allOf:
          - $ref: '#/components/schemas/BlockchainInstant'
          description: 'The time for when the TokenBalance is requested or the current
            time if a time is not provided in the request.


            This time will only be recorded up to the second.'
      required:
      - tokenIdentifier
      - ownerIdentifier
    GetTokenBalanceInputList:
      type: array
      items:
        $ref: '#/components/schemas/BatchGetTokenBalanceInputItem'
    GetTokenBalanceOutput:
      type: object
      properties:
        ownerIdentifier:
          $ref: '#/components/schemas/OwnerIdentifier'
        tokenIdentifier:
          $ref: '#/components/schemas/TokenIdentifier'
        balance:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The container for the token balance.
        atBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        lastUpdatedTime:
          $ref: '#/components/schemas/BlockchainInstant'
      required:
      - balance
      - atBlockchainInstant
    GetTransactionInput:
      type: object
      properties:
        transactionHash:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionHash'
          description: The hash of a transaction. It is generated when a transaction
            is created.
        transactionId:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionId'
          description: 'The identifier of a Bitcoin transaction. It is generated when
            a transaction is created.


            `transactionId` is only supported on the Bitcoin networks.'
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transaction occurred.
      required:
      - network
    GetTransactionOutput:
      type: object
      properties:
        transaction:
          allOf:
          - $ref: '#/components/schemas/Transaction'
          description: Contains the details of the transaction.
      required:
      - transaction
    InternalServerException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: Specifies the `retryAfterSeconds` value.
      required:
      - message
      description: The request processing has failed because of an internal error
        in the service.
    ListAssetContractsInput:
      type: object
      properties:
        contractFilter:
          allOf:
          - $ref: '#/components/schemas/ContractFilter'
          description: Contains the filter parameter for the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of contracts to list.


            Default: `100`


            Even if additional results can be retrieved, the request can return less
            results than `maxResults` or an empty array of results.


            To retrieve the next set of results, make another request with the returned
            `nextToken` value. The value of `nextToken` is `null` when there are no
            more results to return'
      required:
      - contractFilter
    ListAssetContractsOutput:
      type: object
      properties:
        contracts:
          allOf:
          - $ref: '#/components/schemas/AssetContractList'
          description: An array of contract objects that contain the properties for
            each contract.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - contracts
    ListFilteredTransactionEventsInput:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The blockchain network where the transaction occurred.


            Valid Values: `BITCOIN_MAINNET` | `BITCOIN_TESTNET`'
        addressIdentifierFilter:
          allOf:
          - $ref: '#/components/schemas/AddressIdentifierFilter'
          description: This is the unique public address on the blockchain for which
            the transaction events are being requested.
        timeFilter:
          allOf:
          - $ref: '#/components/schemas/TimeFilter'
          description: This container specifies the time frame for the transaction
            events returned in the response.
        voutFilter:
          allOf:
          - $ref: '#/components/schemas/VoutFilter'
          description: This container specifies filtering attributes related to BITCOIN_VOUT
            event types
        confirmationStatusFilter:
          $ref: '#/components/schemas/ConfirmationStatusFilter'
        sort:
          allOf:
          - $ref: '#/components/schemas/ListFilteredTransactionEventsSort'
          description: The order by which the results will be sorted.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of transaction events to list.


            Default: `100`


            Even if additional results can be retrieved, the request can return less
            results than `maxResults` or an empty array of results.


            To retrieve the next set of results, make another request with the returned
            `nextToken` value. The value of `nextToken` is `null` when there are no
            more results to return'
      required:
      - network
      - addressIdentifierFilter
    ListFilteredTransactionEventsOutput:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/TransactionEventList'
          description: The transaction events returned by the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - events
    ListFilteredTransactionEventsSort:
      type: object
      properties:
        sortBy:
          allOf:
          - $ref: '#/components/schemas/ListFilteredTransactionEventsSortBy'
          description: Container on how the results will be sorted by?
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The container for the _sort order_ for `ListFilteredTransactionEvents`.
            The `SortOrder` field only accepts the values `ASCENDING` and `DESCENDING`.
            Not providing `SortOrder` will default to `ASCENDING`.
      description: 'Lists all the transaction events for an address on the blockchain.


        This operation is only supported on the Bitcoin blockchain networks.'
    ListFilteredTransactionEventsSortBy:
      type: string
      enum:
      - blockchainInstant
    ListTokenBalancesInput:
      type: object
      properties:
        ownerFilter:
          allOf:
          - $ref: '#/components/schemas/OwnerFilter'
          description: The contract or wallet address on the blockchain network by
            which to filter the request. You must specify the `address` property of
            the `ownerFilter` when listing balances of tokens owned by the address.
        tokenFilter:
          allOf:
          - $ref: '#/components/schemas/TokenFilter'
          description: 'The contract address or a token identifier on the blockchain
            network by which to filter the request. You must specify the `contractAddress`
            property of this container when listing tokens minted by a contract.


            You must always specify the network property of this container when using
            this operation.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of token balances to return.


            Default: `100`


            Even if additional results can be retrieved, the request can return less
            results than `maxResults` or an empty array of results.


            To retrieve the next set of results, make another request with the returned
            `nextToken` value. The value of `nextToken` is `null` when there are no
            more results to return'
      required:
      - tokenFilter
    ListTokenBalancesOutput:
      type: object
      properties:
        tokenBalances:
          allOf:
          - $ref: '#/components/schemas/TokenBalanceList'
          description: An array of `TokenBalance` objects. Each object contains details
            about the token balance.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - tokenBalances
    ListTransactionEventsInput:
      type: object
      properties:
        transactionHash:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionHash'
          description: The hash of a transaction. It is generated when a transaction
            is created.
        transactionId:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionId'
          description: 'The identifier of a Bitcoin transaction. It is generated when
            a transaction is created.


            `transactionId` is only supported on the Bitcoin networks.'
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transaction events occurred.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of transaction events to list.


            Default: `100`


            Even if additional results can be retrieved, the request can return less
            results than `maxResults` or an empty array of results.


            To retrieve the next set of results, make another request with the returned
            `nextToken` value. The value of `nextToken` is `null` when there are no
            more results to return'
      required:
      - network
    ListTransactionEventsOutput:
      type: object
      properties:
        events:
          allOf:
          - $ref: '#/components/schemas/TransactionEventList'
          description: An array of `TransactionEvent` objects. Each object contains
            details about the transaction events.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - events
    ListTransactionsInput:
      type: object
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The address (either a contract or wallet), whose transactions
            are being requested.
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transactions occurred.
        fromBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        toBlockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        sort:
          allOf:
          - $ref: '#/components/schemas/ListTransactionsSort'
          description: The order by which the results will be sorted.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The maximum number of transactions to list.


            Default: `100`


            Even if additional results can be retrieved, the request can return less
            results than `maxResults` or an empty array of results.


            To retrieve the next set of results, make another request with the returned
            `nextToken` value. The value of `nextToken` is `null` when there are no
            more results to return'
        confirmationStatusFilter:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatusFilter'
          description: This filter is used to include transactions in the response
            that haven't reached [ _finality_ ](https://docs.aws.amazon.com/managed-blockchain/latest/ambq-dg/key-concepts.html#finality).
            Transactions that have reached finality are always part of the response.
      required:
      - address
      - network
    ListTransactionsOutput:
      type: object
      properties:
        transactions:
          allOf:
          - $ref: '#/components/schemas/TransactionOutputList'
          description: The array of transactions returned by the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The pagination token that indicates the next set of results
            to retrieve.
      required:
      - transactions
    ListTransactionsSort:
      type: object
      properties:
        sortBy:
          allOf:
          - $ref: '#/components/schemas/ListTransactionsSortBy'
          description: Defaults to the value `TRANSACTION_TIMESTAMP`.
        sortOrder:
          allOf:
          - $ref: '#/components/schemas/SortOrder'
          description: The container for the _sort order_ for `ListTransactions`.
            The `SortOrder` field only accepts the values `ASCENDING` and `DESCENDING`.
            Not providing `SortOrder` will default to `ASCENDING`.
      description: The container for determining how the list transaction result will
        be sorted.
    ListTransactionsSortBy:
      type: string
      enum:
      - TRANSACTION_TIMESTAMP
    NextToken:
      type: string
      minLength: 0
      maxLength: 131070
    OwnerFilter:
      type: object
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The contract or wallet address.
      required:
      - address
      description: The container for the owner information to filter by.
    OwnerIdentifier:
      type: object
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The contract or wallet address for the owner.
      required:
      - address
      description: The container for the owner identifier.
    QueryNetwork:
      type: string
      enum:
      - ETHEREUM_MAINNET
      - ETHEREUM_SEPOLIA_TESTNET
      - BITCOIN_MAINNET
      - BITCOIN_TESTNET
    QueryTokenId:
      type: string
      pattern: ^[a-zA-Z0-9]{1,66}$
    QueryTokenStandard:
      type: string
      enum:
      - ERC20
      - ERC721
      - ERC1155
    QueryTransactionEventType:
      type: string
      enum:
      - ERC20_TRANSFER
      - ERC20_MINT
      - ERC20_BURN
      - ERC20_DEPOSIT
      - ERC20_WITHDRAWAL
      - ERC721_TRANSFER
      - ERC1155_TRANSFER
      - BITCOIN_VIN
      - BITCOIN_VOUT
      - INTERNAL_ETH_TRANSFER
      - ETH_TRANSFER
    QueryTransactionHash:
      type: string
      pattern: ^(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})$
    QueryTransactionId:
      type: string
      pattern: ^(0x[A-Fa-f0-9]{64}|[A-Fa-f0-9]{64})$
    QuotaCode:
      type: string
    ResourceId:
      type: string
    ResourceNotFoundException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The `resourceId` of the resource that caused the exception.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The `resourceType` of the resource that caused the exception.
      required:
      - message
      - resourceId
      - resourceType
      description: The resource was not found.
    ResourceType:
      type: string
      enum:
      - collection
    ServiceCode:
      type: string
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          description: The `resourceId` of the resource that caused the exception.
        resourceType:
          allOf:
          - $ref: '#/components/schemas/ResourceType'
          description: The `resourceType` of the resource that caused the exception.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: The container for the `serviceCode`.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: The container for the `quotaCode`.
      required:
      - message
      - resourceId
      - resourceType
      - serviceCode
      - quotaCode
      description: The service quota has been exceeded for this resource.
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    ThrottlingException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
        serviceCode:
          allOf:
          - $ref: '#/components/schemas/ServiceCode'
          description: The container for the `serviceCode`.
        quotaCode:
          allOf:
          - $ref: '#/components/schemas/QuotaCode'
          description: The container for the `quotaCode`.
        retryAfterSeconds:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The container of the `retryAfterSeconds` value.
      required:
      - message
      - serviceCode
      - quotaCode
      description: The request or operation couldn't be performed because a service
        is throttling requests. The most common source of throttling errors is when
        you create resources that exceed your service limit for this resource type.
        Request a limit increase or delete unused resources, if possible.
    TimeFilter:
      type: object
      properties:
        from:
          $ref: '#/components/schemas/BlockchainInstant'
        to:
          $ref: '#/components/schemas/BlockchainInstant'
      description: This container is used to specify a time frame.
    TokenBalance:
      type: object
      properties:
        ownerIdentifier:
          allOf:
          - $ref: '#/components/schemas/OwnerIdentifier'
          description: The container for the identifier of the owner.
        tokenIdentifier:
          allOf:
          - $ref: '#/components/schemas/TokenIdentifier'
          description: The identifier for the token, including the unique token ID
            and its blockchain network.
        balance:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The container of the token balance.
        atBlockchainInstant:
          allOf:
          - $ref: '#/components/schemas/BlockchainInstant'
          description: 'The time for when the TokenBalance is requested or the current
            time if a time is not provided in the request.


            This time will only be recorded up to the second.'
        lastUpdatedTime:
          allOf:
          - $ref: '#/components/schemas/BlockchainInstant'
          description: The `Timestamp` of the last transaction at which the balance
            for the token in the wallet was updated.
      required:
      - balance
      - atBlockchainInstant
      description: The balance of the token.
    TokenBalanceList:
      type: array
      items:
        $ref: '#/components/schemas/TokenBalance'
    TokenFilter:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network of the token.
        contractAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: This is the address of the contract.
        tokenId:
          allOf:
          - $ref: '#/components/schemas/QueryTokenId'
          description: The unique identifier of the token.
      required:
      - network
      description: 'The container of the token filter like the contract address on
        a given blockchain network or a unique token identifier on a given blockchain
        network.


        You must always specify the network property of this container when using
        this operation.'
    TokenIdentifier:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network of the token.
        contractAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: This is the token's contract address.
        tokenId:
          allOf:
          - $ref: '#/components/schemas/QueryTokenId'
          description: 'The unique identifier of the token.


            For native tokens, use the 3 character abbreviation that best matches
            your token. For example, btc for Bitcoin, eth for Ether, etc. For all
            other token types you must specify the `tokenId` in the 64 character hexadecimal
            `tokenid` format.'
      required:
      - network
      description: 'The container for the identifier for the token including the unique
        token ID and its blockchain network.


        Only the native tokens BTC and ETH, and the ERC-20, ERC-721, and ERC 1155
        token standards are supported.'
    Transaction:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transaction occurred.
        blockHash:
          allOf:
          - $ref: '#/components/schemas/BlockHash'
          description: The block hash is a unique identifier for a block. It is a
            fixed-size string that is calculated by using the information in the block.
            The block hash is used to verify the integrity of the data in the block.
        transactionHash:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionHash'
          description: The hash of a transaction. It is generated when a transaction
            is created.
        blockNumber:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The block number in which the transaction is recorded.
        transactionTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The `Timestamp` of the transaction.
        transactionIndex:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The index of the transaction within a blockchain.
        numberOfTransactions:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The number of transactions in the block.
        to:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The identifier of the transaction. It is generated whenever
            a transaction is verified and added to the blockchain.
        from:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The initiator of the transaction. It is either in the form
            a public key or a contract address.
        contractAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The blockchain address for the contract.
        gasUsed:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The amount of gas used for the transaction.
        cumulativeGasUsed:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The amount of gas used up to the specified point in the block.
        effectiveGasPrice:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The effective gas price.
        signatureV:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The signature of the transaction. The Z coordinate of a point
            V.
        signatureR:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The signature of the transaction. The X coordinate of a point
            R.
        signatureS:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The signature of the transaction. The Y coordinate of a point
            S.
        transactionFee:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The transaction fee.
        transactionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a Bitcoin transaction. It is generated when
            a transaction is created.
        confirmationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatus'
          description: Specifies whether the transaction has reached Finality.
        executionStatus:
          allOf:
          - $ref: '#/components/schemas/ExecutionStatus'
          description: Identifies whether the transaction has succeeded or failed.
      required:
      - network
      - transactionHash
      - transactionTimestamp
      - transactionIndex
      - numberOfTransactions
      - to
      description: "There are two possible types of transactions used for this data\
        \ type:\n\n  * A Bitcoin transaction is a movement of BTC from one address\
        \ to another.\n\n  * An Ethereum transaction refers to an action initiated\
        \ by an externally owned account, which is an account managed by a human,\
        \ not a contract. For example, if Bob sends Alice 1 ETH, Bob's account must\
        \ be debited and Alice's must be credited. This state-changing action occurs\
        \ within a transaction."
    TransactionEvent:
      type: object
      properties:
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transaction occurred.
        transactionHash:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionHash'
          description: The hash of a transaction. It is generated when a transaction
            is created.
        eventType:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionEventType'
          description: The type of transaction event.
        from:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The wallet address initiating the transaction. It can either
            be a public key or a contract.
        to:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The wallet address receiving the transaction. It can either
            be a public key or a contract.
        value:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The value that was transacted.
        contractAddress:
          allOf:
          - $ref: '#/components/schemas/ChainAddress'
          description: The blockchain address for the contract
        tokenId:
          allOf:
          - $ref: '#/components/schemas/QueryTokenId'
          description: The unique identifier for the token involved in the transaction.
        transactionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The identifier of a Bitcoin transaction. It is generated when
            a transaction is created.
        voutIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The position of the transaction output in the transaction output
            list.
        voutSpent:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: 'Specifies if the transaction output is spent or unspent. This
            is only returned for BITCOIN_VOUT event types.


            This is only returned for `BITCOIN_VOUT` event types.'
        spentVoutTransactionId:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The transactionId that _created_ the spent transaction output.


            This is only returned for `BITCOIN_VIN` event types.'
        spentVoutTransactionHash:
          allOf:
          - $ref: '#/components/schemas/String'
          description: 'The transactionHash that _created_ the spent transaction output.


            This is only returned for `BITCOIN_VIN` event types.'
        spentVoutIndex:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: 'The position of the spent transaction output in the output
            list of the _creating transaction_.


            This is only returned for `BITCOIN_VIN` event types.'
        blockchainInstant:
          $ref: '#/components/schemas/BlockchainInstant'
        confirmationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatus'
          description: This container specifies whether the transaction has reached
            Finality.
      required:
      - network
      - transactionHash
      - eventType
      description: The container for the properties of a transaction event.
    TransactionEventList:
      type: array
      items:
        $ref: '#/components/schemas/TransactionEvent'
    TransactionOutputItem:
      type: object
      properties:
        transactionHash:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionHash'
          description: The hash of a transaction. It is generated when a transaction
            is created.
        transactionId:
          allOf:
          - $ref: '#/components/schemas/QueryTransactionId'
          description: The identifier of a Bitcoin transaction. It is generated when
            a transaction is created.
        network:
          allOf:
          - $ref: '#/components/schemas/QueryNetwork'
          description: The blockchain network where the transaction occurred.
        transactionTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The time when the transaction occurred.
        confirmationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatus'
          description: Specifies whether to list transactions that have not reached
            Finality.
      required:
      - transactionHash
      - network
      - transactionTimestamp
      description: The container of the transaction output.
    TransactionOutputList:
      type: array
      items:
        $ref: '#/components/schemas/TransactionOutputItem'
    ValidationException:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/ExceptionMessage'
          description: The container for the exception message.
        reason:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionReason'
          description: The container for the reason for the exception
        fieldList:
          allOf:
          - $ref: '#/components/schemas/ValidationExceptionFieldList'
          description: The container for the `fieldList` of the exception.
      required:
      - message
      - reason
      description: The resource passed is invalid.
    ValidationExceptionField:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the field that triggered the `ValidationException`.
        message:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The `ValidationException` message.
      required:
      - name
      - message
      description: The resource passed is invalid.
    ValidationExceptionFieldList:
      type: array
      items:
        $ref: '#/components/schemas/ValidationExceptionField'
    ValidationExceptionReason:
      type: string
      enum:
      - unknownOperation
      - cannotParse
      - fieldValidationFailed
      - other
    VoutFilter:
      type: object
      properties:
        voutSpent:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Specifies if the transaction output is spent or unspent.
      required:
      - voutSpent
      description: This container specifies filtering attributes related to `BITCOIN_VOUT`
        event types
