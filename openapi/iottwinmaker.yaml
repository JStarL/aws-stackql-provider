openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  x-stackql-serviceName: iottwinmaker
  x-aws-serviceName: iottwinmaker
  x-aws-protocol: aws.protocols#restJson1
  x-dateGenerated: '2025-05-07'
  version: '2021-11-29'
  title: AWS IoT TwinMaker
  description: |-
    IoT TwinMaker is a service with which you can build operational digital twins of physical systems. IoT TwinMaker overlays measurements and analysis from real-world sensors, cameras, and enterprise applications so you can create data visualizations to monitor your physical factory, building, or industrial plant. You can use this real-world data to monitor operations and diagnose and repair errors.
servers:
- description: The AWS IoT TwinMaker regional endpoint
  url: https://iottwinmaker.{region}.amazonaws.com
  variables:
    region:
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
      default: us-east-1
paths:
  /workspaces/{workspaceId}/entity-properties:
    post:
      operationId: BatchPutPropertyValues
      description: |-
        Sets values for multiple time series properties.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entries:
                  $ref: '#/components/schemas/Entries'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /metadata-transfer-jobs/{metadataTransferJobId}/cancel:
    put:
      operationId: CancelMetadataTransferJob
      description: |-
        Cancels the metadata transfer job.
      parameters:
      - name: metadataTransferJobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/component-types/{componentTypeId}:
    post:
      operationId: CreateComponentType
      description: |-
        Creates a component type.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: componentTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ComponentTypeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isSingleton:
                  $ref: '#/components/schemas/Boolean'
                description:
                  $ref: '#/components/schemas/Description'
                propertyDefinitions:
                  $ref: '#/components/schemas/PropertyDefinitionsRequest'
                extendsFrom:
                  $ref: '#/components/schemas/ExtendsFrom'
                functions:
                  $ref: '#/components/schemas/FunctionsRequest'
                tags:
                  $ref: '#/components/schemas/TagMap'
                propertyGroups:
                  $ref: '#/components/schemas/PropertyGroupsRequest'
                componentTypeName:
                  $ref: '#/components/schemas/ComponentTypeName'
                compositeComponentTypes:
                  $ref: '#/components/schemas/CompositeComponentTypesRequest'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteComponentType
      description: |-
        Deletes a component type.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: componentTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ComponentTypeId'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetComponentType
      description: |-
        Retrieves information about a component type.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: componentTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ComponentTypeId'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateComponentType
      description: |-
        Updates information in a component type.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: componentTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ComponentTypeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isSingleton:
                  $ref: '#/components/schemas/Boolean'
                description:
                  $ref: '#/components/schemas/Description'
                propertyDefinitions:
                  $ref: '#/components/schemas/PropertyDefinitionsRequest'
                extendsFrom:
                  $ref: '#/components/schemas/ExtendsFrom'
                functions:
                  $ref: '#/components/schemas/FunctionsRequest'
                propertyGroups:
                  $ref: '#/components/schemas/PropertyGroupsRequest'
                componentTypeName:
                  $ref: '#/components/schemas/ComponentTypeName'
                compositeComponentTypes:
                  $ref: '#/components/schemas/CompositeComponentTypesRequest'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entities:
    post:
      operationId: CreateEntity
      description: |-
        Creates an entity.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  $ref: '#/components/schemas/EntityId'
                entityName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                components:
                  $ref: '#/components/schemas/ComponentsMapRequest'
                compositeComponents:
                  $ref: '#/components/schemas/CompositeComponentsMapRequest'
                parentEntityId:
                  $ref: '#/components/schemas/ParentEntityId'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /metadata-transfer-jobs:
    post:
      operationId: CreateMetadataTransferJob
      description: |-
        Creates a new metadata transfer job.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metadataTransferJobId:
                  $ref: '#/components/schemas/Id'
                description:
                  $ref: '#/components/schemas/Description'
                sources:
                  $ref: '#/components/schemas/SourceConfigurations'
                destination:
                  $ref: '#/components/schemas/DestinationConfiguration'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/scenes:
    post:
      operationId: CreateScene
      description: |-
        Creates a scene.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sceneId:
                  $ref: '#/components/schemas/Id'
                contentLocation:
                  $ref: '#/components/schemas/S3Url'
                description:
                  $ref: '#/components/schemas/Description'
                capabilities:
                  $ref: '#/components/schemas/SceneCapabilities'
                tags:
                  $ref: '#/components/schemas/TagMap'
                sceneMetadata:
                  $ref: '#/components/schemas/SceneMetadataMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/sync-jobs/{syncSource}:
    post:
      operationId: CreateSyncJob
      description: |-
        This action creates a SyncJob.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: syncSource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SyncSource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                syncRole:
                  $ref: '#/components/schemas/RoleArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteSyncJob
      description: |-
        Delete the SyncJob.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: syncSource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SyncSource'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}:
    post:
      operationId: CreateWorkspace
      description: |-
        Creates a workplace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                s3Location:
                  $ref: '#/components/schemas/S3Location'
                role:
                  $ref: '#/components/schemas/RoleArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    delete:
      operationId: DeleteWorkspace
      description: |-
        Deletes a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetWorkspace
      description: |-
        Retrieves information about a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/IdOrArn'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateWorkspace
      description: |-
        Updates a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/Description'
                role:
                  $ref: '#/components/schemas/RoleArn'
                s3Location:
                  $ref: '#/components/schemas/S3Location'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entities/{entityId}:
    delete:
      operationId: DeleteEntity
      description: |-
        Deletes an entity.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: entityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      - name: isRecursive
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Boolean'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetEntity
      description: |-
        Retrieves information about an entity.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: entityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateEntity
      description: |-
        Updates an entity.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: entityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityName:
                  $ref: '#/components/schemas/EntityName'
                description:
                  $ref: '#/components/schemas/Description'
                componentUpdates:
                  $ref: '#/components/schemas/ComponentUpdatesMapRequest'
                compositeComponentUpdates:
                  $ref: '#/components/schemas/CompositeComponentUpdatesMapRequest'
                parentEntityUpdate:
                  $ref: '#/components/schemas/ParentEntityUpdateRequest'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '409':
          description: |-
            A conflict occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/scenes/{sceneId}:
    delete:
      operationId: DeleteScene
      description: |-
        Deletes a scene.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: sceneId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    get:
      operationId: GetScene
      description: |-
        Retrieves information about a scene.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: sceneId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    put:
      operationId: UpdateScene
      description: |-
        Updates a scene.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: sceneId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentLocation:
                  $ref: '#/components/schemas/S3Url'
                description:
                  $ref: '#/components/schemas/Description'
                capabilities:
                  $ref: '#/components/schemas/SceneCapabilities'
                sceneMetadata:
                  $ref: '#/components/schemas/SceneMetadataMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /queries/execution:
    post:
      operationId: ExecuteQuery
      description: |-
        Run queries to access information from your knowledge graph of entities within individual workspaces.

        The ExecuteQuery action only works with [Amazon Web Services Java SDK2](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/home.html). ExecuteQuery will not work with any Amazon Web Services Java SDK version < 2.x.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                workspaceId:
                  $ref: '#/components/schemas/Id'
                queryStatement:
                  $ref: '#/components/schemas/QueryStatement'
                maxResults:
                  $ref: '#/components/schemas/QueryServiceMaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
  /metadata-transfer-jobs/{metadataTransferJobId}:
    get:
      operationId: GetMetadataTransferJob
      description: |-
        Gets a nmetadata transfer job.
      parameters:
      - name: metadataTransferJobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /pricingplan:
    get:
      operationId: GetPricingPlan
      description: |-
        Gets the pricing plan.
      parameters: []
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
    post:
      operationId: UpdatePricingPlan
      description: |-
        Update the pricing plan.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pricingMode:
                  $ref: '#/components/schemas/PricingMode'
                bundleNames:
                  $ref: '#/components/schemas/PricingBundles'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entity-properties/value:
    post:
      operationId: GetPropertyValue
      description: |-
        Gets the property values for a component, component type, entity, or workspace.

        You must specify a value for either `componentName`, `componentTypeId`, `entityId`, or `workspaceId`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentName:
                  $ref: '#/components/schemas/Name'
                componentPath:
                  $ref: '#/components/schemas/ComponentPath'
                componentTypeId:
                  $ref: '#/components/schemas/ComponentTypeId'
                entityId:
                  $ref: '#/components/schemas/EntityId'
                selectedProperties:
                  $ref: '#/components/schemas/SelectedPropertyList'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                propertyGroupName:
                  $ref: '#/components/schemas/Name'
                tabularConditions:
                  $ref: '#/components/schemas/TabularConditions'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '424':
          description: |-
            The connector timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTimeoutException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entity-properties/history:
    post:
      operationId: GetPropertyValueHistory
      description: |-
        Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.

        You must specify a value for `workspaceId`. For entity-specific queries, specify values for `componentName` and `entityId`. For cross-entity quries, specify a value for `componentTypeId`.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityId:
                  $ref: '#/components/schemas/EntityId'
                componentName:
                  $ref: '#/components/schemas/Name'
                componentPath:
                  $ref: '#/components/schemas/ComponentPath'
                componentTypeId:
                  $ref: '#/components/schemas/ComponentTypeId'
                selectedProperties:
                  $ref: '#/components/schemas/SelectedPropertyList'
                propertyFilters:
                  $ref: '#/components/schemas/PropertyFilters'
                startDateTime:
                  $ref: '#/components/schemas/Timestamp'
                endDateTime:
                  $ref: '#/components/schemas/Timestamp'
                interpolation:
                  $ref: '#/components/schemas/InterpolationParameters'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                orderByTime:
                  $ref: '#/components/schemas/OrderByTime'
                startTime:
                  $ref: '#/components/schemas/Time'
                endTime:
                  $ref: '#/components/schemas/Time'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '424':
          description: |-
            The connector timed out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTimeoutException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /sync-jobs/{syncSource}:
    get:
      operationId: GetSyncJob
      description: |-
        Gets the SyncJob.
      parameters:
      - name: syncSource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SyncSource'
      - name: workspace
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/component-types-list:
    post:
      operationId: ListComponentTypes
      description: |-
        Lists all component types in a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListComponentTypesFilters'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entities/{entityId}/components-list:
    post:
      operationId: ListComponents
      description: |-
        This API lists the components of an entity.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: entityId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentPath:
                  $ref: '#/components/schemas/ComponentPath'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/entities-list:
    post:
      operationId: ListEntities
      description: |-
        Lists all entities in a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/ListEntitiesFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /metadata-transfer-jobs-list:
    post:
      operationId: ListMetadataTransferJobs
      description: |-
        Lists the metadata transfer jobs.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceType:
                  $ref: '#/components/schemas/SourceType'
                destinationType:
                  $ref: '#/components/schemas/DestinationType'
                filters:
                  $ref: '#/components/schemas/ListMetadataTransferJobsFilters'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/properties-list:
    post:
      operationId: ListProperties
      description: |-
        This API lists the properties of a component.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentName:
                  $ref: '#/components/schemas/Name'
                componentPath:
                  $ref: '#/components/schemas/ComponentPath'
                entityId:
                  $ref: '#/components/schemas/EntityId'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/scenes-list:
    post:
      operationId: ListScenes
      description: |-
        Lists all scenes in a workspace.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/sync-jobs-list:
    post:
      operationId: ListSyncJobs
      description: |-
        List all SyncJobs.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list:
    post:
      operationId: ListSyncResources
      description: |-
        Lists the sync resources.
      parameters:
      - name: workspaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: syncSource
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SyncSource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  $ref: '#/components/schemas/SyncResourceFilters'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags-list:
    post:
      operationId: ListTagsForResource
      description: |-
        Lists all tags associated with a resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceARN:
                  $ref: '#/components/schemas/TwinMakerArn'
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
  /workspaces-list:
    post:
      operationId: ListWorkspaces
      description: |-
        Retrieves information about workspaces in the current account.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  $ref: '#/components/schemas/MaxResults'
                nextToken:
                  $ref: '#/components/schemas/NextToken'
      responses:
        '200': {}
        '500':
          description: |-
            An unexpected error has occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '402':
          description: |-
            The service quota was exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
        '429':
          description: |-
            The rate exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '400':
          description: |-
            Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
  /tags:
    post:
      operationId: TagResource
      description: |-
        Adds tags to a resource.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resourceARN:
                  $ref: '#/components/schemas/TwinMakerArn'
                tags:
                  $ref: '#/components/schemas/TagMap'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '400':
          description: |-
            The number of tags exceeds the limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
    delete:
      operationId: UntagResource
      description: |-
        Removes tags from a resource.
      parameters:
      - name: resourceARN
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TwinMakerArn'
      - name: tagKeys
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/TagKeyList'
      responses:
        '200': {}
        '403':
          description: |-
            Access is denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '404':
          description: |-
            The resource wasn't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
components:
  schemas:
    AccessDeniedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Access is denied.
    BatchPutPropertyError:
      type: object
      properties:
        errorCode:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error code.
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The error message.
        entry:
          allOf:
          - $ref: '#/components/schemas/PropertyValueEntry'
          description: An object that contains information about errors returned by
            the `BatchPutProperty` action.
      required:
      - errorCode
      - errorMessage
      - entry
      description: An error returned by the `BatchPutProperty` action.
    BatchPutPropertyErrorEntry:
      type: object
      properties:
        errors:
          allOf:
          - $ref: '#/components/schemas/Errors'
          description: A list of objects that contain information about errors returned
            by the `BatchPutProperty` action.
      required:
      - errors
      description: An object that contains information about errors returned by the
        `BatchPutProperty` action.
    BatchPutPropertyValuesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the properties to set.
        entries:
          allOf:
          - $ref: '#/components/schemas/Entries'
          description: An object that maps strings to the property value entries to
            set. Each string in the mapping must be unique to this object.
      required:
      - workspaceId
      - entries
    BatchPutPropertyValuesResponse:
      type: object
      properties:
        errorEntries:
          allOf:
          - $ref: '#/components/schemas/ErrorEntries'
          description: Entries that caused errors in the batch put operation.
      required:
      - errorEntries
    Boolean:
      type: boolean
    BundleInformation:
      type: object
      properties:
        bundleNames:
          allOf:
          - $ref: '#/components/schemas/PricingBundles'
          description: The bundle names.
        pricingTier:
          allOf:
          - $ref: '#/components/schemas/PricingTier'
          description: The pricing tier.
      required:
      - bundleNames
      description: Information about the pricing bundle.
    BundleName:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    CancelMetadataTransferJobRequest:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
      required:
      - metadataTransferJobId
    CancelMetadataTransferJobResponse:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The metadata transfer job ARN.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: Used to update the DateTime property.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobStatus'
          description: The metadata transfer job's status.
        progress:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobProgress'
          description: The metadata transfer job's progress.
      required:
      - metadataTransferJobId
      - arn
      - updateDateTime
      - status
    ColumnDescription:
      type: object
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ColumnName'
          description: The name of the column description.
        type:
          allOf:
          - $ref: '#/components/schemas/ColumnType'
          description: The type of the column description.
      description: A description of the column in the query results.
    ColumnDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/ColumnDescription'
    ColumnName:
      type: string
      pattern: ^.*$
    ColumnType:
      type: string
      enum:
      - NODE
      - EDGE
      - VALUE
    ComponentPath:
      type: string
      pattern: ^[a-zA-Z_\-0-9/]+$
      minLength: 1
      maxLength: 2048
    ComponentPropertyGroupRequest:
      type: object
      properties:
        groupType:
          allOf:
          - $ref: '#/components/schemas/GroupType'
          description: The group type.
        propertyNames:
          allOf:
          - $ref: '#/components/schemas/PropertyNames'
          description: The property names.
        updateType:
          allOf:
          - $ref: '#/components/schemas/PropertyGroupUpdateType'
          description: The update type.
      description: The component property group request.
    ComponentPropertyGroupRequests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentPropertyGroupRequest'
    ComponentPropertyGroupResponse:
      type: object
      properties:
        groupType:
          allOf:
          - $ref: '#/components/schemas/GroupType'
          description: The group type.
        propertyNames:
          allOf:
          - $ref: '#/components/schemas/PropertyNames'
          description: The names of properties
        isInherited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property group is
            inherited from a parent entity
      required:
      - groupType
      - propertyNames
      - isInherited
      description: The component property group response.
    ComponentPropertyGroupResponses:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentPropertyGroupResponse'
    ComponentRequest:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component request.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        properties:
          allOf:
          - $ref: '#/components/schemas/PropertyRequests'
          description: An object that maps strings to the properties to set in the
            component type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
          description: The property groups.
      description: An object that sets information about a component type create or
        update request.
    ComponentResponse:
      type: object
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the component type.
        definedIn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the property definition set in the request.
        properties:
          allOf:
          - $ref: '#/components/schemas/PropertyResponses'
          description: An object that maps strings to the properties to set in the
            component type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupResponses'
          description: The property groups.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: The syncSource of the sync job, if this entity was created
            by a sync job.
        areAllPropertiesReturned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag notes whether all properties of the component are
            returned in the API response. The maximum number of properties returned
            is 800.
        compositeComponents:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentResponse'
          description: This lists objects that contain information about the `compositeComponents`.
        areAllCompositeComponentsReturned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag notes whether all `compositeComponents` are returned
            in the API response.
      description: An object that returns information about a component type create
        or update request.
    ComponentSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ComponentSummary'
    ComponentSummary:
      type: object
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        definedIn:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The name of the property definition set in the request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component request.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupResponses'
          description: The property groups.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The status of the component type.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: The `syncSource` of the sync job, if this entity was created
            by a sync job.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
      required:
      - componentName
      - componentTypeId
      - status
      description: An object that returns information about a component summary.
    ComponentTypeId:
      type: string
      pattern: ^[a-zA-Z_\.\-0-9:]+$
      minLength: 1
      maxLength: 256
    ComponentTypeName:
      type: string
      pattern: '[^\u0000-\u001F\u007F]*'
      minLength: 0
      maxLength: 256
    ComponentTypeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ComponentTypeSummary'
    ComponentTypeSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the component type was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the component type was last updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the component type.
        componentTypeName:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeName'
          description: The component type name.
      required:
      - arn
      - componentTypeId
      - creationDateTime
      - updateDateTime
      description: An object that contains information about a component type.
    ComponentUpdateRequest:
      type: object
      properties:
        updateType:
          allOf:
          - $ref: '#/components/schemas/ComponentUpdateType'
          description: The update type of the component update request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        propertyUpdates:
          allOf:
          - $ref: '#/components/schemas/PropertyRequests'
          description: An object that maps strings to the properties to set in the
            component type update. Each string in the mapping must be unique to this
            object.
        propertyGroupUpdates:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
          description: The property group updates.
      description: The component update request.
    ComponentUpdateType:
      type: string
      enum:
      - CREATE
      - UPDATE
      - DELETE
    ComponentUpdatesMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentUpdateRequest'
    ComponentsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentResponse'
    ComponentsMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentRequest'
    CompositeComponentRequest:
      type: object
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        properties:
          allOf:
          - $ref: '#/components/schemas/PropertyRequests'
          description: This is an object that maps strings to the properties to set
            in the component type. Each string in the mapping must be unique to this
            object.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
          description: The property groups.
      description: An object that sets information about the composite component update
        request.
    CompositeComponentResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentSummary'
    CompositeComponentTypeRequest:
      type: object
      properties:
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: This is the `componentTypeId` that the `compositeComponentType`
            refers to.
      description: An object that sets information about the composite component types
        of a component type.
    CompositeComponentTypeResponse:
      type: object
      properties:
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: This is the `componentTypeId` that this `compositeComponentType`
            refers to.
        isInherited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This boolean indicates whether this `compositeComponentType`
            is inherited from its parent.
      description: An object that returns information about the composite component
        types of a component type.
    CompositeComponentTypesRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CompositeComponentTypeRequest'
    CompositeComponentTypesResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CompositeComponentTypeResponse'
    CompositeComponentUpdateRequest:
      type: object
      properties:
        updateType:
          allOf:
          - $ref: '#/components/schemas/ComponentUpdateType'
          description: The update type of the component update request.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        propertyUpdates:
          allOf:
          - $ref: '#/components/schemas/PropertyRequests'
          description: An object that maps strings to the properties to set in the
            component type update. Each string in the mapping must be unique to this
            object.
        propertyGroupUpdates:
          allOf:
          - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
          description: The property group updates.
      description: An object that sets information about the composite component update
        request.
    CompositeComponentUpdatesMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CompositeComponentUpdateRequest'
    CompositeComponentsMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/CompositeComponentRequest'
    Configuration:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Value'
    ConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: A conflict occurred.
    ConnectorFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The connector failed.
    ConnectorTimeoutException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The connector timed out.
    CreateComponentTypeRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the component type.
        isSingleton:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether an entity can have more
            than one component of this type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        propertyDefinitions:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionsRequest'
          description: An object that maps strings to the property definitions in
            the component type. Each string in the mapping must be unique to this
            object.
        extendsFrom:
          allOf:
          - $ref: '#/components/schemas/ExtendsFrom'
          description: Specifies the parent component type to extend.
        functions:
          allOf:
          - $ref: '#/components/schemas/FunctionsRequest'
          description: An object that maps strings to the functions in the component
            type. Each string in the mapping must be unique to this object.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata that you can use to manage the component type.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/PropertyGroupsRequest'
          description: ''
        componentTypeName:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeName'
          description: A friendly name for the component type.
        compositeComponentTypes:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentTypesRequest'
          description: This is an object that maps strings to `compositeComponentTypes`
            of the `componentType`. `CompositeComponentType` is referenced by `componentTypeId`.
      required:
      - workspaceId
      - componentTypeId
    CreateComponentTypeResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the component type.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was created.
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the component type.
      required:
      - arn
      - creationDateTime
      - state
    CreateEntityRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the entity.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the entity.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the entity.
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentsMapRequest'
          description: An object that maps strings to the components in the entity.
            Each string in the mapping must be unique to this object.
        compositeComponents:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentsMapRequest'
          description: This is an object that maps strings to `compositeComponent`
            updates in the request. Each key of the map represents the `componentPath`
            of the `compositeComponent`.
        parentEntityId:
          allOf:
          - $ref: '#/components/schemas/ParentEntityId'
          description: The ID of the entity's parent entity.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata that you can use to manage the entity.
      required:
      - workspaceId
      - entityName
    CreateEntityResponse:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the entity.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was created.
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the entity.
      required:
      - entityId
      - arn
      - creationDateTime
      - state
    CreateMetadataTransferJobRequest:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The metadata transfer job description.
        sources:
          allOf:
          - $ref: '#/components/schemas/SourceConfigurations'
          description: The metadata transfer job sources.
        destination:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: The metadata transfer job destination.
      required:
      - sources
      - destination
    CreateMetadataTransferJobResponse:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The metadata transfer job ARN.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The The metadata transfer job creation DateTime property.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobStatus'
          description: The metadata transfer job response status.
      required:
      - metadataTransferJobId
      - arn
      - creationDateTime
      - status
    CreateSceneRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the scene.
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene.
        contentLocation:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The relative path that specifies the location of the content
            definition file.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description for this scene.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/SceneCapabilities'
          description: A list of capabilities that the scene uses to render itself.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata that you can use to manage the scene.
        sceneMetadata:
          allOf:
          - $ref: '#/components/schemas/SceneMetadataMap'
          description: The request metadata.
      required:
      - workspaceId
      - sceneId
      - contentLocation
    CreateSceneResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the scene.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was created.
      required:
      - arn
      - creationDateTime
    CreateSyncJobRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The workspace ID.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: 'The sync source.


            Currently the only supported syncSoource is `SITEWISE `.'
        syncRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The SyncJob IAM role. This IAM role is used by the SyncJob
            to read from the syncSource, and create, update, or delete the corresponding
            resources.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: The SyncJob tags.
      required:
      - workspaceId
      - syncSource
      - syncRole
    CreateSyncJobResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The SyncJob ARN.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time for the SyncJob creation.
        state:
          allOf:
          - $ref: '#/components/schemas/SyncJobState'
          description: The SyncJob response state.
      required:
      - arn
      - creationDateTime
      - state
    CreateWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the workspace.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The ARN of the S3 bucket where resources associated with the
            workspace are stored.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the execution role associated with the workspace.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata that you can use to manage the workspace
      required:
      - workspaceId
    CreateWorkspaceResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the workspace.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the workspace was created.
      required:
      - arn
      - creationDateTime
    DataConnector:
      type: object
      properties:
        lambda:
          allOf:
          - $ref: '#/components/schemas/LambdaFunction'
          description: The Lambda function associated with this data connector.
        isNative:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the data connector is
            native to IoT TwinMaker.
      description: The data connector.
    DataType:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/Type'
          description: The underlying type of the data type.
        nestedType:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: The nested type in the data type.
        allowedValues:
          allOf:
          - $ref: '#/components/schemas/DataValueList'
          description: The allowed values for this data type.
        unitOfMeasure:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The unit of measure used in this data type.
        relationship:
          allOf:
          - $ref: '#/components/schemas/Relationship'
          description: A relationship that associates a component with another component.
      required:
      - type
      description: An object that specifies the data type of a property.
    DataValue:
      type: object
      properties:
        booleanValue:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value.
        doubleValue:
          allOf:
          - $ref: '#/components/schemas/Double'
          description: A double value.
        integerValue:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: An integer value.
        longValue:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: A long value.
        stringValue:
          allOf:
          - $ref: '#/components/schemas/String'
          description: A string value.
        listValue:
          allOf:
          - $ref: '#/components/schemas/DataValueList'
          description: A list of multiple values.
        mapValue:
          allOf:
          - $ref: '#/components/schemas/DataValueMap'
          description: An object that maps strings to multiple `DataValue` objects.
        relationshipValue:
          allOf:
          - $ref: '#/components/schemas/RelationshipValue'
          description: A value that relates a component to another component.
        expression:
          allOf:
          - $ref: '#/components/schemas/Expression'
          description: An expression that produces the value.
      description: An object that specifies a value for a property.
    DataValueList:
      type: array
      items:
        $ref: '#/components/schemas/DataValue'
    DataValueMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataValue'
    DeleteComponentTypeRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type to delete.
      required:
      - workspaceId
      - componentTypeId
    DeleteComponentTypeResponse:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the component type to be deleted.
      required:
      - state
    DeleteEntityRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the entity to delete.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity to delete.
        isRecursive:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the operation deletes
            child entities.
      required:
      - workspaceId
      - entityId
    DeleteEntityResponse:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the deleted entity.
      required:
      - state
    DeleteSceneRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene to delete.
      required:
      - workspaceId
      - sceneId
    DeleteSceneResponse:
      type: object
      properties: {}
    DeleteSyncJobRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The workspace ID.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: 'The sync source.


            Currently the only supported syncSource is `SITEWISE `.'
      required:
      - workspaceId
      - syncSource
    DeleteSyncJobResponse:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/SyncJobState'
          description: The SyncJob response state.
      required:
      - state
    DeleteWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace to delete.
      required:
      - workspaceId
    DeleteWorkspaceResponse:
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/WorkspaceDeleteMessage'
          description: The string that specifies the delete result for the workspace.
    Description:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    DestinationConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DestinationType'
          description: The destination type.
        s3Configuration:
          allOf:
          - $ref: '#/components/schemas/S3DestinationConfiguration'
          description: The metadata transfer job S3 configuration. [need to add S3
            entity]
        iotTwinMakerConfiguration:
          allOf:
          - $ref: '#/components/schemas/IotTwinMakerDestinationConfiguration'
          description: The metadata transfer job Amazon Web Services IoT TwinMaker
            configuration.
      required:
      - type
      description: The [link to action] metadata transfer job destination configuration.
    DestinationType:
      type: string
      enum:
      - s3
      - iotsitewise
      - iottwinmaker
    Double:
      type: number
      format: double
    EntityId:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 128
    EntityName:
      type: string
      pattern: ^[^\u0000-\u001F\u007F]+$
      minLength: 1
      maxLength: 256
    EntityPropertyReference:
      type: object
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
        externalIdProperty:
          allOf:
          - $ref: '#/components/schemas/ExternalIdProperty'
          description: A mapping of external IDs to property names. External IDs uniquely
            identify properties from external data stores.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        propertyName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the property.
      required:
      - propertyName
      description: An object that uniquely identifies an entity property.
    EntitySummaries:
      type: array
      items:
        $ref: '#/components/schemas/EntitySummary'
    EntitySummary:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the entity.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the entity.
        parentEntityId:
          allOf:
          - $ref: '#/components/schemas/ParentEntityId'
          description: The ID of the parent entity.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the entity.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the entity.
        hasChildEntities:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: An **eventual** Boolean value that specifies whether the entity
            has child entities or not.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The last date and time when the entity was updated.
      required:
      - entityId
      - entityName
      - arn
      - status
      - creationDateTime
      - updateDateTime
      description: An object that contains information about an entity.
    Entries:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValueEntry'
    ErrorCode:
      type: string
      enum:
      - VALIDATION_ERROR
      - INTERNAL_FAILURE
      - SYNC_INITIALIZING_ERROR
      - SYNC_CREATING_ERROR
      - SYNC_PROCESSING_ERROR
      - SYNC_DELETING_ERROR
      - PROCESSING_ERROR
      - COMPOSITE_COMPONENT_FAILURE
    ErrorDetails:
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The error code.
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The error message.
      description: The error details.
    ErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutPropertyErrorEntry'
    ErrorMessage:
      type: string
      minLength: 0
      maxLength: 2048
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutPropertyError'
    ExceptionMessage:
      type: string
    ExecuteQueryRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        queryStatement:
          allOf:
          - $ref: '#/components/schemas/QueryStatement'
          description: The query statement.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/QueryServiceMaxResults'
          description: The maximum number of results to return at one time. The default
            is 50.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
      - queryStatement
    ExecuteQueryResponse:
      type: object
      properties:
        columnDescriptions:
          allOf:
          - $ref: '#/components/schemas/ColumnDescriptions'
          description: A list of ColumnDescription objects.
        rows:
          allOf:
          - $ref: '#/components/schemas/Rows'
          description: Represents a single row in the query results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    Expression:
      type: string
      pattern: ^(^\$\{Parameters\.[a-zA-z]+([a-zA-z_0-9]*)}$)$
      minLength: 1
      maxLength: 316
    ExtendsFrom:
      type: array
      items:
        $ref: '#/components/schemas/ComponentTypeId'
    ExternalIdProperty:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    FilterByAsset:
      type: object
      properties:
        assetId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: Filter by asset Id.
        assetExternalId:
          allOf:
          - $ref: '#/components/schemas/SiteWiseExternalId'
          description: The external-Id property of an asset.
        includeOffspring:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Includes sub-assets.[need description hekp for this]
        includeAssetModel:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Boolean to include the asset model.
      description: Filter by asset. [TwinMaker asset]
    FilterByAssetModel:
      type: object
      properties:
        assetModelId:
          allOf:
          - $ref: '#/components/schemas/Uuid'
          description: The asset model Id.
        assetModelExternalId:
          allOf:
          - $ref: '#/components/schemas/SiteWiseExternalId'
          description: The external-Id property of an asset model.
        includeOffspring:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Include asset offspring. [need desc.]
        includeAssets:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Bolean to include assets.
      description: Filter by asset model.
    FilterByComponentType:
      type: object
      properties:
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The component type Id.
      required:
      - componentTypeId
      description: Filter by component type.
    FilterByEntity:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The entity Id.
      required:
      - entityId
      description: Vilter by entity.
    FunctionRequest:
      type: object
      properties:
        requiredProperties:
          allOf:
          - $ref: '#/components/schemas/RequiredProperties'
          description: The required properties of the function.
        scope:
          allOf:
          - $ref: '#/components/schemas/Scope'
          description: The scope of the function.
        implementedBy:
          allOf:
          - $ref: '#/components/schemas/DataConnector'
          description: The data connector.
      description: The function request body.
    FunctionResponse:
      type: object
      properties:
        requiredProperties:
          allOf:
          - $ref: '#/components/schemas/RequiredProperties'
          description: The required properties of the function.
        scope:
          allOf:
          - $ref: '#/components/schemas/Scope'
          description: The scope of the function.
        implementedBy:
          allOf:
          - $ref: '#/components/schemas/DataConnector'
          description: The data connector.
        isInherited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: Indicates whether this function is inherited.
      description: The function response.
    FunctionsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FunctionRequest'
    FunctionsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FunctionResponse'
    GeneratedSceneMetadataMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SceneMetadataValue'
    GetComponentTypeRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
      required:
      - workspaceId
      - componentTypeId
    GetComponentTypeResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the component type.
        isSingleton:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether an entity can have more
            than one component of this type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        propertyDefinitions:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionsResponse'
          description: An object that maps strings to the property definitions in
            the component type. Each string in the mapping must be unique to this
            object.
        extendsFrom:
          allOf:
          - $ref: '#/components/schemas/ExtendsFrom'
          description: The name of the parent component type that this component type
            extends.
        functions:
          allOf:
          - $ref: '#/components/schemas/FunctionsResponse'
          description: An object that maps strings to the functions in the component
            type. Each string in the mapping must be unique to this object.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the component type was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the component was last updated.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the component type.
        isAbstract:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the component type is
            abstract.
        isSchemaInitialized:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the component type has
            a schema initializer and that the schema initializer has run.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the component type.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/PropertyGroupsResponse'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: The syncSource of the SyncJob, if this entity was created by
            a SyncJob.
        componentTypeName:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeName'
          description: The component type name.
        compositeComponentTypes:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentTypesResponse'
          description: This is an object that maps strings to `compositeComponentTypes`
            of the `componentType`. `CompositeComponentType` is referenced by `componentTypeId`.
      required:
      - workspaceId
      - componentTypeId
      - creationDateTime
      - updateDateTime
      - arn
    GetEntityRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
      required:
      - workspaceId
      - entityId
    GetEntityResponse:
      type: object
      properties:
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the entity.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the entity.
        status:
          allOf:
          - $ref: '#/components/schemas/Status'
          description: The current status of the entity.
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the entity.
        components:
          allOf:
          - $ref: '#/components/schemas/ComponentsMap'
          description: An object that maps strings to the components in the entity.
            Each string in the mapping must be unique to this object.
        parentEntityId:
          allOf:
          - $ref: '#/components/schemas/ParentEntityId'
          description: The ID of the parent entity for this entity.
        hasChildEntities:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the entity has associated
            child entities.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was last updated.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: The syncSource of the sync job, if this entity was created
            by a sync job.
        areAllComponentsReturned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag notes whether all components are returned in the
            API response. The maximum number of components returned is 30.
      required:
      - entityId
      - entityName
      - arn
      - status
      - workspaceId
      - parentEntityId
      - hasChildEntities
      - creationDateTime
      - updateDateTime
    GetMetadataTransferJobRequest:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
      required:
      - metadataTransferJobId
    GetMetadataTransferJobResponse:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job Id.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The metadata transfer job ARN.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The metadata transfer job description.
        sources:
          allOf:
          - $ref: '#/components/schemas/SourceConfigurations'
          description: The metadata transfer job's sources.
        destination:
          allOf:
          - $ref: '#/components/schemas/DestinationConfiguration'
          description: The metadata transfer job's destination.
        metadataTransferJobRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The metadata transfer job's role.
        reportUrl:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The metadata transfer job's report URL.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The metadata transfer job's creation DateTime property.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The metadata transfer job's update DateTime property.
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobStatus'
          description: The metadata transfer job's status.
        progress:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobProgress'
          description: The metadata transfer job's progress.
      required:
      - metadataTransferJobId
      - arn
      - sources
      - destination
      - metadataTransferJobRole
      - creationDateTime
      - updateDateTime
      - status
    GetPricingPlanRequest:
      type: object
      properties: {}
    GetPricingPlanResponse:
      type: object
      properties:
        currentPricingPlan:
          allOf:
          - $ref: '#/components/schemas/PricingPlan'
          description: The chosen pricing plan for the current billing cycle.
        pendingPricingPlan:
          allOf:
          - $ref: '#/components/schemas/PricingPlan'
          description: The pending pricing plan.
      required:
      - currentPricingPlan
    GetPropertyValueHistoryRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        selectedProperties:
          allOf:
          - $ref: '#/components/schemas/SelectedPropertyList'
          description: A list of properties whose value histories the request retrieves.
        propertyFilters:
          allOf:
          - $ref: '#/components/schemas/PropertyFilters'
          description: A list of objects that filter the property value history request.
        startDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the earliest property value to return.
        endDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the latest property value to return.
        interpolation:
          allOf:
          - $ref: '#/components/schemas/InterpolationParameters'
          description: An object that specifies the interpolation type and the interval
            over which to interpolate data.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        orderByTime:
          allOf:
          - $ref: '#/components/schemas/OrderByTime'
          description: The time direction to use in the result order.
        startTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: 'The ISO8601 DateTime of the earliest property value to return.


            For more information about the ISO8601 DateTime format, see the data type
            [PropertyValue](https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html).'
        endTime:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: 'The ISO8601 DateTime of the latest property value to return.


            For more information about the ISO8601 DateTime format, see the data type
            [PropertyValue](https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html).'
      required:
      - workspaceId
      - selectedProperties
    GetPropertyValueHistoryResponse:
      type: object
      properties:
        propertyValues:
          allOf:
          - $ref: '#/components/schemas/PropertyValueList'
          description: An object that maps strings to the property definitions in
            the component type. Each string in the mapping must be unique to this
            object.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - propertyValues
    GetPropertyValueRequest:
      type: object
      properties:
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component whose property values the operation
            returns.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type whose property values the operation
            returns.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity whose property values the operation returns.
        selectedProperties:
          allOf:
          - $ref: '#/components/schemas/SelectedPropertyList'
          description: The properties whose values the operation returns.
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace whose values the operation returns.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        propertyGroupName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The property group name.
        tabularConditions:
          allOf:
          - $ref: '#/components/schemas/TabularConditions'
          description: The tabular conditions.
      required:
      - selectedProperties
      - workspaceId
    GetPropertyValueResponse:
      type: object
      properties:
        propertyValues:
          allOf:
          - $ref: '#/components/schemas/PropertyLatestValueMap'
          description: An object that maps strings to the properties and latest property
            values in the response. Each string in the mapping must be unique to this
            object.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        tabularPropertyValues:
          allOf:
          - $ref: '#/components/schemas/TabularPropertyValues'
          description: A table of property values.
    GetSceneRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the scene.
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene.
      required:
      - workspaceId
      - sceneId
    GetSceneResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the scene.
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene.
        contentLocation:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The relative path that specifies the location of the content
            definition file.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the scene.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was last updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the scene.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/SceneCapabilities'
          description: A list of capabilities that the scene uses to render.
        sceneMetadata:
          allOf:
          - $ref: '#/components/schemas/SceneMetadataMap'
          description: The response metadata.
        generatedSceneMetadata:
          allOf:
          - $ref: '#/components/schemas/GeneratedSceneMetadataMap'
          description: The generated scene metadata.
        error:
          allOf:
          - $ref: '#/components/schemas/SceneError'
          description: The SceneResponse error.
      required:
      - workspaceId
      - sceneId
      - contentLocation
      - arn
      - creationDateTime
      - updateDateTime
    GetSyncJobRequest:
      type: object
      properties:
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: 'The sync source.


            Currently the only supported syncSource is `SITEWISE `.'
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The workspace ID.
      required:
      - syncSource
    GetSyncJobResponse:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The sync job ARN.
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the sync job.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: 'The sync soucre.


            Currently the only supported syncSource is `SITEWISE `.'
        syncRole:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The sync IAM role.
        status:
          allOf:
          - $ref: '#/components/schemas/SyncJobStatus'
          description: The SyncJob response status.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The update date and time.
      required:
      - arn
      - workspaceId
      - syncSource
      - syncRole
      - status
      - creationDateTime
      - updateDateTime
    GetWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/IdOrArn'
          description: The ID of the workspace.
      required:
      - workspaceId
    GetWorkspaceResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the workspace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the workspace.
        linkedServices:
          allOf:
          - $ref: '#/components/schemas/LinkedServices'
          description: A list of services that are linked to the workspace.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The ARN of the S3 bucket where resources associated with the
            workspace are stored.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the execution role associated with the workspace.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the workspace was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the workspace was last updated.
      required:
      - workspaceId
      - arn
      - creationDateTime
      - updateDateTime
    GroupType:
      type: string
      enum:
      - TABULAR
    Id:
      type: string
      pattern: ^[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 128
    IdOrArn:
      type: string
      pattern: ^[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+$|^arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_-]+$
      minLength: 1
      maxLength: 2048
    Integer:
      type: integer
    InternalServerException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: An unexpected error has occurred.
    InterpolationParameters:
      type: object
      properties:
        interpolationType:
          allOf:
          - $ref: '#/components/schemas/InterpolationType'
          description: The interpolation type.
        intervalInSeconds:
          allOf:
          - $ref: '#/components/schemas/IntervalInSeconds'
          description: The interpolation time interval in seconds.
      description: An object that specifies how to interpolate data in a list.
    InterpolationType:
      type: string
      enum:
      - LINEAR
    IntervalInSeconds:
      type: integer
      format: int64
    IotSiteWiseSourceConfiguration:
      type: object
      properties:
        filters:
          allOf:
          - $ref: '#/components/schemas/IotSiteWiseSourceConfigurationFilters'
          description: The AWS IoT SiteWise soucre configuration filters.
      description: The metadata transfer job AWS IoT SiteWise source configuration.
    IotSiteWiseSourceConfigurationFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FilterByAssetModel'
        description: |-
          Filter by asset model.
      - allOf:
        - $ref: '#/components/schemas/FilterByAsset'
        description: |-
          Filter by asset.
      description: |-
        The AWS IoT SiteWise soucre configuration filter.[need held with desc here]
    IotSiteWiseSourceConfigurationFilters:
      type: array
      items:
        $ref: '#/components/schemas/IotSiteWiseSourceConfigurationFilter'
    IotTwinMakerDestinationConfiguration:
      type: object
      properties:
        workspace:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The IoT TwinMaker workspace.
      required:
      - workspace
      description: The metadata transfer job AWS IoT TwinMaker destination configuration.
    IotTwinMakerSourceConfiguration:
      type: object
      properties:
        workspace:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The IoT TwinMaker workspace.
        filters:
          allOf:
          - $ref: '#/components/schemas/IotTwinMakerSourceConfigurationFilters'
          description: The metadata transfer job AWS IoT TwinMaker source configuration
            filters.
      required:
      - workspace
      description: The metadata transfer job AWS IoT TwinMaker source configuration.
    IotTwinMakerSourceConfigurationFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/FilterByComponentType'
        description: |-
          Filter by component type.
      - allOf:
        - $ref: '#/components/schemas/FilterByEntity'
        description: |-
          Filter by entity.
      description: |-
        The metadata transfer job AWS IoT TwinMaker source configuration filter.
    IotTwinMakerSourceConfigurationFilters:
      type: array
      items:
        $ref: '#/components/schemas/IotTwinMakerSourceConfigurationFilter'
    LambdaArn:
      type: string
      pattern: ^arn:((aws)|(aws-cn)|(aws-us-gov)):lambda:[a-z0-9-]+:[0-9]{12}:function:[\/a-zA-Z0-9_-]+$
      minLength: 20
      maxLength: 2048
    LambdaFunction:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/LambdaArn'
          description: The ARN of the Lambda function.
      required:
      - arn
      description: The Lambda function.
    LinkedService:
      type: string
      pattern: ^[a-zA-Z_0-9]+$
    LinkedServices:
      type: array
      items:
        $ref: '#/components/schemas/LinkedService'
    ListComponentTypesFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ComponentTypeId'
        description: |-
          The component type that the component types in the list extend.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The namespace to which the component types in the list belong.
      - allOf:
        - $ref: '#/components/schemas/Boolean'
        description: |-
          A Boolean value that specifies whether the component types in the list are abstract.
      description: |-
        An object that filters items in a list of component types.

        Only one object is accepted as a valid input.
    ListComponentTypesFilters:
      type: array
      items:
        $ref: '#/components/schemas/ListComponentTypesFilter'
    ListComponentTypesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        filters:
          allOf:
          - $ref: '#/components/schemas/ListComponentTypesFilters'
          description: A list of objects that filter the request.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
      required:
      - workspaceId
    ListComponentTypesResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        componentTypeSummaries:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeSummaries'
          description: A list of objects that contain information about the component
            types.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of results to display.
      required:
      - workspaceId
      - componentTypeSummaries
    ListComponentsRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The workspace ID.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID for the entity whose metadata (component/properties)
            is returned by the operation.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned at one time. The default
            is 25.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
      - entityId
    ListComponentsResponse:
      type: object
      properties:
        componentSummaries:
          allOf:
          - $ref: '#/components/schemas/ComponentSummaries'
          description: A list of objects that contain information about the components.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of component results.
      required:
      - componentSummaries
    ListEntitiesFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/ParentEntityId'
        description: |-
          The parent of the entities in the list.
      - allOf:
        - $ref: '#/components/schemas/ComponentTypeId'
        description: |-
          The ID of the component type in the entities in the list.
      - allOf:
        - $ref: '#/components/schemas/String'
        description: |-
          The external-Id property of a component. The external-Id property is the primary key of an external storage system.
      description: |-
        An object that filters items in a list of entities.
    ListEntitiesFilters:
      type: array
      items:
        $ref: '#/components/schemas/ListEntitiesFilter'
    ListEntitiesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        filters:
          allOf:
          - $ref: '#/components/schemas/ListEntitiesFilters'
          description: 'A list of objects that filter the request.


            Only one object is accepted as a valid input.'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
    ListEntitiesResponse:
      type: object
      properties:
        entitySummaries:
          allOf:
          - $ref: '#/components/schemas/EntitySummaries'
          description: A list of objects that contain information about the entities.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListMetadataTransferJobsFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/Id'
        description: |-
          The workspace Id.
      - allOf:
        - $ref: '#/components/schemas/MetadataTransferJobState'
        description: |-
          The filter state.
      description: |-
        The ListMetadataTransferJobs filter.
    ListMetadataTransferJobsFilters:
      type: array
      items:
        $ref: '#/components/schemas/ListMetadataTransferJobsFilter'
    ListMetadataTransferJobsRequest:
      type: object
      properties:
        sourceType:
          allOf:
          - $ref: '#/components/schemas/SourceType'
          description: The metadata transfer job's source type.
        destinationType:
          allOf:
          - $ref: '#/components/schemas/DestinationType'
          description: The metadata transfer job's destination type.
        filters:
          allOf:
          - $ref: '#/components/schemas/ListMetadataTransferJobsFilters'
          description: An object that filters metadata transfer jobs.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results to return at one time.
      required:
      - sourceType
      - destinationType
    ListMetadataTransferJobsResponse:
      type: object
      properties:
        metadataTransferJobSummaries:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobSummaries'
          description: The metadata transfer job summaries.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - metadataTransferJobSummaries
    ListPropertiesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The workspace ID.
        componentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the component whose properties are returned by
            the operation.
        componentPath:
          allOf:
          - $ref: '#/components/schemas/ComponentPath'
          description: This string specifies the path to the composite component,
            starting from the top-level component.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID for the entity whose metadata (component/properties)
            is returned by the operation.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: The maximum number of results returned at one time. The default
            is 25.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
      - entityId
    ListPropertiesResponse:
      type: object
      properties:
        propertySummaries:
          allOf:
          - $ref: '#/components/schemas/PropertySummaries'
          description: A list of objects that contain information about the properties.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of property results.
      required:
      - propertySummaries
    ListScenesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the scenes.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: Specifies the maximum number of results to display.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
    ListScenesResponse:
      type: object
      properties:
        sceneSummaries:
          allOf:
          - $ref: '#/components/schemas/SceneSummaries'
          description: A list of objects that contain information about the scenes.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListSyncJobsRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the sync job.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 50.


            Valid Range: Minimum value of 0. Maximum value of 200.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
    ListSyncJobsResponse:
      type: object
      properties:
        syncJobSummaries:
          allOf:
          - $ref: '#/components/schemas/SyncJobSummaries'
          description: The listed SyncJob summaries.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListSyncResourcesRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the sync job.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: 'The sync source.


            Currently the only supported syncSource is `SITEWISE `.'
        filters:
          allOf:
          - $ref: '#/components/schemas/SyncResourceFilters'
          description: "A list of objects that filter the request.\n\nThe following\
            \ filter combinations are supported:\n\n  * Filter with state\n\n  * Filter\
            \ with ResourceType and ResourceId\n\n  * Filter with ResourceType and\
            \ ExternalId"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 50.


            Valid Range: Minimum value of 0. Maximum value of 200.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - workspaceId
      - syncSource
    ListSyncResourcesResponse:
      type: object
      properties:
        syncResources:
          allOf:
          - $ref: '#/components/schemas/SyncResourceSummaries'
          description: The sync resources.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListTagsForResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the resource.
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
      required:
      - resourceARN
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata that you can use to manage a resource.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListWorkspacesRequest:
      type: object
      properties:
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          description: 'The maximum number of results to return at one time. The default
            is 25.


            Valid Range: Minimum value of 1. Maximum value of 250.'
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    ListWorkspacesResponse:
      type: object
      properties:
        workspaceSummaries:
          allOf:
          - $ref: '#/components/schemas/WorkspaceSummaries'
          description: A list of objects that contain information about the workspaces.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          description: The string that specifies the next page of results.
    Long:
      type: integer
      format: int64
    MaxResults:
      type: integer
      minimum: 0
      maximum: 200
    MetadataTransferJobProgress:
      type: object
      properties:
        totalCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The total count. [of what]
        succeededCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The succeeded count.
        skippedCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The skipped count.
        failedCount:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The failed count.
      description: The metadata transfer job's progress.
    MetadataTransferJobState:
      type: string
      enum:
      - VALIDATING
      - PENDING
      - RUNNING
      - CANCELLING
      - ERROR
      - COMPLETED
      - CANCELLED
    MetadataTransferJobStatus:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobState'
          description: The metadata transfer job state.
        error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: The metadata transfer job error.
        queuedPosition:
          allOf:
          - $ref: '#/components/schemas/Integer'
          description: The queued position.
      description: The metadata transfer job status.
    MetadataTransferJobSummaries:
      type: array
      items:
        $ref: '#/components/schemas/MetadataTransferJobSummary'
    MetadataTransferJobSummary:
      type: object
      properties:
        metadataTransferJobId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The metadata transfer job summary Id.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The metadata transfer job summary ARN.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The metadata transfer job summary creation DateTime object.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The metadata transfer job summary update DateTime object
        status:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobStatus'
          description: The metadata transfer job summary status.
        progress:
          allOf:
          - $ref: '#/components/schemas/MetadataTransferJobProgress'
          description: The metadata transfer job summary progess.
      required:
      - metadataTransferJobId
      - arn
      - creationDateTime
      - updateDateTime
      - status
      description: The metadata transfer job summary.
    Name:
      type: string
      pattern: ^[a-zA-Z_\-0-9]+$
      minLength: 1
      maxLength: 256
    NextToken:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 17880
    Order:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    OrderBy:
      type: object
      properties:
        order:
          allOf:
          - $ref: '#/components/schemas/Order'
          description: The set order that filters results.
        propertyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The property name.
      required:
      - propertyName
      description: Filter criteria that orders the return output. It can be sorted
        in ascending or descending order.
    OrderByList:
      type: array
      items:
        $ref: '#/components/schemas/OrderBy'
    OrderByTime:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    ParentEntityId:
      type: string
      pattern: ^\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+$
      minLength: 1
      maxLength: 128
    ParentEntityUpdateRequest:
      type: object
      properties:
        updateType:
          allOf:
          - $ref: '#/components/schemas/ParentEntityUpdateType'
          description: The type of the update.
        parentEntityId:
          allOf:
          - $ref: '#/components/schemas/ParentEntityId'
          description: The ID of the parent entity.
      required:
      - updateType
      description: The parent entity update request.
    ParentEntityUpdateType:
      type: string
      enum:
      - UPDATE
      - DELETE
    PricingBundles:
      type: array
      items:
        $ref: '#/components/schemas/BundleName'
    PricingMode:
      type: string
      enum:
      - BASIC
      - STANDARD
      - TIERED_BUNDLE
    PricingPlan:
      type: object
      properties:
        billableEntityCount:
          allOf:
          - $ref: '#/components/schemas/Long'
          description: The billable entity count.
        bundleInformation:
          allOf:
          - $ref: '#/components/schemas/BundleInformation'
          description: The pricing plan's bundle information.
        effectiveDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The effective date and time of the pricing plan.
        pricingMode:
          allOf:
          - $ref: '#/components/schemas/PricingMode'
          description: The pricing mode.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The set date and time for updating a pricing plan.
        updateReason:
          allOf:
          - $ref: '#/components/schemas/UpdateReason'
          description: The update reason for changing a pricing plan.
      required:
      - effectiveDateTime
      - pricingMode
      - updateDateTime
      - updateReason
      description: The pricing plan.
    PricingTier:
      type: string
      enum:
      - TIER_1
      - TIER_2
      - TIER_3
      - TIER_4
    PropertyDefinitionRequest:
      type: object
      properties:
        dataType:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: An object that contains information about the data type.
        isRequiredInEntity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property is required.
        isExternalId:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property ID comes
            from an external data store.
        isStoredExternally:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property is stored
            externally.
        isTimeSeries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property consists
            of time series data.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: An object that contains the default value.
        configuration:
          allOf:
          - $ref: '#/components/schemas/Configuration'
          description: A mapping that specifies configuration information about the
            property. Use this field to specify information that you read from and
            write to an external source.
        displayName:
          allOf:
          - $ref: '#/components/schemas/PropertyDisplayName'
          description: A friendly name for the property.
      description: An object that sets information about a property.
    PropertyDefinitionResponse:
      type: object
      properties:
        dataType:
          allOf:
          - $ref: '#/components/schemas/DataType'
          description: An object that contains information about the data type.
        isTimeSeries:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property consists
            of time series data.
        isRequiredInEntity:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property is required
            in an entity.
        isExternalId:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property ID comes
            from an external data store.
        isStoredExternally:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property is stored
            externally.
        isImported:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property definition
            is imported from an external data store.
        isFinal:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property definition
            can be updated.
        isInherited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property definition
            is inherited from a parent entity.
        defaultValue:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: An object that contains the default value.
        configuration:
          allOf:
          - $ref: '#/components/schemas/Configuration'
          description: A mapping that specifies configuration information about the
            property.
        displayName:
          allOf:
          - $ref: '#/components/schemas/PropertyDisplayName'
          description: A friendly name for the property.
      required:
      - dataType
      - isTimeSeries
      - isRequiredInEntity
      - isExternalId
      - isStoredExternally
      - isImported
      - isFinal
      - isInherited
      description: An object that contains response data from a property definition
        request.
    PropertyDefinitionsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyDefinitionRequest'
    PropertyDefinitionsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyDefinitionResponse'
    PropertyDisplayName:
      type: string
      pattern: '[^\u0000-\u001F\u007F]*'
      minLength: 0
      maxLength: 256
    PropertyFilter:
      type: object
      properties:
        propertyName:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The property name associated with this property filter.
        operator:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The operator associated with this property filter.
        value:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: The value associated with this property filter.
      description: An object that filters items returned by a property request.
    PropertyFilters:
      type: array
      items:
        $ref: '#/components/schemas/PropertyFilter'
    PropertyGroupRequest:
      type: object
      properties:
        groupType:
          allOf:
          - $ref: '#/components/schemas/GroupType'
          description: The group type.
        propertyNames:
          allOf:
          - $ref: '#/components/schemas/PropertyNames'
          description: The names of properties.
      description: ''
    PropertyGroupResponse:
      type: object
      properties:
        groupType:
          allOf:
          - $ref: '#/components/schemas/GroupType'
          description: The group types.
        propertyNames:
          allOf:
          - $ref: '#/components/schemas/PropertyNames'
          description: The names of properties.
        isInherited:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether the property group is
            inherited from a parent entity
      required:
      - groupType
      - propertyNames
      - isInherited
      description: The property group response
    PropertyGroupUpdateType:
      type: string
      enum:
      - UPDATE
      - DELETE
      - CREATE
    PropertyGroupsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyGroupRequest'
    PropertyGroupsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyGroupResponse'
    PropertyLatestValue:
      type: object
      properties:
        propertyReference:
          allOf:
          - $ref: '#/components/schemas/EntityPropertyReference'
          description: An object that specifies information about a property.
        propertyValue:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: The value of the property.
      required:
      - propertyReference
      description: The latest value of the property.
    PropertyLatestValueMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyLatestValue'
    PropertyNames:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    PropertyRequest:
      type: object
      properties:
        definition:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionRequest'
          description: An object that specifies information about a property.
        value:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: The value of the property.
        updateType:
          allOf:
          - $ref: '#/components/schemas/PropertyUpdateType'
          description: The update type of the update property request.
      description: An object that sets information about a property.
    PropertyRequests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyRequest'
    PropertyResponse:
      type: object
      properties:
        definition:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionResponse'
          description: An object that specifies information about a property.
        value:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: The value of the property.
        areAllPropertyValuesReturned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag notes whether all values of a list or map type property
            are returned in the API response. The maximum number of values per property
            returned is 50.
      description: An object that contains information about a property response.
    PropertyResponses:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyResponse'
    PropertySummaries:
      type: array
      items:
        $ref: '#/components/schemas/PropertySummary'
    PropertySummary:
      type: object
      properties:
        definition:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionResponse'
          description: This is the schema for the property.
        propertyName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: This is the name of the property.
        value:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: This is the value for the property.
        areAllPropertyValuesReturned:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: This flag notes whether all values of a list or map type property
            are returned in the API response. The maximum number of values per property
            returned is 50.
      required:
      - propertyName
      description: This is an object that contains the information of a property.
    PropertyTableValue:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataValue'
    PropertyUpdateType:
      type: string
      enum:
      - UPDATE
      - DELETE
      - CREATE
      - RESET_VALUE
    PropertyValue:
      type: object
      properties:
        timestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The timestamp of a value for a time series property.
        value:
          allOf:
          - $ref: '#/components/schemas/DataValue'
          description: An object that specifies a value for a time series property.
        time:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: "ISO8601 DateTime of a value for a time series property.\n\n\
            The time for when the property value was recorded in ISO 8601 format:\
            \ _YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]_.\n\n  * _[YYYY]_ : year\n\
            \n  * _[MM]_ : month\n\n  * _[DD]_ : day\n\n  * _[hh]_ : hour\n\n  * _[mm]_\
            \ : minute\n\n  * _[ss]_ : seconds\n\n  * _[.SSSSSSSSS]_ : additional\
            \ precision, where precedence is maintained. For example: [.573123] is\
            \ equal to 573123000 nanoseconds.\n\n  * _Z_ : default timezone UTC\n\n\
            \  * _± HH:mm_ : time zone offset in Hours and Minutes.\n\n_Required sub-fields_\
            \ : YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]"
      required:
      - value
      description: An object that contains information about a value for a time series
        property.
    PropertyValueEntry:
      type: object
      properties:
        entityPropertyReference:
          allOf:
          - $ref: '#/components/schemas/EntityPropertyReference'
          description: An object that contains information about the entity that has
            the property.
        propertyValues:
          allOf:
          - $ref: '#/components/schemas/PropertyValues'
          description: A list of objects that specify time series property values.
      required:
      - entityPropertyReference
      description: An object that specifies information about time series property
        values. This object is used and consumed by the [BatchPutPropertyValues](https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html)
        action.
    PropertyValueHistory:
      type: object
      properties:
        entityPropertyReference:
          allOf:
          - $ref: '#/components/schemas/EntityPropertyReference'
          description: An object that uniquely identifies an entity property.
        values:
          allOf:
          - $ref: '#/components/schemas/Values'
          description: A list of objects that contain information about the values
            in the history of a time series property.
      required:
      - entityPropertyReference
      description: The history of values for a time series property.
    PropertyValueList:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValueHistory'
    PropertyValues:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValue'
    QueryResultValue:
      type: object
      additionalProperties: true
    QueryServiceMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    QueryStatement:
      type: string
      pattern: ^[\s\S]+$
      minLength: 1
      maxLength: 1000
    QueryTimeoutException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The query timeout exception.
    Relationship:
      type: object
      properties:
        targetComponentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the target component type associated with this relationship.
        relationshipType:
          allOf:
          - $ref: '#/components/schemas/String'
          description: The type of the relationship.
      description: An object that specifies a relationship with another component
        type.
    RelationshipValue:
      type: object
      properties:
        targetEntityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the target entity associated with this relationship
            value.
        targetComponentName:
          allOf:
          - $ref: '#/components/schemas/Name'
          description: The name of the target component associated with the relationship
            value.
      description: A value that associates a component and an entity.
    RequiredProperties:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The resource wasn't found.
    RoleArn:
      type: string
      pattern: ^arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/
      minLength: 20
      maxLength: 2048
    Row:
      type: object
      properties:
        rowData:
          allOf:
          - $ref: '#/components/schemas/RowData'
          description: The data in a row of query results.
      description: Represents a single row in the query results.
    RowData:
      type: array
      items:
        $ref: '#/components/schemas/QueryResultValue'
    Rows:
      type: array
      items:
        $ref: '#/components/schemas/Row'
    S3DestinationConfiguration:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/S3DestinationLocation'
          description: The S3 destination configuration location.
      required:
      - location
      description: The S3 destination configuration.
    S3DestinationLocation:
      type: string
      pattern: (^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([/a-zA-Z0-9_-]+$)
    S3Location:
      type: string
      pattern: (^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+$)
      minLength: 0
      maxLength: 1024
    S3SourceConfiguration:
      type: object
      properties:
        location:
          allOf:
          - $ref: '#/components/schemas/S3SourceLocation'
          description: The S3 destination source configuration location.
      required:
      - location
      description: The S3 destination source configuration.
    S3SourceLocation:
      type: string
      pattern: (^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+)\/([/.a-zA-Z0-9_-]+$)
    S3Url:
      type: string
      pattern: ^[sS]3://[A-Za-z0-9._/-]+$
      minLength: 0
      maxLength: 256
    SceneCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/SceneCapability'
    SceneCapability:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    SceneError:
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/SceneErrorCode'
          description: The SceneError code.
        message:
          allOf:
          - $ref: '#/components/schemas/ErrorMessage'
          description: The SceneError message.
      description: The scene error.
    SceneErrorCode:
      type: string
      enum:
      - MATTERPORT_ERROR
    SceneMetadataMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/SceneMetadataValue'
    SceneMetadataValue:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    SceneSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SceneSummary'
    SceneSummary:
      type: object
      properties:
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene.
        contentLocation:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The relative path that specifies the location of the content
            definition file.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the scene.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was last updated.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The scene description.
      required:
      - sceneId
      - contentLocation
      - arn
      - creationDateTime
      - updateDateTime
      description: An object that contains information about a scene.
    Scope:
      type: string
      enum:
      - ENTITY
      - WORKSPACE
    SelectedPropertyList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    ServiceQuotaExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The service quota was exceeded.
    SiteWiseExternalId:
      type: string
      pattern: '[a-zA-Z0-9_][a-zA-Z_\-0-9.:]*[a-zA-Z0-9_]+'
      minLength: 2
      maxLength: 128
    SourceConfiguration:
      type: object
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/SourceType'
          description: The source configuration type.
        s3Configuration:
          allOf:
          - $ref: '#/components/schemas/S3SourceConfiguration'
          description: The source configuration S3 configuration.
        iotSiteWiseConfiguration:
          allOf:
          - $ref: '#/components/schemas/IotSiteWiseSourceConfiguration'
          description: The source configuration IoT SiteWise configuration.
        iotTwinMakerConfiguration:
          allOf:
          - $ref: '#/components/schemas/IotTwinMakerSourceConfiguration'
          description: The source configuration IoT TwinMaker configuration.
      required:
      - type
      description: The source configuration.
    SourceConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/SourceConfiguration'
    SourceType:
      type: string
      enum:
      - s3
      - iotsitewise
      - iottwinmaker
    State:
      type: string
      enum:
      - CREATING
      - UPDATING
      - DELETING
      - ACTIVE
      - ERROR
    Status:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the entity, component, component type,
            or workspace.
        error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: The error message.
      description: An object that represents the status of an entity, component, component
        type, or workspace.
    String:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    SyncJobState:
      type: string
      enum:
      - CREATING
      - INITIALIZING
      - ACTIVE
      - DELETING
      - ERROR
    SyncJobStatus:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/SyncJobState'
          description: The SyncJob status state.
        error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: The SyncJob error.
      description: The SyncJob status.
    SyncJobSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SyncJobSummary'
    SyncJobSummary:
      type: object
      properties:
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The SyncJob summary ARN.
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the sync job.
        syncSource:
          allOf:
          - $ref: '#/components/schemas/SyncSource'
          description: The sync source.
        status:
          allOf:
          - $ref: '#/components/schemas/SyncJobStatus'
          description: The SyncJob summaries status.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The creation date and time.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The update date and time.
      description: The SyncJob summary.
    SyncResourceFilter:
      allOf:
      - allOf:
        - $ref: '#/components/schemas/SyncResourceState'
        description: |-
          The sync resource filter's state.
      - allOf:
        - $ref: '#/components/schemas/SyncResourceType'
        description: |-
          The sync resource filter resource type
      - allOf:
        - $ref: '#/components/schemas/Id'
        description: |-
          The sync resource filter resource ID.
      - allOf:
        - $ref: '#/components/schemas/Id'
        description: |-
          The external ID.
      description: |-
        The sync resource filter.
    SyncResourceFilters:
      type: array
      items:
        $ref: '#/components/schemas/SyncResourceFilter'
    SyncResourceState:
      type: string
      enum:
      - INITIALIZING
      - PROCESSING
      - DELETED
      - IN_SYNC
      - ERROR
    SyncResourceStatus:
      type: object
      properties:
        state:
          allOf:
          - $ref: '#/components/schemas/SyncResourceState'
          description: The sync resource status state.
        error:
          allOf:
          - $ref: '#/components/schemas/ErrorDetails'
          description: The status error.
      description: The sync resource status.
    SyncResourceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SyncResourceSummary'
    SyncResourceSummary:
      type: object
      properties:
        resourceType:
          allOf:
          - $ref: '#/components/schemas/SyncResourceType'
          description: The resource type.
        externalId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The external ID.
        resourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The resource ID.
        status:
          allOf:
          - $ref: '#/components/schemas/SyncResourceStatus'
          description: The sync resource summary status.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The update date and time.
      description: The sync resource summary.
    SyncResourceType:
      type: string
      enum:
      - ENTITY
      - COMPONENT_TYPE
    SyncSource:
      type: string
      pattern: ^[a-zA-Z_0-9]+$
    TabularConditions:
      type: object
      properties:
        orderBy:
          allOf:
          - $ref: '#/components/schemas/OrderByList'
          description: Filter criteria that orders the output. It can be sorted in
            ascending or descending order.
        propertyFilters:
          allOf:
          - $ref: '#/components/schemas/PropertyFilters'
          description: 'You can filter the request using various logical operators
            and a key-value format. For example:


            `{"key": "serverType", "value": "webServer"}`'
      description: The tabular conditions.
    TabularPropertyValue:
      type: array
      items:
        $ref: '#/components/schemas/PropertyTableValue'
    TabularPropertyValues:
      type: array
      items:
        $ref: '#/components/schemas/TabularPropertyValue'
    TagKey:
      type: string
      pattern: ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$
      minLength: 1
      maxLength: 128
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    TagResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the resource.
        tags:
          allOf:
          - $ref: '#/components/schemas/TagMap'
          description: Metadata to add to this resource.
      required:
      - resourceARN
      - tags
    TagResourceResponse:
      type: object
      properties: {}
    TagValue:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    ThrottlingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: The rate exceeds the limit.
    Time:
      type: string
      minLength: 20
      maxLength: 35
    Timestamp:
      type: string
      format: date-time
      description: supports epoch seconds value
    TooManyTagsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ExceptionMessage'
      description: The number of tags exceeds the limit.
    TwinMakerArn:
      type: string
      pattern: ^arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+$
      minLength: 20
      maxLength: 2048
    Type:
      type: string
      enum:
      - RELATIONSHIP
      - STRING
      - LONG
      - BOOLEAN
      - INTEGER
      - DOUBLE
      - LIST
      - MAP
    UntagResourceRequest:
      type: object
      properties:
        resourceARN:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the resource.
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          description: A list of tag key names to remove from the resource. You don't
            specify the value. Both the key and its associated value are removed.
      required:
      - resourceARN
      - tagKeys
    UntagResourceResponse:
      type: object
      properties: {}
    UpdateComponentTypeRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        isSingleton:
          allOf:
          - $ref: '#/components/schemas/Boolean'
          description: A Boolean value that specifies whether an entity can have more
            than one component of this type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the component type.
        propertyDefinitions:
          allOf:
          - $ref: '#/components/schemas/PropertyDefinitionsRequest'
          description: An object that maps strings to the property definitions in
            the component type. Each string in the mapping must be unique to this
            object.
        extendsFrom:
          allOf:
          - $ref: '#/components/schemas/ExtendsFrom'
          description: Specifies the component type that this component type extends.
        functions:
          allOf:
          - $ref: '#/components/schemas/FunctionsRequest'
          description: An object that maps strings to the functions in the component
            type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
          - $ref: '#/components/schemas/PropertyGroupsRequest'
          description: The property groups.
        componentTypeName:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeName'
          description: The component type name.
        compositeComponentTypes:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentTypesRequest'
          description: This is an object that maps strings to `compositeComponentTypes`
            of the `componentType`. `CompositeComponentType` is referenced by `componentTypeId`.
      required:
      - workspaceId
      - componentTypeId
    UpdateComponentTypeResponse:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the component type.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the component type.
        componentTypeId:
          allOf:
          - $ref: '#/components/schemas/ComponentTypeId'
          description: The ID of the component type.
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the component type.
      required:
      - workspaceId
      - arn
      - componentTypeId
      - state
    UpdateEntityRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the entity.
        entityId:
          allOf:
          - $ref: '#/components/schemas/EntityId'
          description: The ID of the entity.
        entityName:
          allOf:
          - $ref: '#/components/schemas/EntityName'
          description: The name of the entity.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the entity.
        componentUpdates:
          allOf:
          - $ref: '#/components/schemas/ComponentUpdatesMapRequest'
          description: An object that maps strings to the component updates in the
            request. Each string in the mapping must be unique to this object.
        compositeComponentUpdates:
          allOf:
          - $ref: '#/components/schemas/CompositeComponentUpdatesMapRequest'
          description: This is an object that maps strings to `compositeComponent`
            updates in the request. Each key of the map represents the `componentPath`
            of the `compositeComponent`.
        parentEntityUpdate:
          allOf:
          - $ref: '#/components/schemas/ParentEntityUpdateRequest'
          description: An object that describes the update request for a parent entity.
      required:
      - workspaceId
      - entityId
    UpdateEntityResponse:
      type: object
      properties:
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the entity was last updated.
        state:
          allOf:
          - $ref: '#/components/schemas/State'
          description: The current state of the entity update.
      required:
      - updateDateTime
      - state
    UpdatePricingPlanRequest:
      type: object
      properties:
        pricingMode:
          allOf:
          - $ref: '#/components/schemas/PricingMode'
          description: The pricing mode.
        bundleNames:
          allOf:
          - $ref: '#/components/schemas/PricingBundles'
          description: The bundle names.
      required:
      - pricingMode
    UpdatePricingPlanResponse:
      type: object
      properties:
        currentPricingPlan:
          allOf:
          - $ref: '#/components/schemas/PricingPlan'
          description: Update the current pricing plan.
        pendingPricingPlan:
          allOf:
          - $ref: '#/components/schemas/PricingPlan'
          description: Update the pending pricing plan.
      required:
      - currentPricingPlan
    UpdateReason:
      type: string
      enum:
      - DEFAULT
      - PRICING_TIER_UPDATE
      - ENTITY_COUNT_UPDATE
      - PRICING_MODE_UPDATE
      - OVERWRITTEN
    UpdateSceneRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace that contains the scene.
        sceneId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the scene.
        contentLocation:
          allOf:
          - $ref: '#/components/schemas/S3Url'
          description: The relative path that specifies the location of the content
            definition file.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of this scene.
        capabilities:
          allOf:
          - $ref: '#/components/schemas/SceneCapabilities'
          description: A list of capabilities that the scene uses to render.
        sceneMetadata:
          allOf:
          - $ref: '#/components/schemas/SceneMetadataMap'
          description: The scene metadata.
      required:
      - workspaceId
      - sceneId
    UpdateSceneResponse:
      type: object
      properties:
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the scene was last updated.
      required:
      - updateDateTime
    UpdateWorkspaceRequest:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the workspace.
        role:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          description: The ARN of the execution role associated with the workspace.
        s3Location:
          allOf:
          - $ref: '#/components/schemas/S3Location'
          description: The ARN of the S3 bucket where resources associated with the
            workspace are stored.
      required:
      - workspaceId
    UpdateWorkspaceResponse:
      type: object
      properties:
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time of the current update.
      required:
      - updateDateTime
    Uuid:
      type: string
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      minLength: 36
      maxLength: 36
    ValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/ErrorMessage'
      description: Failed
    Value:
      type: string
      pattern: .*
    Values:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValue'
    WorkspaceDeleteMessage:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    WorkspaceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/WorkspaceSummary'
    WorkspaceSummary:
      type: object
      properties:
        workspaceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          description: The ID of the workspace.
        arn:
          allOf:
          - $ref: '#/components/schemas/TwinMakerArn'
          description: The ARN of the workspace.
        description:
          allOf:
          - $ref: '#/components/schemas/Description'
          description: The description of the workspace.
        linkedServices:
          allOf:
          - $ref: '#/components/schemas/LinkedServices'
          description: A list of services that are linked to the workspace.
        creationDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the workspace was created.
        updateDateTime:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          description: The date and time when the workspace was last updated.
      required:
      - workspaceId
      - arn
      - creationDateTime
      - updateDateTime
      description: An object that contains information about a workspace.
